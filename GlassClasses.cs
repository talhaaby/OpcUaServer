/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/Glass/Flat/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using OpcUa.DI;
using OpcUa.Machinery;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace OpcUa.Glass
{
    #region BaseMaterialModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BaseMaterialType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class BaseMaterialModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseMaterialModel" /> class.
        /// </summary>
        public BaseMaterialModel() : this((BaseMaterialModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseMaterialModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public BaseMaterialModel(BaseMaterialModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Description != null)
                {
                    Description = template.Description.Clone() as LocalizedText;
                }
                if (template.Identifier != null)
                {
                    Identifier = template.Identifier.Clone() as string;
                }
                Location = template.Location == null ? null : template.Location.Clone() as string;
                MaterialIdentifier = template.MaterialIdentifier == null ? null : template.MaterialIdentifier.Clone() as string;
                if (template.Weight != null)
                {
                    Weight = new AnalogUnitModel<double>(template.Weight);
                }
                if (template.X != null)
                {
                    X = new AnalogUnitModel<double>(template.X);
                }
                if (template.Y != null)
                {
                    Y = new AnalogUnitModel<double>(template.Y);
                }
                if (template.Z != null)
                {
                    Z = new AnalogUnitModel<double>(template.Z);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Description
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public LocalizedText Description
        {
            get => m_Description;
            set => SetField(ref m_Description, value, nameof(Description));
        }
        private LocalizedText m_Description;

        /// <summary>
        /// Gets or sets the Identifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Identifier
        {
            get => m_Identifier;
            set => SetField(ref m_Identifier, value, nameof(Identifier));
        }
        private string m_Identifier;

        /// <summary>
        /// Gets or sets the Location
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Location
        {
            get => m_Location;
            set => SetField(ref m_Location, value, nameof(Location));
        }
        private string m_Location;

        /// <summary>
        /// Gets or sets the MaterialIdentifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string MaterialIdentifier
        {
            get => m_MaterialIdentifier;
            set => SetField(ref m_MaterialIdentifier, value, nameof(MaterialIdentifier));
        }
        private string m_MaterialIdentifier;

        /// <summary>
        /// Gets or sets the Weight
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> Weight { get; set; }

        /// <summary>
        /// Gets or sets the X
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> X { get; set; }

        /// <summary>
        /// Gets or sets the Y
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> Y { get; set; }

        /// <summary>
        /// Gets or sets the Z
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> Z { get; set; }


        #endregion
    }
    #endregion


    #region AssemblyModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.8
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AssemblyType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class AssemblyModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyModel" /> class.
        /// </summary>
        public AssemblyModel() : this((AssemblyModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public AssemblyModel(AssemblyModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region FoilModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FoilType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class FoilModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FoilModel" /> class.
        /// </summary>
        public FoilModel() : this((FoilModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoilModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public FoilModel(FoilModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Z = new AnalogUnitModel<double>();
            }
            else
            {
                Z = new AnalogUnitModel<double>(template.Z);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Z
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new AnalogUnitModel<double> Z
        {
            get {return (AnalogUnitModel<double>) base.Z;}
            set {base.Z = value;}
        }


        #endregion
    }
    #endregion


    #region GasMixModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GasMixType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GasMixModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GasMixModel" /> class.
        /// </summary>
        public GasMixModel() : this((GasMixModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GasMixModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public GasMixModel(GasMixModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Gas_1 != null)
                {
                    Gas_1 = new BaseMaterialModel(template.Gas_1);
                }
                if (template.Gas_2 != null)
                {
                    Gas_2 = new BaseMaterialModel(template.Gas_2);
                }
                if (template.GasFilling != null)
                {
                    GasFilling = new AnalogUnitModel(template.GasFilling);
                }
                if (template.MixingRatio != null)
                {
                    MixingRatio = new AnalogUnitModel(template.MixingRatio);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Gas_1
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public BaseMaterialModel Gas_1 { get; set; }

        /// <summary>
        /// Gets or sets the Gas_2
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public BaseMaterialModel Gas_2 { get; set; }

        /// <summary>
        /// Gets or sets the GasFilling
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel GasFilling { get; set; }

        /// <summary>
        /// Gets or sets the MixingRatio
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel MixingRatio { get; set; }


        #endregion
    }
    #endregion


    #region GlassModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GlassModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassModel" /> class.
        /// </summary>
        public GlassModel() : this((GlassModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public GlassModel(GlassModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                X = new AnalogUnitModel<double>();
                Y = new AnalogUnitModel<double>();
            }
            else
            {
                if (template.Absorption != null)
                {
                    Absorption = new AnalogUnitModel(template.Absorption);
                }
                CoatingClass = template.CoatingClass;
                if (template.CoatingEmessivity != null)
                {
                    CoatingEmessivity = new AnalogUnitModel(template.CoatingEmessivity);
                }
                if (template.CoatingSubClass != null)
                {
                    CoatingSubClass = template.CoatingSubClass.Clone() as string;
                }
                if (template.ElectricalConductivity != null)
                {
                    ElectricalConductivity = new AnalogUnitModel(template.ElectricalConductivity);
                }
                Orientation = template.Orientation;
                if (template.Reflection != null)
                {
                    Reflection = new AnalogUnitModel(template.Reflection);
                }
                SignificantSide = template.SignificantSide;
                StructureAlignment = template.StructureAlignment;
                StructureClass = template.StructureClass == null ? null : template.StructureClass.Clone() as string;
                if (template.Transmission != null)
                {
                    Transmission = new AnalogUnitModel(template.Transmission);
                }
                X = new AnalogUnitModel<double>(template.X);
                Y = new AnalogUnitModel<double>(template.Y);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Absorption
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel Absorption { get; set; }

        /// <summary>
        /// Gets or sets the CoatingClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public CoatingClassEnumeration CoatingClass
        {
            get => m_CoatingClass;
            set => SetField(ref m_CoatingClass, value, nameof(CoatingClass));
        }
        private CoatingClassEnumeration m_CoatingClass;

        /// <summary>
        /// Gets or sets the CoatingEmessivity
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel CoatingEmessivity { get; set; }

        /// <summary>
        /// Gets or sets the CoatingSubClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string CoatingSubClass
        {
            get => m_CoatingSubClass;
            set => SetField(ref m_CoatingSubClass, value, nameof(CoatingSubClass));
        }
        private string m_CoatingSubClass;

        /// <summary>
        /// Gets or sets the ElectricalConductivity
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel ElectricalConductivity { get; set; }

        /// <summary>
        /// Gets or sets the Orientation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public object Orientation
        {
            get => m_Orientation;
            set => SetField(ref m_Orientation, value, nameof(Orientation));
        }
        private object m_Orientation;

        /// <summary>
        /// Gets or sets the Reflection
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel Reflection { get; set; }

        /// <summary>
        /// Gets or sets the SignificantSide
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public SignificantSideEnumeration SignificantSide
        {
            get => m_SignificantSide;
            set => SetField(ref m_SignificantSide, value, nameof(SignificantSide));
        }
        private SignificantSideEnumeration m_SignificantSide;

        /// <summary>
        /// Gets or sets the StructureAlignment
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public StructureAlignmentEnumeration StructureAlignment
        {
            get => m_StructureAlignment;
            set => SetField(ref m_StructureAlignment, value, nameof(StructureAlignment));
        }
        private StructureAlignmentEnumeration m_StructureAlignment;

        /// <summary>
        /// Gets or sets the StructureClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string StructureClass
        {
            get => m_StructureClass;
            set => SetField(ref m_StructureClass, value, nameof(StructureClass));
        }
        private string m_StructureClass;

        /// <summary>
        /// Gets or sets the Transmission
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel Transmission { get; set; }

        /// <summary>
        /// Gets or sets the X
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new AnalogUnitModel<double> X
        {
            get {return (AnalogUnitModel<double>) base.X;}
            set {base.X = value;}
        }

        /// <summary>
        /// Gets or sets the Y
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new AnalogUnitModel<double> Y
        {
            get {return (AnalogUnitModel<double>) base.Y;}
            set {base.Y = value;}
        }


        #endregion
    }
    #endregion


    #region PackagingModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PackagingType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class PackagingModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PackagingModel" /> class.
        /// </summary>
        public PackagingModel() : this((PackagingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackagingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public PackagingModel(PackagingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                CornerProtection = template.CornerProtection == null ? null : template.CornerProtection.Clone() as string;
                PerimeterProtection = template.PerimeterProtection == null ? null : template.PerimeterProtection.Clone() as string;
                Spacer = template.Spacer == null ? null : template.Spacer.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CornerProtection
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string CornerProtection
        {
            get => m_CornerProtection;
            set => SetField(ref m_CornerProtection, value, nameof(CornerProtection));
        }
        private string m_CornerProtection;

        /// <summary>
        /// Gets or sets the PerimeterProtection
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string PerimeterProtection
        {
            get => m_PerimeterProtection;
            set => SetField(ref m_PerimeterProtection, value, nameof(PerimeterProtection));
        }
        private string m_PerimeterProtection;

        /// <summary>
        /// Gets or sets the Spacer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Spacer
        {
            get => m_Spacer;
            set => SetField(ref m_Spacer, value, nameof(Spacer));
        }
        private string m_Spacer;


        #endregion
    }
    #endregion


    #region SealingMaterialModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.7
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SealingMaterialType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class SealingMaterialModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SealingMaterialModel" /> class.
        /// </summary>
        public SealingMaterialModel() : this((SealingMaterialModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SealingMaterialModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SealingMaterialModel(SealingMaterialModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                MixingRatio = new AnalogUnitModel<double>();
            }
            else
            {
                if (template.AddOnMaterial != null)
                {
                    AddOnMaterial = template.AddOnMaterial.Clone() as string;
                }
                if (template.Hardener != null)
                {
                    Hardener = new BaseMaterialModel(template.Hardener);
                }
                MixingRatio = new AnalogUnitModel<double>(template.MixingRatio);
                if (template.Resin != null)
                {
                    Resin = new BaseMaterialModel(template.Resin);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AddOnMaterial
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string AddOnMaterial
        {
            get => m_AddOnMaterial;
            set => SetField(ref m_AddOnMaterial, value, nameof(AddOnMaterial));
        }
        private string m_AddOnMaterial;

        /// <summary>
        /// Gets or sets the Hardener
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public BaseMaterialModel Hardener { get; set; }

        /// <summary>
        /// Gets or sets the MixingRatio
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> MixingRatio { get; set; }

        /// <summary>
        /// Gets or sets the Resin
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public BaseMaterialModel Resin { get; set; }


        #endregion
    }
    #endregion


    #region SpacerModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.3.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SpacerType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class SpacerModel : BaseMaterialModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SpacerModel" /> class.
        /// </summary>
        public SpacerModel() : this((SpacerModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacerModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SpacerModel(SpacerModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Filling != null)
                {
                    Filling = new BaseDataVariableModel<string>(template.Filling);
                }
                if (template.SealantDepth != null)
                {
                    SealantDepth = new AnalogUnitModel<double>(template.SealantDepth);
                }
                SpacerMaterialClass = template.SpacerMaterialClass;
                if (template.SpacerMaterialSubClass != null)
                {
                    SpacerMaterialSubClass = template.SpacerMaterialSubClass.Clone() as string;
                }
            }
        }
        #endregion

        #region Nested Classes
        /// <summary>
        /// Helper class for SpacerModel.Filling
        /// </summary>
        public partial class Filling_BaseDataVariableModel : BaseDataVariableModel
        {
            /// <remarks/>
            public Filling_BaseDataVariableModel(Filling_BaseDataVariableModel template = null, DummyArgument dummy = null): base(template)
            {
                if (template == null)
                {
                    FillLevel = new AnalogUnitModel<double>();
                }
                else
                {
                    FillLevel = new AnalogUnitModel<double>(template.FillLevel);
                }
            }
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
            public AnalogUnitModel<double> FillLevel { get; set; }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Filling
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public BaseDataVariableModel<string> Filling { get; set; }

        /// <summary>
        /// Gets or sets the SealantDepth
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public AnalogUnitModel<double> SealantDepth { get; set; }

        /// <summary>
        /// Gets or sets the SpacerMaterialClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public SpacerMaterialClass SpacerMaterialClass
        {
            get => m_SpacerMaterialClass;
            set => SetField(ref m_SpacerMaterialClass, value, nameof(SpacerMaterialClass));
        }
        private SpacerMaterialClass m_SpacerMaterialClass;

        /// <summary>
        /// Gets or sets the SpacerMaterialSubClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string SpacerMaterialSubClass
        {
            get => m_SpacerMaterialSubClass;
            set => SetField(ref m_SpacerMaterialSubClass, value, nameof(SpacerMaterialSubClass));
        }
        private string m_SpacerMaterialSubClass;


        #endregion
    }
    #endregion


    #region ConfigurationRulesModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.1.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ConfigurationRulesType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ConfigurationRulesModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRulesModel" /> class.
        /// </summary>
        public ConfigurationRulesModel() : this((ConfigurationRulesModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRulesModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ConfigurationRulesModel(ConfigurationRulesModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.AllowedEngineeringUnits != null)
                {
                    AllowedEngineeringUnits = template.AllowedEngineeringUnits.Clone() as EUInformation[];
                }
                if (template.AllowedFileFormats != null)
                {
                    AllowedFileFormats = template.AllowedFileFormats.Clone() as FileFormatType[];
                }
                MachineProcessingCoordinateSystem = template.MachineProcessingCoordinateSystem;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AllowedEngineeringUnits
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public EUInformation[] AllowedEngineeringUnits
        {
            get => m_AllowedEngineeringUnits;
            set => SetField(ref m_AllowedEngineeringUnits, value, nameof(AllowedEngineeringUnits));
        }
        private EUInformation[] m_AllowedEngineeringUnits;

        /// <summary>
        /// Gets or sets the AllowedFileFormats
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public FileFormatType[] AllowedFileFormats
        {
            get => m_AllowedFileFormats;
            set => SetField(ref m_AllowedFileFormats, value, nameof(AllowedFileFormats));
        }
        private FileFormatType[] m_AllowedFileFormats;

        /// <summary>
        /// Gets or sets the MachineProcessingCoordinateSystem
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public CoordinateSystemEnumeration MachineProcessingCoordinateSystem
        {
            get => m_MachineProcessingCoordinateSystem;
            set => SetField(ref m_MachineProcessingCoordinateSystem, value, nameof(MachineProcessingCoordinateSystem));
        }
        private CoordinateSystemEnumeration m_MachineProcessingCoordinateSystem;


        #endregion
    }
    #endregion


    #region GlassMachineIdentificationModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.1.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassMachineIdentificationType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GlassMachineIdentificationModel : MachineIdentificationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMachineIdentificationModel" /> class.
        /// </summary>
        public GlassMachineIdentificationModel() : this((GlassMachineIdentificationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMachineIdentificationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public GlassMachineIdentificationModel(GlassMachineIdentificationModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.LoggedInProfiles != null)
                {
                    LoggedInProfiles = template.LoggedInProfiles.Clone() as UserProfileType[];
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the LoggedInProfiles
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public UserProfileType[] LoggedInProfiles
        {
            get => m_LoggedInProfiles;
            set => SetField(ref m_LoggedInProfiles, value, nameof(LoggedInProfiles));
        }
        private UserProfileType[] m_LoggedInProfiles;


        #endregion
    }
    #endregion


    #region ManualFolderModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.1.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ManualFolderType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ManualFolderModel : FolderModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualFolderModel" /> class.
        /// </summary>
        public ManualFolderModel() : this((ManualFolderModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualFolderModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ManualFolderModel(ManualFolderModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.ExternalManuals != null)
                {
                    ExternalManuals = template.ExternalManuals.Clone() as string[];
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ExternalManuals
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string[] ExternalManuals
        {
            get => m_ExternalManuals;
            set => SetField(ref m_ExternalManuals, value, nameof(ExternalManuals));
        }
        private string[] m_ExternalManuals;


        #endregion
    }
    #endregion


    #region GlassMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.1.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassMachineType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GlassMachineModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMachineModel" /> class.
        /// </summary>
        public GlassMachineModel() : this((GlassMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public GlassMachineModel(GlassMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                ConfigurationRules = new ConfigurationRulesModel();
                Identification = new GlassMachineIdentificationModel();
                Production = new ProductionModel();
            }
            else
            {
                if (template.Components != null)
                {
                    Components = new MachineComponentsModel(template.Components);
                }
                ConfigurationRules = new ConfigurationRulesModel(template.ConfigurationRules);
                Identification = new GlassMachineIdentificationModel(template.Identification);
                if (template.MaintenanceManuals != null)
                {
                    MaintenanceManuals = new ManualFolderModel(template.MaintenanceManuals);
                }
                if (template.OperationManuals != null)
                {
                    OperationManuals = new ManualFolderModel(template.OperationManuals);
                }
                Production = new ProductionModel(template.Production);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Components
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Machinery)]
        public MachineComponentsModel Components { get; set; }

        /// <summary>
        /// Gets or sets the ConfigurationRules
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ConfigurationRulesModel ConfigurationRules { get; set; }

        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public GlassMachineIdentificationModel Identification { get; set; }

        /// <summary>
        /// Gets or sets the MaintenanceManuals
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ManualFolderModel MaintenanceManuals { get; set; }

        /// <summary>
        /// Gets or sets the OperationManuals
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ManualFolderModel OperationManuals { get; set; }

        /// <summary>
        /// Gets or sets the Production
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ProductionModel Production { get; set; }


        #endregion
    }
    #endregion


    #region InstructionModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.InstructionType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class InstructionModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="InstructionModel" /> class.
        /// </summary>
        public InstructionModel() : this((InstructionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstructionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public InstructionModel(InstructionModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Plan = new FileModel();
            }
            else
            {
                Plan = new FileModel(template.Plan);
                PlanFileFormat = template.PlanFileFormat == null ? null : template.PlanFileFormat.Clone() as FileFormatType;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Plan
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public FileModel Plan { get; set; }

        /// <summary>
        /// Gets or sets the PlanFileFormat
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public FileFormatType PlanFileFormat
        {
            get => m_PlanFileFormat;
            set => SetField(ref m_PlanFileFormat, value, nameof(PlanFileFormat));
        }
        private FileFormatType m_PlanFileFormat;


        #endregion
    }
    #endregion


    #region ProductionPlanModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProductionPlanType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProductionPlanModel : OrderedListModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionPlanModel" /> class.
        /// </summary>
        public ProductionPlanModel() : this((ProductionPlanModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionPlanModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProductionPlanModel(ProductionPlanModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ProductionJobModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProductionJobType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProductionJobModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionJobModel" /> class.
        /// </summary>
        public ProductionJobModel() : this((ProductionJobModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionJobModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProductionJobModel(ProductionJobModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                InputMaterials = new FolderModel();
                Instruction = new InstructionModel();
                OutputMaterials = new FolderModel();
                State = new ProductionStateMachineModel();
            }
            else
            {
                EndTime = template.EndTime;
                Identifier = template.Identifier == null ? null : template.Identifier.Clone() as string;
                InputMaterials = new FolderModel(template.InputMaterials);
                Instruction = new InstructionModel(template.Instruction);
                if (template.JobGroup != null)
                {
                    JobGroup = template.JobGroup.Clone() as string;
                }
                if (template.Lock != null)
                {
                    Lock = new LockingServicesModel(template.Lock);
                }
                if (template.Name != null)
                {
                    Name = template.Name.Clone() as string;
                }
                NumberInList = template.NumberInList;
                OutputMaterials = new FolderModel(template.OutputMaterials);
                StartTime = template.StartTime;
                State = new ProductionStateMachineModel(template.State);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the EndTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public DateTime EndTime
        {
            get => m_EndTime;
            set => SetField(ref m_EndTime, value, nameof(EndTime));
        }
        private DateTime m_EndTime;

        /// <summary>
        /// Gets or sets the Identifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Identifier
        {
            get => m_Identifier;
            set => SetField(ref m_Identifier, value, nameof(Identifier));
        }
        private string m_Identifier;

        /// <summary>
        /// Gets or sets the InputMaterials
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public FolderModel InputMaterials { get; set; }

        /// <summary>
        /// Gets or sets the Instruction
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public InstructionModel Instruction { get; set; }

        /// <summary>
        /// Gets or sets the JobGroup
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string JobGroup
        {
            get => m_JobGroup;
            set => SetField(ref m_JobGroup, value, nameof(JobGroup));
        }
        private string m_JobGroup;

        /// <summary>
        /// Gets or sets the Lock
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public LockingServicesModel Lock { get; set; }

        /// <summary>
        /// Gets or sets the Name
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Name
        {
            get => m_Name;
            set => SetField(ref m_Name, value, nameof(Name));
        }
        private string m_Name;

        /// <summary>
        /// Gets or sets the NumberInList
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public ushort NumberInList
        {
            get => m_NumberInList;
            set => SetField(ref m_NumberInList, value, nameof(NumberInList));
        }
        private ushort m_NumberInList;

        /// <summary>
        /// Gets or sets the OutputMaterials
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public FolderModel OutputMaterials { get; set; }

        /// <summary>
        /// Gets or sets the StartTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public DateTime StartTime
        {
            get => m_StartTime;
            set => SetField(ref m_StartTime, value, nameof(StartTime));
        }
        private DateTime m_StartTime;

        /// <summary>
        /// Gets or sets the State
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ProductionStateMachineModel State { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IProductionJobMethods implemention = ProductionJobMethods;

            if (implemention == null)
            {
                implemention = this as IProductionJobMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionJobType_AbortJob)
            {
                StatusCode ret = implemention.AbortJob(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionJobType_QueueJob)
            {
                StatusCode ret = implemention.QueueJob(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionJobType_ReleaseJob)
            {
                StatusCode ret = implemention.ReleaseJob(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionJobType_SuspendJob)
            {
                StatusCode ret = implemention.SuspendJob(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the ProductionJob methods.
        /// </summary>
        /// <value>
        /// The ProductionJob methods.
        /// </value>
        public IProductionJobMethods ProductionJobMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ProductionJobModel object.
    /// </summary>
    public interface IProductionJobMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode AbortJob(
            RequestContext context,
            ProductionJobModel model
            );

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.4/#7.2.4.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode QueueJob(
            RequestContext context,
            ProductionJobModel model
            );

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.4/#7.2.4.2
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode ReleaseJob(
            RequestContext context,
            ProductionJobModel model
            );

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.4/#7.2.4.3
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode SuspendJob(
            RequestContext context,
            ProductionJobModel model
            );


    }
    #endregion


    #region AssemblyJobModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.7
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.AssemblyJobType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class AssemblyJobModel : ProductionJobModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyJobModel" /> class.
        /// </summary>
        public AssemblyJobModel() : this((AssemblyJobModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssemblyJobModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public AssemblyJobModel(AssemblyJobModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region CuttingJobModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.8
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CuttingJobType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class CuttingJobModel : ProductionJobModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CuttingJobModel" /> class.
        /// </summary>
        public CuttingJobModel() : this((CuttingJobModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CuttingJobModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public CuttingJobModel(CuttingJobModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ProcessingJobModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.9
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProcessingJobType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProcessingJobModel : ProductionJobModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingJobModel" /> class.
        /// </summary>
        public ProcessingJobModel() : this((ProcessingJobModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingJobModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProcessingJobModel(ProcessingJobModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ProductionModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProductionType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProductionModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionModel" /> class.
        /// </summary>
        public ProductionModel() : this((ProductionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProductionModel(ProductionModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                ProductionPlan = new ProductionPlanModel();
            }
            else
            {
                if (template.CurrentCountOfJobs != null)
                {
                    CurrentCountOfJobs = template.CurrentCountOfJobs;
                }
                JobListIsRecommendation = template.JobListIsRecommendation;
                if (template.MaxCountOfJobs != null)
                {
                    MaxCountOfJobs = template.MaxCountOfJobs;
                }
                ProductionPlan = new ProductionPlanModel(template.ProductionPlan);
                if (template.SupportedMaterialTypes != null)
                {
                    SupportedMaterialTypes = template.SupportedMaterialTypes.Clone() as NodeId[];
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentCountOfJobs
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public uint? CurrentCountOfJobs
        {
            get => m_CurrentCountOfJobs;
            set => SetField(ref m_CurrentCountOfJobs, value, nameof(CurrentCountOfJobs));
        }
        private uint? m_CurrentCountOfJobs;

        /// <summary>
        /// Gets or sets the JobListIsRecommendation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public bool JobListIsRecommendation
        {
            get => m_JobListIsRecommendation;
            set => SetField(ref m_JobListIsRecommendation, value, nameof(JobListIsRecommendation));
        }
        private bool m_JobListIsRecommendation;

        /// <summary>
        /// Gets or sets the MaxCountOfJobs
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public uint? MaxCountOfJobs
        {
            get => m_MaxCountOfJobs;
            set => SetField(ref m_MaxCountOfJobs, value, nameof(MaxCountOfJobs));
        }
        private uint? m_MaxCountOfJobs;

        /// <summary>
        /// Gets or sets the ProductionPlan
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public ProductionPlanModel ProductionPlan { get; set; }

        /// <summary>
        /// Gets or sets the SupportedMaterialTypes
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public NodeId[] SupportedMaterialTypes
        {
            get => m_SupportedMaterialTypes;
            set => SetField(ref m_SupportedMaterialTypes, value, nameof(SupportedMaterialTypes));
        }
        private NodeId[] m_SupportedMaterialTypes;


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IProductionMethods implemention = ProductionMethods;

            if (implemention == null)
            {
                implemention = this as IProductionMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionType_ChangePositionInList)
            {
                StatusCode ret = implemention.ChangePositionInList(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), inputArguments[2].ToBoolean());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionType_DeleteJob)
            {
                StatusCode ret = implemention.DeleteJob(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.Glass.MethodIds.ProductionType_InsertJob)
            {
                NodeId JobNodeId;
                StatusCode ret = implemention.InsertJob(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), inputArguments[2].ToNodeIdArray(), inputArguments[3].ToNodeIdArray(), out JobNodeId);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(JobNodeId);
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the Production methods.
        /// </summary>
        /// <value>
        /// The Production methods.
        /// </value>
        public IProductionMethods ProductionMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ProductionModel object.
    /// </summary>
    public interface IProductionMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.2
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Target"></param>
        /// <param name="Source"></param>
        /// <param name="Before"></param>
        /// <returns></returns>
        StatusCode ChangePositionInList(
            RequestContext context,
            ProductionModel model,
            string Target,
            string Source,
            bool Before
            );

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.3
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Identifier"></param>
        /// <returns></returns>
        StatusCode DeleteJob(
            RequestContext context,
            ProductionModel model,
            string Identifier
            );

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Identifier"></param>
        /// <param name="Name"></param>
        /// <param name="InputMaterial"></param>
        /// <param name="OutputMaterial"></param>
        /// <param name="JobNodeId">out: </param>
        /// <returns></returns>
        StatusCode InsertJob(
            RequestContext context,
            ProductionModel model,
            string Identifier,
            string Name,
            NodeId[] InputMaterial,
            NodeId[] OutputMaterial,
            out NodeId JobNodeId
            );


    }
    #endregion


    #region InitializingSubStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.InitializingSubStateMachineType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class InitializingSubStateMachineModel : FiniteStateMachineModel, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="InitializingSubStateMachineModel" /> class.
        /// </summary>
        public InitializingSubStateMachineModel() : this((InitializingSubStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InitializingSubStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public InitializingSubStateMachineModel(InitializingSubStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The Idle state.
            /// </summary>
            Idle = 0,
            /// <summary>
            /// The Queued state.
            /// </summary>
            Queued = 1,
            /// <summary>
            /// The Released state.
            /// </summary>
            Released = 2,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.Idle"/> to <see cref="State.Queued"/>.
            /// </summary>
            IdleToQueued = 0,
            /// <summary>
            /// Transition from <see cref="State.Queued"/> to <see cref="State.Idle"/>.
            /// </summary>
            QueuedToIdle = 2,
            /// <summary>
            /// Transition from <see cref="State.Queued"/> to <see cref="State.Released"/>.
            /// </summary>
            QueuedToReleased = 1,
            /// <summary>
            /// Transition from <see cref="State.Released"/> to <see cref="State.Queued"/>.
            /// </summary>
            ReleasedToQueued = 3,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.Idle:
                    if (newState is State.Queued)
                    {
                        yield return Transition.IdleToQueued;
                    }
                    break;
                case State.Queued:
                    if (newState is State.Idle)
                    {
                        yield return Transition.QueuedToIdle;
                    }
                    if (newState is State.Released)
                    {
                        yield return Transition.QueuedToReleased;
                    }
                    break;
                case State.Released:
                    if (newState is State.Queued)
                    {
                        yield return Transition.ReleasedToQueued;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.Idle, new AbsoluteName(BrowseNames.Idle, Namespaces.Glass) },
            { State.Queued, new AbsoluteName(BrowseNames.Queued, Namespaces.Glass) },
            { State.Released, new AbsoluteName(BrowseNames.Released, Namespaces.Glass) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.Idle, ObjectIds.InitializingSubStateMachineType_Idle },
            { State.Queued, ObjectIds.InitializingSubStateMachineType_Queued },
            { State.Released, ObjectIds.InitializingSubStateMachineType_Released },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.IdleToQueued, new AbsoluteName(BrowseNames.IdleToQueued, Namespaces.Glass) },
            { Transition.QueuedToIdle, new AbsoluteName(BrowseNames.QueuedToIdle, Namespaces.Glass) },
            { Transition.QueuedToReleased, new AbsoluteName(BrowseNames.QueuedToReleased, Namespaces.Glass) },
            { Transition.ReleasedToQueued, new AbsoluteName(BrowseNames.ReleasedToQueued, Namespaces.Glass) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.IdleToQueued, ObjectIds.InitializingSubStateMachineType_IdleToQueued },
            { Transition.QueuedToIdle, ObjectIds.InitializingSubStateMachineType_QueuedToIdle },
            { Transition.QueuedToReleased, ObjectIds.InitializingSubStateMachineType_QueuedToReleased },
            { Transition.ReleasedToQueued, ObjectIds.InitializingSubStateMachineType_ReleasedToQueued },
        };
        #endregion

    }
    #endregion


    #region ProductionStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProductionStateMachineType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProductionStateMachineModel : FiniteStateMachineModel, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionStateMachineModel" /> class.
        /// </summary>
        public ProductionStateMachineModel() : this((ProductionStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProductionStateMachineModel(ProductionStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                InitializingState = new InitializingSubStateMachineModel();
            }
            else
            {
                InitializingState = new InitializingSubStateMachineModel(template.InitializingState);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the InitializingState
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public InitializingSubStateMachineModel InitializingState { get; set; }


        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The Initializing state.
            /// </summary>
            Initializing = 0,
            /// <summary>
            /// The Aborted state.
            /// </summary>
            Aborted = 4,
            /// <summary>
            /// The Ended state.
            /// </summary>
            Ended = 2,
            /// <summary>
            /// The Interrupted state.
            /// </summary>
            Interrupted = 3,
            /// <summary>
            /// The Running state.
            /// </summary>
            Running = 1,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.Aborted"/> to <see cref="State.Initializing"/>.
            /// </summary>
            AbortedToInitializing = 8,
            /// <summary>
            /// Transition from <see cref="State.Ended"/> to <see cref="State.Initializing"/>.
            /// </summary>
            EndedToInitializing = 2,
            /// <summary>
            /// Transition from <see cref="State.Initializing"/> to <see cref="State.Aborted"/>.
            /// </summary>
            InitializingToAborted = 9,
            /// <summary>
            /// Transition from <see cref="State.Initializing"/> to <see cref="State.Running"/>.
            /// </summary>
            InitializingToRunning = 0,
            /// <summary>
            /// Transition from <see cref="State.Interrupted"/> to <see cref="State.Aborted"/>.
            /// </summary>
            InterruptedToAborted = 7,
            /// <summary>
            /// Transition from <see cref="State.Interrupted"/> to <see cref="State.Running"/>.
            /// </summary>
            InterruptedToRunning = 5,
            /// <summary>
            /// Transition from <see cref="State.Running"/> to <see cref="State.Aborted"/>.
            /// </summary>
            RunningToAborted = 6,
            /// <summary>
            /// Transition from <see cref="State.Running"/> to <see cref="State.Ended"/>.
            /// </summary>
            RunningToEnded = 1,
            /// <summary>
            /// Transition from <see cref="State.Running"/> to <see cref="State.Interrupted"/>.
            /// </summary>
            RunningToInterrupted = 4,
            /// <summary>
            /// Transition from <see cref="State.Running"/> to <see cref="State.Running"/>.
            /// </summary>
            RunningToRunning = 3,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState == State.Initializing)
            {
                InitializingState.SwitchToState(null);
            }

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.Initializing:
                    if (newState is State.Aborted)
                    {
                        yield return Transition.InitializingToAborted;
                    }
                    if (newState is State.Running)
                    {
                        yield return Transition.InitializingToRunning;
                    }
                    break;
                case State.Aborted:
                    if (newState is State.Initializing)
                    {
                        yield return Transition.AbortedToInitializing;
                    }
                    break;
                case State.Ended:
                    if (newState is State.Initializing)
                    {
                        yield return Transition.EndedToInitializing;
                    }
                    break;
                case State.Interrupted:
                    if (newState is State.Aborted)
                    {
                        yield return Transition.InterruptedToAborted;
                    }
                    if (newState is State.Running)
                    {
                        yield return Transition.InterruptedToRunning;
                    }
                    break;
                case State.Running:
                    if (newState is State.Aborted)
                    {
                        yield return Transition.RunningToAborted;
                    }
                    if (newState is State.Ended)
                    {
                        yield return Transition.RunningToEnded;
                    }
                    if (newState is State.Interrupted)
                    {
                        yield return Transition.RunningToInterrupted;
                    }
                    if (newState is State.Running)
                    {
                        yield return Transition.RunningToRunning;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.Initializing, new AbsoluteName(BrowseNames.Initializing, Namespaces.Glass) },
            { State.Aborted, new AbsoluteName(BrowseNames.Aborted, Namespaces.Glass) },
            { State.Ended, new AbsoluteName(BrowseNames.Ended, Namespaces.Glass) },
            { State.Interrupted, new AbsoluteName(BrowseNames.Interrupted, Namespaces.Glass) },
            { State.Running, new AbsoluteName(BrowseNames.Running, Namespaces.Glass) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.Initializing, ObjectIds.ProductionStateMachineType_Initializing },
            { State.Aborted, ObjectIds.ProductionStateMachineType_Aborted },
            { State.Ended, ObjectIds.ProductionStateMachineType_Ended },
            { State.Interrupted, ObjectIds.ProductionStateMachineType_Interrupted },
            { State.Running, ObjectIds.ProductionStateMachineType_Running },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.AbortedToInitializing, new AbsoluteName(BrowseNames.AbortedToInitializing, Namespaces.Glass) },
            { Transition.EndedToInitializing, new AbsoluteName(BrowseNames.EndedToInitializing, Namespaces.Glass) },
            { Transition.InitializingToAborted, new AbsoluteName(BrowseNames.InitializingToAborted, Namespaces.Glass) },
            { Transition.InitializingToRunning, new AbsoluteName(BrowseNames.InitializingToRunning, Namespaces.Glass) },
            { Transition.InterruptedToAborted, new AbsoluteName(BrowseNames.InterruptedToAborted, Namespaces.Glass) },
            { Transition.InterruptedToRunning, new AbsoluteName(BrowseNames.InterruptedToRunning, Namespaces.Glass) },
            { Transition.RunningToAborted, new AbsoluteName(BrowseNames.RunningToAborted, Namespaces.Glass) },
            { Transition.RunningToEnded, new AbsoluteName(BrowseNames.RunningToEnded, Namespaces.Glass) },
            { Transition.RunningToInterrupted, new AbsoluteName(BrowseNames.RunningToInterrupted, Namespaces.Glass) },
            { Transition.RunningToRunning, new AbsoluteName(BrowseNames.RunningToRunning, Namespaces.Glass) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.AbortedToInitializing, ObjectIds.ProductionStateMachineType_AbortedToInitializing },
            { Transition.EndedToInitializing, ObjectIds.ProductionStateMachineType_EndedToInitializing },
            { Transition.InitializingToAborted, ObjectIds.ProductionStateMachineType_InitializingToAborted },
            { Transition.InitializingToRunning, ObjectIds.ProductionStateMachineType_InitializingToRunning },
            { Transition.InterruptedToAborted, ObjectIds.ProductionStateMachineType_InterruptedToAborted },
            { Transition.InterruptedToRunning, ObjectIds.ProductionStateMachineType_InterruptedToRunning },
            { Transition.RunningToAborted, ObjectIds.ProductionStateMachineType_RunningToAborted },
            { Transition.RunningToEnded, ObjectIds.ProductionStateMachineType_RunningToEnded },
            { Transition.RunningToInterrupted, ObjectIds.ProductionStateMachineType_RunningToInterrupted },
            { Transition.RunningToRunning, ObjectIds.ProductionStateMachineType_RunningToRunning },
        };
        #endregion

    }
    #endregion


    #region GlassEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GlassEventModel : BaseEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassEventModel" /> class.
        /// </summary>
        public GlassEventModel() : this((GlassEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public GlassEventModel(GlassEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

            if (template == null)
            {
            }
            else
            {
                if (template.Identifier != null)
                {
                    Identifier = template.Identifier.Clone() as string;
                }
                if (template.JobdIdentifier != null)
                {
                    JobdIdentifier = template.JobdIdentifier.Clone() as string;
                }
                if (template.Location != null)
                {
                    Location = template.Location.Clone() as string;
                }
                if (template.MaterialIdentifier != null)
                {
                    MaterialIdentifier = template.MaterialIdentifier.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Identifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Identifier
        {
            get => m_Identifier;
            set => SetField(ref m_Identifier, value, nameof(Identifier));
        }
        private string m_Identifier;

        /// <summary>
        /// Gets or sets the JobdIdentifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string JobdIdentifier
        {
            get => m_JobdIdentifier;
            set => SetField(ref m_JobdIdentifier, value, nameof(JobdIdentifier));
        }
        private string m_JobdIdentifier;

        /// <summary>
        /// Gets or sets the Location
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Location
        {
            get => m_Location;
            set => SetField(ref m_Location, value, nameof(Location));
        }
        private string m_Location;

        /// <summary>
        /// Gets or sets the MaterialIdentifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string MaterialIdentifier
        {
            get => m_MaterialIdentifier;
            set => SetField(ref m_MaterialIdentifier, value, nameof(MaterialIdentifier));
        }
        private string m_MaterialIdentifier;


        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }

            // Identifier
            if (this.Identifier != null)
            {
                if (m_FieldHandles.Identifier == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.Identifier, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.Identifier = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.Identifier))
                {
                    e.Set(m_FieldHandles.Identifier, this.Identifier);
                }
            }

            // JobdIdentifier
            if (this.JobdIdentifier != null)
            {
                if (m_FieldHandles.JobdIdentifier == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.JobdIdentifier, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.JobdIdentifier = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.JobdIdentifier))
                {
                    e.Set(m_FieldHandles.JobdIdentifier, this.JobdIdentifier);
                }
            }

            // Location
            if (this.Location != null)
            {
                if (m_FieldHandles.Location == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.Location, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.Location = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.Location))
                {
                    e.Set(m_FieldHandles.Location, this.Location);
                }
            }

            // MaterialIdentifier
            if (this.MaterialIdentifier != null)
            {
                if (m_FieldHandles.MaterialIdentifier == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.MaterialIdentifier, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.MaterialIdentifier = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.MaterialIdentifier))
                {
                    e.Set(m_FieldHandles.MaterialIdentifier, this.MaterialIdentifier);
                }
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
            public int Identifier;
            public int JobdIdentifier;
            public int Location;
            public int MaterialIdentifier;
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region CommunicationErrorEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CommunicationErrorEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class CommunicationErrorEventModel : GlassEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationErrorEventModel" /> class.
        /// </summary>
        public CommunicationErrorEventModel() : this((CommunicationErrorEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationErrorEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public CommunicationErrorEventModel(CommunicationErrorEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region GlassMaterialEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassMaterialEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class GlassMaterialEventModel : GlassEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMaterialEventModel" /> class.
        /// </summary>
        public GlassMaterialEventModel() : this((GlassMaterialEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassMaterialEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public GlassMaterialEventModel(GlassMaterialEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region MaterialExitEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MaterialExitEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class MaterialExitEventModel : GlassMaterialEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialExitEventModel" /> class.
        /// </summary>
        public MaterialExitEventModel() : this((MaterialExitEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialExitEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MaterialExitEventModel(MaterialExitEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region MaterialMissingEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MaterialMissingEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class MaterialMissingEventModel : GlassMaterialEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialMissingEventModel" /> class.
        /// </summary>
        public MaterialMissingEventModel() : this((MaterialMissingEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialMissingEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MaterialMissingEventModel(MaterialMissingEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region MaterialReceivedEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MaterialReceivedEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class MaterialReceivedEventModel : GlassMaterialEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialReceivedEventModel" /> class.
        /// </summary>
        public MaterialReceivedEventModel() : this((MaterialReceivedEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialReceivedEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MaterialReceivedEventModel(MaterialReceivedEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region IntermediateStepEvent
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.7
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IntermediateStepEvent, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class IntermediateStepEvent : GlassEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IntermediateStepEvent" /> class.
        /// </summary>
        public IntermediateStepEvent() : this((IntermediateStepEvent)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntermediateStepEvent" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public IntermediateStepEvent(IntermediateStepEvent template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

            if (template == null)
            {
            }
            else
            {
                if (template.ProcessStep != null)
                {
                    ProcessStep = template.ProcessStep.Clone() as string;
                }
                if (template.Status != null)
                {
                    Status = template.Status.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ProcessStep
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string ProcessStep
        {
            get => m_ProcessStep;
            set => SetField(ref m_ProcessStep, value, nameof(ProcessStep));
        }
        private string m_ProcessStep;

        /// <summary>
        /// Gets or sets the Status
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string Status
        {
            get => m_Status;
            set => SetField(ref m_Status, value, nameof(Status));
        }
        private string m_Status;


        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }

            // ProcessStep
            if (this.ProcessStep != null)
            {
                if (m_FieldHandles.ProcessStep == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.ProcessStep, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.ProcessStep = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.ProcessStep))
                {
                    e.Set(m_FieldHandles.ProcessStep, this.ProcessStep);
                }
            }

            // Status
            if (this.Status != null)
            {
                if (m_FieldHandles.Status == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.Status, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.Status = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.Status))
                {
                    e.Set(m_FieldHandles.Status, this.Status);
                }
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
            public int ProcessStep;
            public int Status;
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region InterruptedEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.8
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.InterruptedEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class InterruptedEventModel : GlassEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="InterruptedEventModel" /> class.
        /// </summary>
        public InterruptedEventModel() : this((InterruptedEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterruptedEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public InterruptedEventModel(InterruptedEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

            if (template == null)
            {
            }
            else
            {
                if (template.ProcessName != null)
                {
                    ProcessName = template.ProcessName.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ProcessName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public string ProcessName
        {
            get => m_ProcessName;
            set => SetField(ref m_ProcessName, value, nameof(ProcessName));
        }
        private string m_ProcessName;


        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }

            // ProcessName
            if (this.ProcessName != null)
            {
                if (m_FieldHandles.ProcessName == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.ProcessName, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.ProcessName = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.ProcessName))
                {
                    e.Set(m_FieldHandles.ProcessName, this.ProcessName);
                }
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
            public int ProcessName;
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region EmergencyButtonPressedEventModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.EmergencyButtonPressedEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class EmergencyButtonPressedEventModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyButtonPressedEventModel" /> class.
        /// </summary>
        public EmergencyButtonPressedEventModel() : this((EmergencyButtonPressedEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyButtonPressedEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public EmergencyButtonPressedEventModel(EmergencyButtonPressedEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region MotorTemperatureTooHighEventModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MotorTemperatureTooHighEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class MotorTemperatureTooHighEventModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MotorTemperatureTooHighEventModel" /> class.
        /// </summary>
        public MotorTemperatureTooHighEventModel() : this((MotorTemperatureTooHighEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MotorTemperatureTooHighEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MotorTemperatureTooHighEventModel(MotorTemperatureTooHighEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region OpenSecurityFenceModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.OpenSecurityFenceType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class OpenSecurityFenceModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSecurityFenceModel" /> class.
        /// </summary>
        public OpenSecurityFenceModel() : this((OpenSecurityFenceModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSecurityFenceModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public OpenSecurityFenceModel(OpenSecurityFenceModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region OutOfJobEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.9
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.OutOfJobEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class OutOfJobEventModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="OutOfJobEventModel" /> class.
        /// </summary>
        public OutOfJobEventModel() : this((OutOfJobEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutOfJobEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public OutOfJobEventModel(OutOfJobEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region ProcessParameterOutOfRangeModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.10
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProcessParameterOutOfRangeType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ProcessParameterOutOfRangeModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessParameterOutOfRangeModel" /> class.
        /// </summary>
        public ProcessParameterOutOfRangeModel() : this((ProcessParameterOutOfRangeModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessParameterOutOfRangeModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ProcessParameterOutOfRangeModel(ProcessParameterOutOfRangeModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region ToolMissingEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.11
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ToolMissingEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class ToolMissingEventModel : InterruptedEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMissingEventModel" /> class.
        /// </summary>
        public ToolMissingEventModel() : this((ToolMissingEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMissingEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public ToolMissingEventModel(ToolMissingEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region JobMovedEventModel
    /// <summary>
    /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/8.12
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.JobMovedEventType, NamespaceUri=OpcUa.Glass.Namespaces.Glass)]
    public partial class JobMovedEventModel : GlassEventModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="JobMovedEventModel" /> class.
        /// </summary>
        public JobMovedEventModel() : this((JobMovedEventModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobMovedEventModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public JobMovedEventModel(JobMovedEventModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

            if (template == null)
            {
            }
            else
            {
                JobdIdentifier = template.JobdIdentifier == null ? null : template.JobdIdentifier.Clone() as string;
                if (template.NewPosition != null)
                {
                    NewPosition = template.NewPosition;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the JobdIdentifier
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new string JobdIdentifier
        {
            get {return (string)base.JobdIdentifier;}
            set {base.JobdIdentifier = value;}
        }

        /// <summary>
        /// Gets or sets the NewPosition
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public object NewPosition
        {
            get => m_NewPosition;
            set => SetField(ref m_NewPosition, value, nameof(NewPosition));
        }
        private object m_NewPosition;


        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }

            // NewPosition
            if (this.NewPosition != null)
            {
                if (m_FieldHandles.NewPosition == 0)
                {
                    string name = AbsoluteName.ToString(new AbsoluteName(BrowseNames.NewPosition, Namespaces.Glass), e.Manager.NamespaceUris);
                    m_FieldHandles.NewPosition = e.Manager.CreateFieldHandle(name);
                }

                if (e.Manager.IsSubscribed(m_FieldHandles.NewPosition))
                {
                    e.Set(m_FieldHandles.NewPosition, new Variant(this.NewPosition, null));
                }
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
            public int NewPosition;
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion



}
