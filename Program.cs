/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.7, using .NET Server 3.1.0 template (version 0)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://unified-automation.com/MachineDemoServer/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 30.08.2022
**
******************************************************************************/

using OpcUa.Glass;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace UnifiedAutomation.MachineDemoServer
{
    class Program
    {
        public static TestServerManager Server { get; set; }

        //! [Main]
        static void Main(string[] args)
        {
            try
            {
                ApplicationLicenseManager.AddProcessLicenses(System.Reflection.Assembly.GetExecutingAssembly(), "License.lic");

                // Start the server.
                Server = new TestServerManager();

                ApplicationInstanceBase.Default.AutoCreateCertificate = true;

#if NETFRAMEWORK
                ApplicationInstanceBase.Default.SecurityProvider = new WindowsSecurityProvider();
#else
                ApplicationInstanceBase.Default.SecurityProvider = new BouncyCastleSecurityProvider();
#endif
                ApplicationInstanceBase.Default.Start(Server, null, Server);
                foreach (var address in ApplicationInstanceBase.Default.ApplicationSettings.BaseAddresses)
                {
                    Console.WriteLine($"Endpoint URL: {address}");
                }

                //! [Main]
                //! [Create model]
                GlassTemperingMachineModel machine = new GlassTemperingMachineModel();

                //! [Create model]
                //! [Create Synchronization context]
                var synchronizationContext = new SingleThreadSynchronizationContext();
                synchronizationContext.Start();

                //! [Create Synchronization context]
                //! [Bind model]
                NodeId instanceId = ObjectIds.Machines_GlassTemperingMachine.ToNodeId(Server.NamespaceUris);
                Server.RootNodeManager.BindModel(instanceId, machine, CreateInstanceSettingsFor, synchronizationContext);

                //! [Bind model]
                //! [Start simulation]
                var simulation = new HardwareSimulation();
                //! [Start simulation]

                //! [Simulate IO]
                var cts = new CancellationTokenSource();
                var simTask = synchronizationContext.RunAsync(async () =>
                {
                    Dictionary<string, int> outputs;
                    Dictionary<string, int> inputs = simulation.ProcessIO(null);

                    try
                    {
                        Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] Before ProcessIO loop");
                        while (!cts.IsCancellationRequested)
                        {
                            await Task.Delay(TimeSpan.FromMilliseconds(200));
                            outputs = machine.ProcessIO(inputs);

                            await Task.Delay(TimeSpan.FromMilliseconds(200));
                            inputs = simulation.ProcessIO(outputs);
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Exception: {ex}");
                    }
                });
                //! [Simulate IO]

                //! [Run and shutdown]
                // Block until the server exits.
                Console.WriteLine("Press <enter> to exit the program.");
                Console.ReadLine();

                // Stop simulation
                Console.WriteLine("Stop simulation");
                cts.Cancel();
                simTask.Wait();

                // Stop model synchronization context
                synchronizationContext.Stop();

                // Stop the server.
                Console.WriteLine("Stop server");
                Server.Stop();
                //! [Run and shutdown]
            }
            catch (Exception e)
            {
                Console.WriteLine("ERROR: {0}", e.Message);
                Console.WriteLine("Press <enter> to exit the program.");
                Console.ReadLine();
            }
        }

        //! [CreateObjectSettingsFor]
        private static CreateInstanceSettings CreateInstanceSettingsFor(object obj)
        {
            switch (obj)
            {
                case ProcessingJobModel job:
                    return new CreateObjectSettings()
                    {
                        ReferenceTypeId = UaBase.ReferenceTypeIds.HasOrderedComponent,
                        BrowseName = (new AbsoluteName(job.Identifier, Namespaces.MachineDemoServer)).ToQualifiedName(Server.NamespaceUris),
                        OptionalBrowsePaths = new string[]
                        {
                            new QualifiedName(OpcUa.Glass.BrowseNames.Name, (ushort)Server.NamespaceUris.IndexOf(OpcUa.Glass.Namespaces.Glass)).ToString(),
                            new QualifiedName(OpcUa.Glass.BrowseNames.QueueJob, (ushort)Server.NamespaceUris.IndexOf(OpcUa.Glass.Namespaces.Glass)).ToString(),
                            new QualifiedName(OpcUa.Glass.BrowseNames.ReleaseJob, (ushort)Server.NamespaceUris.IndexOf(OpcUa.Glass.Namespaces.Glass)).ToString(),
                        }
                    };

                default:
                    return default;
            }
        }

        
        //! [CreateObjectSettingsFor]
    }
}

