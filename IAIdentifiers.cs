/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/IA/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using UnifiedAutomation.UaBase;

namespace OpcUa.IA
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class DataTypes
    {
        /// <summary>
        /// The identifier for the LevelDisplayMode DataType.
        /// </summary>
        public const uint LevelDisplayMode = 3003;

        /// <summary>
        /// The identifier for the SignalColor DataType.
        /// </summary>
        public const uint SignalColor = 3004;

        /// <summary>
        /// The identifier for the SignalModeLight DataType.
        /// </summary>
        public const uint SignalModeLight = 3005;

        /// <summary>
        /// The identifier for the StacklightOperationMode DataType.
        /// </summary>
        public const uint StacklightOperationMode = 3002;

    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Objects
    {
        /// <summary>
        /// The identifier for the CalibrationTargetCategory Object.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetCategory = 5011;

        /// <summary>
        /// The identifier for the CalibrationTargetFeatures Object.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures = 5013;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint CalibrationTargetType_Identification = 5010;

        /// <summary>
        /// The identifier for the OperationalConditions Object.
        /// </summary>
        public const uint CalibrationTargetType_OperationalConditions = 5012;

        /// <summary>
        /// The identifier for the &lt;OrderedObject&gt; Object.
        /// </summary>
        public const uint BasicStacklightType_OrderedObject_Placeholder = 5006;

        /// <summary>
        /// The identifier for the AcousticSignals Object.
        /// </summary>
        public const uint StackElementAcousticType_AcousticSignals = 5003;

        /// <summary>
        /// The identifier for the StackLevel Object.
        /// </summary>
        public const uint BasicStacklightType_StackLevel = 5001;

        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint StacklightType_DeviceHealthAlarms = 5007;

        /// <summary>
        /// The identifier for the StackRunning Object.
        /// </summary>
        public const uint BasicStacklightType_StackRunning = 5005;

        /// <summary>
        /// The identifier for the &lt;OrderedObject&gt; Object.
        /// </summary>
        public const uint StackElementAcousticType_AcousticSignals_OrderedObject = 5004;

        /// <summary>
        /// The identifier for the &lt;ControlChannel&gt; Object.
        /// </summary>
        public const uint StackElementLightType_ControlChannel = 5002;

        /// <summary>
        /// The identifier for the http://opcfoundation.org/UA/IA/ Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA_ = 5008;

    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the AcousticSignalType ObjectType.
        /// </summary>
        public const uint AcousticSignalType = 1009;

        /// <summary>
        /// The identifier for the BaseCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public const uint BaseCalibrationTargetCategoryType = 1014;

        /// <summary>
        /// The identifier for the DynamicCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public const uint DynamicCalibrationTargetCategoryType = 1018;

        /// <summary>
        /// The identifier for the OneTimeCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public const uint OneTimeCalibrationTargetCategoryType = 1017;

        /// <summary>
        /// The identifier for the ReusableCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public const uint ReusableCalibrationTargetCategoryType = 1015;

        /// <summary>
        /// The identifier for the ReusableDeviceCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public const uint ReusableDeviceCalibrationTargetCategoryType = 1016;

        /// <summary>
        /// The identifier for the IStatisticsType ObjectType.
        /// </summary>
        public const uint IStatisticsType = 1011;

        /// <summary>
        /// The identifier for the IAggregateStatisticsType ObjectType.
        /// </summary>
        public const uint IAggregateStatisticsType = 1012;

        /// <summary>
        /// The identifier for the IRollingStatisticsType ObjectType.
        /// </summary>
        public const uint IRollingStatisticsType = 1013;

        /// <summary>
        /// The identifier for the CalibrationTargetType ObjectType.
        /// </summary>
        public const uint CalibrationTargetType = 1019;

        /// <summary>
        /// The identifier for the ControlChannelType ObjectType.
        /// </summary>
        public const uint ControlChannelType = 1008;

        /// <summary>
        /// The identifier for the BasicStacklightType ObjectType.
        /// </summary>
        public const uint BasicStacklightType = 1002;

        /// <summary>
        /// The identifier for the StacklightType ObjectType.
        /// </summary>
        public const uint StacklightType = 1010;

        /// <summary>
        /// The identifier for the StackElementType ObjectType.
        /// </summary>
        public const uint StackElementType = 1005;

        /// <summary>
        /// The identifier for the StackElementAcousticType ObjectType.
        /// </summary>
        public const uint StackElementAcousticType = 1007;

        /// <summary>
        /// The identifier for the StackElementLightType ObjectType.
        /// </summary>
        public const uint StackElementLightType = 1006;

        /// <summary>
        /// The identifier for the StackLevelType ObjectType.
        /// </summary>
        public const uint StackLevelType = 1003;

        /// <summary>
        /// The identifier for the StackRunningType ObjectType.
        /// </summary>
        public const uint StackRunningType = 1004;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the ResetStatistics Method.
        /// </summary>
        public const uint IStatisticsType_ResetStatistics = 7001;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ReferenceTypes
    {
        /// <summary>
        /// The identifier for the HasStatisticComponent ReferenceType.
        /// </summary>
        public const uint HasStatisticComponent = 4002;

        /// <summary>
        /// The identifier for the HasReferenceMeasurementInstrument ReferenceType.
        /// </summary>
        public const uint HasReferenceMeasurementInstrument = 4003;

    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the EnumValues Variable.
        /// </summary>
        public const uint LevelDisplayMode_EnumValues = 6001;

        /// <summary>
        /// The identifier for the EnumValues Variable.
        /// </summary>
        public const uint SignalColor_EnumValues = 6007;

        /// <summary>
        /// The identifier for the EnumValues Variable.
        /// </summary>
        public const uint SignalModeLight_EnumValues = 6008;

        /// <summary>
        /// The identifier for the EnumValues Variable.
        /// </summary>
        public const uint StacklightOperationMode_EnumValues = 6006;

        /// <summary>
        /// The identifier for the TypeDictionary Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema = 6002;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema_NamespaceUri = 6003;

        /// <summary>
        /// The identifier for the TypeDictionary Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_TypeDictionary_XmlSchema = 6004;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_TypeDictionary_XmlSchema_NamespaceUri = 6005;

        /// <summary>
        /// The identifier for the ResetCondition Variable.
        /// </summary>
        public const uint IAggregateStatisticsType_ResetCondition = 6047;

        /// <summary>
        /// The identifier for the WindowDuration Variable.
        /// </summary>
        public const uint IRollingStatisticsType_WindowDuration = 6048;

        /// <summary>
        /// The identifier for the WindowNumberOfValues Variable.
        /// </summary>
        public const uint IRollingStatisticsType_WindowNumberOfValues = 6049;

        /// <summary>
        /// The identifier for the StartTime Variable.
        /// </summary>
        public const uint IStatisticsType_StartTime = 6046;

        /// <summary>
        /// The identifier for the AudioSample Variable.
        /// </summary>
        public const uint AcousticSignalType_AudioSample = 6029;

        /// <summary>
        /// The identifier for the NumberInList Variable.
        /// </summary>
        public const uint AcousticSignalType_NumberInList = 6028;

        /// <summary>
        /// The identifier for the &lt;CalibrationValue&gt; Variable.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue = 6064;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue_EngineeringUnits = 6065;

        /// <summary>
        /// The identifier for the &lt;CapacityRange&gt; Variable.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures_CapacityRange = 6066;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_EngineeringUnits = 6067;

        /// <summary>
        /// The identifier for the Resolution Variable.
        /// </summary>
        public const uint CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_Resolution = 6068;

        /// <summary>
        /// The identifier for the CertificateUri Variable.
        /// </summary>
        public const uint CalibrationTargetType_CertificateUri = 6063;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_AssetId = 6080;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_ComponentName = 6081;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_DeviceClass = 6076;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_DeviceManual = 6082;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_DeviceRevision = 6075;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_HardwareRevision = 6073;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_Manufacturer = 6069;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_ManufacturerUri = 6070;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_Model = 6071;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_ProductCode = 6072;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_ProductInstanceUri = 6078;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_RevisionCounter = 6079;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_SerialNumber = 6077;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint CalibrationTargetType_Identification_SoftwareRevision = 6074;

        /// <summary>
        /// The identifier for the LastValidationDate Variable.
        /// </summary>
        public const uint CalibrationTargetType_LastValidationDate = 6060;

        /// <summary>
        /// The identifier for the NextValidationDate Variable.
        /// </summary>
        public const uint CalibrationTargetType_NextValidationDate = 6061;

        /// <summary>
        /// The identifier for the Quality Variable.
        /// </summary>
        public const uint CalibrationTargetType_Quality = 6062;

        /// <summary>
        /// The identifier for the ChannelColor Variable.
        /// </summary>
        public const uint ControlChannelType_ChannelColor = 6024;

        /// <summary>
        /// The identifier for the Intensity Variable.
        /// </summary>
        public const uint ControlChannelType_Intensity = 6026;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint ControlChannelType_Intensity_EURange = 6027;

        /// <summary>
        /// The identifier for the SignalMode Variable.
        /// </summary>
        public const uint ControlChannelType_SignalMode = 6025;

        /// <summary>
        /// The identifier for the SignalOn Variable.
        /// </summary>
        public const uint ControlChannelType_SignalOn = 6023;

        /// <summary>
        /// The identifier for the NumberInList Variable.
        /// </summary>
        public const uint BasicStacklightType_OrderedObject_Placeholder_NumberInList = 6037;

        /// <summary>
        /// The identifier for the DisplayMode Variable.
        /// </summary>
        public const uint BasicStacklightType_StackLevel_DisplayMode = 6034;

        /// <summary>
        /// The identifier for the LevelPercent Variable.
        /// </summary>
        public const uint BasicStacklightType_StackLevel_LevelPercent = 6035;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BasicStacklightType_StackLevel_LevelPercent_EURange = 6036;

        /// <summary>
        /// The identifier for the StacklightMode Variable.
        /// </summary>
        public const uint BasicStacklightType_StacklightMode = 6009;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint StacklightType_DeviceHealth = 6038;

        /// <summary>
        /// The identifier for the IsPartOfBase Variable.
        /// </summary>
        public const uint StackElementType_IsPartOfBase = 6014;

        /// <summary>
        /// The identifier for the NumberInList Variable.
        /// </summary>
        public const uint StackElementType_NumberInList = 6015;

        /// <summary>
        /// The identifier for the SignalOn Variable.
        /// </summary>
        public const uint StackElementType_SignalOn = 6013;

        /// <summary>
        /// The identifier for the NumberInList Variable.
        /// </summary>
        public const uint StackElementAcousticType_AcousticSignals_OrderedObject_NumberInList = 6030;

        /// <summary>
        /// The identifier for the Intensity Variable.
        /// </summary>
        public const uint StackElementAcousticType_Intensity = 6021;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint StackElementAcousticType_Intensity_EURange = 6022;

        /// <summary>
        /// The identifier for the OperationMode Variable.
        /// </summary>
        public const uint StackElementAcousticType_OperationMode = 6020;

        /// <summary>
        /// The identifier for the ChannelColor Variable.
        /// </summary>
        public const uint StackElementLightType_ControlChannel_ChannelColor = 6031;

        /// <summary>
        /// The identifier for the SignalMode Variable.
        /// </summary>
        public const uint StackElementLightType_ControlChannel_SignalMode = 6032;

        /// <summary>
        /// The identifier for the SignalOn Variable.
        /// </summary>
        public const uint StackElementLightType_ControlChannel_SignalOn = 6033;

        /// <summary>
        /// The identifier for the Intensity Variable.
        /// </summary>
        public const uint StackElementLightType_Intensity = 6018;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint StackElementLightType_Intensity_EURange = 6019;

        /// <summary>
        /// The identifier for the SignalColor Variable.
        /// </summary>
        public const uint StackElementLightType_SignalColor = 6016;

        /// <summary>
        /// The identifier for the SignalMode Variable.
        /// </summary>
        public const uint StackElementLightType_SignalMode = 6017;

        /// <summary>
        /// The identifier for the DisplayMode Variable.
        /// </summary>
        public const uint StackLevelType_DisplayMode = 6012;

        /// <summary>
        /// The identifier for the LevelPercent Variable.
        /// </summary>
        public const uint StackLevelType_LevelPercent = 6010;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint StackLevelType_LevelPercent_EURange = 6011;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint CalibrationValueType_EngineeringUnits = 6057;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint CapacityRangeType_EngineeringUnits = 6058;

        /// <summary>
        /// The identifier for the Resolution Variable.
        /// </summary>
        public const uint CapacityRangeType_Resolution = 6059;

        /// <summary>
        /// The identifier for the IsNamespaceSubset Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__IsNamespaceSubset = 6039;

        /// <summary>
        /// The identifier for the NamespacePublicationDate Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__NamespacePublicationDate = 6040;

        /// <summary>
        /// The identifier for the NamespaceUri Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__NamespaceUri = 6041;

        /// <summary>
        /// The identifier for the NamespaceVersion Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__NamespaceVersion = 6042;

        /// <summary>
        /// The identifier for the StaticNodeIdTypes Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__StaticNodeIdTypes = 6043;

        /// <summary>
        /// The identifier for the StaticNumericNodeIdRange Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__StaticNumericNodeIdRange = 6044;

        /// <summary>
        /// The identifier for the StaticStringNodeIdPattern Object.
        /// </summary>
        public const uint Namespaces_http___opcfoundation_org_UA_IA__StaticStringNodeIdPattern = 6045;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableTypes
    {
        /// <summary>
        /// The identifier for the CalibrationValueType VariableType.
        /// </summary>
        public const uint CalibrationValueType = 2002;

        /// <summary>
        /// The identifier for the CapacityRangeType VariableType.
        /// </summary>
        public const uint CapacityRangeType = 2003;

    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all DataTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class DataTypeIds
    {
        /// <summary>
        /// The identifier for the LevelDisplayMode DataType.
        /// </summary>
        public static readonly ExpandedNodeId LevelDisplayMode = new ExpandedNodeId(DataTypes.LevelDisplayMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the SignalColor DataType.
        /// </summary>
        public static readonly ExpandedNodeId SignalColor = new ExpandedNodeId(DataTypes.SignalColor, Namespaces.IA);

        /// <summary>
        /// The identifier for the SignalModeLight DataType.
        /// </summary>
        public static readonly ExpandedNodeId SignalModeLight = new ExpandedNodeId(DataTypes.SignalModeLight, Namespaces.IA);

        /// <summary>
        /// The identifier for the StacklightOperationMode DataType.
        /// </summary>
        public static readonly ExpandedNodeId StacklightOperationMode = new ExpandedNodeId(DataTypes.StacklightOperationMode, Namespaces.IA);

    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Methods in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the IStatisticsType_ResetStatistics Method.
        /// </summary>
        public static readonly ExpandedNodeId IStatisticsType_ResetStatistics = new ExpandedNodeId(Methods.IStatisticsType_ResetStatistics, Namespaces.IA);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectIds
    {
        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetCategory Object.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetCategory = new ExpandedNodeId(Objects.CalibrationTargetType_CalibrationTargetCategory, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures Object.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures = new ExpandedNodeId(Objects.CalibrationTargetType_CalibrationTargetFeatures, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification = new ExpandedNodeId(Objects.CalibrationTargetType_Identification, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_OperationalConditions Object.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_OperationalConditions = new ExpandedNodeId(Objects.CalibrationTargetType_OperationalConditions, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_OrderedObject_Placeholder Object.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_OrderedObject_Placeholder = new ExpandedNodeId(Objects.BasicStacklightType_OrderedObject_Placeholder, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_AcousticSignals Object.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_AcousticSignals = new ExpandedNodeId(Objects.StackElementAcousticType_AcousticSignals, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StackLevel Object.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StackLevel = new ExpandedNodeId(Objects.BasicStacklightType_StackLevel, Namespaces.IA);

        /// <summary>
        /// The identifier for the StacklightType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId StacklightType_DeviceHealthAlarms = new ExpandedNodeId(Objects.StacklightType_DeviceHealthAlarms, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StackRunning Object.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StackRunning = new ExpandedNodeId(Objects.BasicStacklightType_StackRunning, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_AcousticSignals_OrderedObject Object.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_AcousticSignals_OrderedObject = new ExpandedNodeId(Objects.StackElementAcousticType_AcousticSignals_OrderedObject, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_ControlChannel Object.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_ControlChannel = new ExpandedNodeId(Objects.StackElementLightType_ControlChannel, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA_ Object.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA_ = new ExpandedNodeId(Objects.Namespaces_http___opcfoundation_org_UA_IA_, Namespaces.IA);

    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the AcousticSignalType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AcousticSignalType = new ExpandedNodeId(ObjectTypes.AcousticSignalType, Namespaces.IA);

        /// <summary>
        /// The identifier for the BaseCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseCalibrationTargetCategoryType = new ExpandedNodeId(ObjectTypes.BaseCalibrationTargetCategoryType, Namespaces.IA);

        /// <summary>
        /// The identifier for the DynamicCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DynamicCalibrationTargetCategoryType = new ExpandedNodeId(ObjectTypes.DynamicCalibrationTargetCategoryType, Namespaces.IA);

        /// <summary>
        /// The identifier for the OneTimeCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId OneTimeCalibrationTargetCategoryType = new ExpandedNodeId(ObjectTypes.OneTimeCalibrationTargetCategoryType, Namespaces.IA);

        /// <summary>
        /// The identifier for the ReusableCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ReusableCalibrationTargetCategoryType = new ExpandedNodeId(ObjectTypes.ReusableCalibrationTargetCategoryType, Namespaces.IA);

        /// <summary>
        /// The identifier for the ReusableDeviceCalibrationTargetCategoryType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ReusableDeviceCalibrationTargetCategoryType = new ExpandedNodeId(ObjectTypes.ReusableDeviceCalibrationTargetCategoryType, Namespaces.IA);

        /// <summary>
        /// The identifier for the IStatisticsType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IStatisticsType = new ExpandedNodeId(ObjectTypes.IStatisticsType, Namespaces.IA);

        /// <summary>
        /// The identifier for the IAggregateStatisticsType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IAggregateStatisticsType = new ExpandedNodeId(ObjectTypes.IAggregateStatisticsType, Namespaces.IA);

        /// <summary>
        /// The identifier for the IRollingStatisticsType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IRollingStatisticsType = new ExpandedNodeId(ObjectTypes.IRollingStatisticsType, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType = new ExpandedNodeId(ObjectTypes.CalibrationTargetType, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType = new ExpandedNodeId(ObjectTypes.ControlChannelType, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType = new ExpandedNodeId(ObjectTypes.BasicStacklightType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StacklightType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StacklightType = new ExpandedNodeId(ObjectTypes.StacklightType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StackElementType = new ExpandedNodeId(ObjectTypes.StackElementType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType = new ExpandedNodeId(ObjectTypes.StackElementAcousticType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType = new ExpandedNodeId(ObjectTypes.StackElementLightType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackLevelType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StackLevelType = new ExpandedNodeId(ObjectTypes.StackLevelType, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackRunningType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId StackRunningType = new ExpandedNodeId(ObjectTypes.StackRunningType, Namespaces.IA);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all ReferenceTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ReferenceTypeIds
    {
        /// <summary>
        /// The identifier for the HasStatisticComponent ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId HasStatisticComponent = new ExpandedNodeId(ReferenceTypes.HasStatisticComponent, Namespaces.IA);

        /// <summary>
        /// The identifier for the HasReferenceMeasurementInstrument ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId HasReferenceMeasurementInstrument = new ExpandedNodeId(ReferenceTypes.HasReferenceMeasurementInstrument, Namespaces.IA);

    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Variables in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the LevelDisplayMode_EnumValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId LevelDisplayMode_EnumValues = new ExpandedNodeId(Variables.LevelDisplayMode_EnumValues, Namespaces.IA);

        /// <summary>
        /// The identifier for the SignalColor_EnumValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId SignalColor_EnumValues = new ExpandedNodeId(Variables.SignalColor_EnumValues, Namespaces.IA);

        /// <summary>
        /// The identifier for the SignalModeLight_EnumValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId SignalModeLight_EnumValues = new ExpandedNodeId(Variables.SignalModeLight_EnumValues, Namespaces.IA);

        /// <summary>
        /// The identifier for the StacklightOperationMode_EnumValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId StacklightOperationMode_EnumValues = new ExpandedNodeId(Variables.StacklightOperationMode_EnumValues, Namespaces.IA);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema, Namespaces.IA);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema_NamespaceUri = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_TypeDictionary_BinarySchema_NamespaceUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_TypeDictionary_XmlSchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_TypeDictionary_XmlSchema = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_TypeDictionary_XmlSchema, Namespaces.IA);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_TypeDictionary_XmlSchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_TypeDictionary_XmlSchema_NamespaceUri = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_TypeDictionary_XmlSchema_NamespaceUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the IAggregateStatisticsType_ResetCondition Variable.
        /// </summary>
        public static readonly ExpandedNodeId IAggregateStatisticsType_ResetCondition = new ExpandedNodeId(Variables.IAggregateStatisticsType_ResetCondition, Namespaces.IA);

        /// <summary>
        /// The identifier for the IRollingStatisticsType_WindowDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId IRollingStatisticsType_WindowDuration = new ExpandedNodeId(Variables.IRollingStatisticsType_WindowDuration, Namespaces.IA);

        /// <summary>
        /// The identifier for the IRollingStatisticsType_WindowNumberOfValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId IRollingStatisticsType_WindowNumberOfValues = new ExpandedNodeId(Variables.IRollingStatisticsType_WindowNumberOfValues, Namespaces.IA);

        /// <summary>
        /// The identifier for the IStatisticsType_StartTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId IStatisticsType_StartTime = new ExpandedNodeId(Variables.IStatisticsType_StartTime, Namespaces.IA);

        /// <summary>
        /// The identifier for the AcousticSignalType_AudioSample Variable.
        /// </summary>
        public static readonly ExpandedNodeId AcousticSignalType_AudioSample = new ExpandedNodeId(Variables.AcousticSignalType_AudioSample, Namespaces.IA);

        /// <summary>
        /// The identifier for the AcousticSignalType_NumberInList Variable.
        /// </summary>
        public static readonly ExpandedNodeId AcousticSignalType_NumberInList = new ExpandedNodeId(Variables.AcousticSignalType_NumberInList, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue = new ExpandedNodeId(Variables.CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue_EngineeringUnits = new ExpandedNodeId(Variables.CalibrationTargetType_CalibrationTargetFeatures_CalibrationValue_EngineeringUnits, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures_CapacityRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures_CapacityRange = new ExpandedNodeId(Variables.CalibrationTargetType_CalibrationTargetFeatures_CapacityRange, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_EngineeringUnits = new ExpandedNodeId(Variables.CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_EngineeringUnits, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_Resolution Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_Resolution = new ExpandedNodeId(Variables.CalibrationTargetType_CalibrationTargetFeatures_CapacityRange_Resolution, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_CertificateUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_CertificateUri = new ExpandedNodeId(Variables.CalibrationTargetType_CertificateUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_AssetId = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_AssetId, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_ComponentName = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_ComponentName, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_DeviceClass = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_DeviceClass, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_DeviceManual = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_DeviceManual, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_DeviceRevision = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_DeviceRevision, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_HardwareRevision = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_HardwareRevision, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_Manufacturer = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_Manufacturer, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_ManufacturerUri = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_ManufacturerUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_Model = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_Model, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_ProductCode = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_ProductCode, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_ProductInstanceUri = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_ProductInstanceUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_RevisionCounter = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_RevisionCounter, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_SerialNumber = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_SerialNumber, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Identification_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Identification_SoftwareRevision = new ExpandedNodeId(Variables.CalibrationTargetType_Identification_SoftwareRevision, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_LastValidationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_LastValidationDate = new ExpandedNodeId(Variables.CalibrationTargetType_LastValidationDate, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_NextValidationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_NextValidationDate = new ExpandedNodeId(Variables.CalibrationTargetType_NextValidationDate, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationTargetType_Quality Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationTargetType_Quality = new ExpandedNodeId(Variables.CalibrationTargetType_Quality, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType_ChannelColor Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType_ChannelColor = new ExpandedNodeId(Variables.ControlChannelType_ChannelColor, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType_Intensity Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType_Intensity = new ExpandedNodeId(Variables.ControlChannelType_Intensity, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType_Intensity_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType_Intensity_EURange = new ExpandedNodeId(Variables.ControlChannelType_Intensity_EURange, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType_SignalMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType_SignalMode = new ExpandedNodeId(Variables.ControlChannelType_SignalMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the ControlChannelType_SignalOn Variable.
        /// </summary>
        public static readonly ExpandedNodeId ControlChannelType_SignalOn = new ExpandedNodeId(Variables.ControlChannelType_SignalOn, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_OrderedObject_Placeholder_NumberInList Variable.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_OrderedObject_Placeholder_NumberInList = new ExpandedNodeId(Variables.BasicStacklightType_OrderedObject_Placeholder_NumberInList, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StackLevel_DisplayMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StackLevel_DisplayMode = new ExpandedNodeId(Variables.BasicStacklightType_StackLevel_DisplayMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StackLevel_LevelPercent Variable.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StackLevel_LevelPercent = new ExpandedNodeId(Variables.BasicStacklightType_StackLevel_LevelPercent, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StackLevel_LevelPercent_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StackLevel_LevelPercent_EURange = new ExpandedNodeId(Variables.BasicStacklightType_StackLevel_LevelPercent_EURange, Namespaces.IA);

        /// <summary>
        /// The identifier for the BasicStacklightType_StacklightMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BasicStacklightType_StacklightMode = new ExpandedNodeId(Variables.BasicStacklightType_StacklightMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the StacklightType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId StacklightType_DeviceHealth = new ExpandedNodeId(Variables.StacklightType_DeviceHealth, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementType_IsPartOfBase Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementType_IsPartOfBase = new ExpandedNodeId(Variables.StackElementType_IsPartOfBase, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementType_NumberInList Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementType_NumberInList = new ExpandedNodeId(Variables.StackElementType_NumberInList, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementType_SignalOn Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementType_SignalOn = new ExpandedNodeId(Variables.StackElementType_SignalOn, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_AcousticSignals_OrderedObject_NumberInList Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_AcousticSignals_OrderedObject_NumberInList = new ExpandedNodeId(Variables.StackElementAcousticType_AcousticSignals_OrderedObject_NumberInList, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_Intensity Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_Intensity = new ExpandedNodeId(Variables.StackElementAcousticType_Intensity, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_Intensity_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_Intensity_EURange = new ExpandedNodeId(Variables.StackElementAcousticType_Intensity_EURange, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementAcousticType_OperationMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementAcousticType_OperationMode = new ExpandedNodeId(Variables.StackElementAcousticType_OperationMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_ControlChannel_ChannelColor Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_ControlChannel_ChannelColor = new ExpandedNodeId(Variables.StackElementLightType_ControlChannel_ChannelColor, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_ControlChannel_SignalMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_ControlChannel_SignalMode = new ExpandedNodeId(Variables.StackElementLightType_ControlChannel_SignalMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_ControlChannel_SignalOn Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_ControlChannel_SignalOn = new ExpandedNodeId(Variables.StackElementLightType_ControlChannel_SignalOn, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_Intensity Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_Intensity = new ExpandedNodeId(Variables.StackElementLightType_Intensity, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_Intensity_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_Intensity_EURange = new ExpandedNodeId(Variables.StackElementLightType_Intensity_EURange, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_SignalColor Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_SignalColor = new ExpandedNodeId(Variables.StackElementLightType_SignalColor, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackElementLightType_SignalMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackElementLightType_SignalMode = new ExpandedNodeId(Variables.StackElementLightType_SignalMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackLevelType_DisplayMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackLevelType_DisplayMode = new ExpandedNodeId(Variables.StackLevelType_DisplayMode, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackLevelType_LevelPercent Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackLevelType_LevelPercent = new ExpandedNodeId(Variables.StackLevelType_LevelPercent, Namespaces.IA);

        /// <summary>
        /// The identifier for the StackLevelType_LevelPercent_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId StackLevelType_LevelPercent_EURange = new ExpandedNodeId(Variables.StackLevelType_LevelPercent_EURange, Namespaces.IA);

        /// <summary>
        /// The identifier for the CalibrationValueType_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationValueType_EngineeringUnits = new ExpandedNodeId(Variables.CalibrationValueType_EngineeringUnits, Namespaces.IA);

        /// <summary>
        /// The identifier for the CapacityRangeType_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId CapacityRangeType_EngineeringUnits = new ExpandedNodeId(Variables.CapacityRangeType_EngineeringUnits, Namespaces.IA);

        /// <summary>
        /// The identifier for the CapacityRangeType_Resolution Variable.
        /// </summary>
        public static readonly ExpandedNodeId CapacityRangeType_Resolution = new ExpandedNodeId(Variables.CapacityRangeType_Resolution, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__IsNamespaceSubset Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__IsNamespaceSubset = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__IsNamespaceSubset, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__NamespacePublicationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__NamespacePublicationDate = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__NamespacePublicationDate, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__NamespaceUri = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__NamespaceUri, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__NamespaceVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__NamespaceVersion = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__NamespaceVersion, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__StaticNodeIdTypes Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__StaticNodeIdTypes = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__StaticNodeIdTypes, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__StaticNumericNodeIdRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__StaticNumericNodeIdRange = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__StaticNumericNodeIdRange, Namespaces.IA);

        /// <summary>
        /// The identifier for the Namespaces_http___opcfoundation_org_UA_IA__StaticStringNodeIdPattern Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___opcfoundation_org_UA_IA__StaticStringNodeIdPattern = new ExpandedNodeId(Variables.Namespaces_http___opcfoundation_org_UA_IA__StaticStringNodeIdPattern, Namespaces.IA);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all VariableType in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableTypeIds
    {
        /// <summary>
        /// The identifier for the CalibrationValueType VariableType.
        /// </summary>
        public static readonly ExpandedNodeId CalibrationValueType = new ExpandedNodeId(VariableTypes.CalibrationValueType, Namespaces.IA);

        /// <summary>
        /// The identifier for the CapacityRangeType VariableType.
        /// </summary>
        public static readonly ExpandedNodeId CapacityRangeType = new ExpandedNodeId(VariableTypes.CapacityRangeType, Namespaces.IA);

    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the &lt;CPIdentifier&gt; component.
        /// </summary>
        public const string CPIdentifier = "<CPIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;CalibrationValue&gt; component.
        /// </summary>
        public const string CalibrationValue = "<CalibrationValue>";
        /// <summary>
        /// The BrowseName for the &lt;CapacityRange&gt; component.
        /// </summary>
        public const string CapacityRange = "<CapacityRange>";
        /// <summary>
        /// The BrowseName for the &lt;Component&gt; component.
        /// </summary>
        public const string Component = "<Component>";
        /// <summary>
        /// The BrowseName for the &lt;ControlChannel&gt; component.
        /// </summary>
        public const string ControlChannel = "<ControlChannel>";
        /// <summary>
        /// The BrowseName for the &lt;DocumentFileId&gt; component.
        /// </summary>
        public const string DocumentFileId = "<DocumentFileId>";
        /// <summary>
        /// The BrowseName for the &lt;DocumentIdentifier&gt; component.
        /// </summary>
        public const string DocumentIdentifier = "<DocumentIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;GroupIdentifier&gt; component.
        /// </summary>
        public const string GroupIdentifier = "<GroupIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ImageIdentifier&gt; component.
        /// </summary>
        public const string ImageIdentifier = "<ImageIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;NetworkIdentifier&gt; component.
        /// </summary>
        public const string NetworkIdentifier = "<NetworkIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ObjectIdentifier&gt; component.
        /// </summary>
        public const string ObjectIdentifier = "<ObjectIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ParameterIdentifier&gt; component.
        /// </summary>
        public const string ParameterIdentifier = "<ParameterIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ProfileIdentifier&gt; component.
        /// </summary>
        public const string ProfileIdentifier = "<ProfileIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ProtocolSupportIdentifier&gt; component.
        /// </summary>
        public const string ProtocolSupportIdentifier = "<ProtocolSupportIdentifier>";
        /// <summary>
        /// The BrowseName for the Abort component.
        /// </summary>
        public const string Abort = "Abort";
        /// <summary>
        /// The BrowseName for the AcousticSignalType component.
        /// </summary>
        public const string AcousticSignalType = "AcousticSignalType";
        /// <summary>
        /// The BrowseName for the AcousticSignals component.
        /// </summary>
        public const string AcousticSignals = "AcousticSignals";
        /// <summary>
        /// The BrowseName for the ActualMode component.
        /// </summary>
        public const string ActualMode = "ActualMode";
        /// <summary>
        /// The BrowseName for the AssetId component.
        /// </summary>
        public const string AssetId = "AssetId";
        /// <summary>
        /// The BrowseName for the AudioSample component.
        /// </summary>
        public const string AudioSample = "AudioSample";
        /// <summary>
        /// The BrowseName for the BaseCalibrationTargetCategoryType component.
        /// </summary>
        public const string BaseCalibrationTargetCategoryType = "BaseCalibrationTargetCategoryType";
        /// <summary>
        /// The BrowseName for the BaseLifetimeIndicationType component.
        /// </summary>
        public const string BaseLifetimeIndicationType = "BaseLifetimeIndicationType";
        /// <summary>
        /// The BrowseName for the BasicStacklightType component.
        /// </summary>
        public const string BasicStacklightType = "BasicStacklightType";
        /// <summary>
        /// The BrowseName for the BlockType component.
        /// </summary>
        public const string BlockType = "BlockType";
        /// <summary>
        /// The BrowseName for the BreakLock component.
        /// </summary>
        public const string BreakLock = "BreakLock";
        /// <summary>
        /// The BrowseName for the CachedLoadingType component.
        /// </summary>
        public const string CachedLoadingType = "CachedLoadingType";
        /// <summary>
        /// The BrowseName for the CalibrationTargetCategory component.
        /// </summary>
        public const string CalibrationTargetCategory = "CalibrationTargetCategory";
        /// <summary>
        /// The BrowseName for the CalibrationTargetFeatures component.
        /// </summary>
        public const string CalibrationTargetFeatures = "CalibrationTargetFeatures";
        /// <summary>
        /// The BrowseName for the CalibrationTargetType component.
        /// </summary>
        public const string CalibrationTargetType = "CalibrationTargetType";
        /// <summary>
        /// The BrowseName for the CalibrationValueType component.
        /// </summary>
        public const string CalibrationValueType = "CalibrationValueType";
        /// <summary>
        /// The BrowseName for the CapacityRangeType component.
        /// </summary>
        public const string CapacityRangeType = "CapacityRangeType";
        /// <summary>
        /// The BrowseName for the CertificateUri component.
        /// </summary>
        public const string CertificateUri = "CertificateUri";
        /// <summary>
        /// The BrowseName for the ChangeLogReference component.
        /// </summary>
        public const string ChangeLogReference = "ChangeLogReference";
        /// <summary>
        /// The BrowseName for the ChannelColor component.
        /// </summary>
        public const string ChannelColor = "ChannelColor";
        /// <summary>
        /// The BrowseName for the CheckFunctionAlarmType component.
        /// </summary>
        public const string CheckFunctionAlarmType = "CheckFunctionAlarmType";
        /// <summary>
        /// The BrowseName for the ComponentName component.
        /// </summary>
        public const string ComponentName = "ComponentName";
        /// <summary>
        /// The BrowseName for the ComponentType component.
        /// </summary>
        public const string ComponentType = "ComponentType";
        /// <summary>
        /// The BrowseName for the Components component.
        /// </summary>
        public const string Components = "Components";
        /// <summary>
        /// The BrowseName for the ConfigurableObjectType component.
        /// </summary>
        public const string ConfigurableObjectType = "ConfigurableObjectType";
        /// <summary>
        /// The BrowseName for the Confirm component.
        /// </summary>
        public const string Confirm = "Confirm";
        /// <summary>
        /// The BrowseName for the Confirmation component.
        /// </summary>
        public const string Confirmation = "Confirmation";
        /// <summary>
        /// The BrowseName for the ConfirmationStateMachineType component.
        /// </summary>
        public const string ConfirmationStateMachineType = "ConfirmationStateMachineType";
        /// <summary>
        /// The BrowseName for the ConfirmationTimeout component.
        /// </summary>
        public const string ConfirmationTimeout = "ConfirmationTimeout";
        /// <summary>
        /// The BrowseName for the ConnectionPointType component.
        /// </summary>
        public const string ConnectionPointType = "ConnectionPointType";
        /// <summary>
        /// The BrowseName for the ConnectsTo component.
        /// </summary>
        public const string ConnectsTo = "ConnectsTo";
        /// <summary>
        /// The BrowseName for the ConnectsToParent component.
        /// </summary>
        public const string ConnectsToParent = "ConnectsToParent";
        /// <summary>
        /// The BrowseName for the ControlChannelType component.
        /// </summary>
        public const string ControlChannelType = "ControlChannelType";
        /// <summary>
        /// The BrowseName for the CurrentVersion component.
        /// </summary>
        public const string CurrentVersion = "CurrentVersion";
        /// <summary>
        /// The BrowseName for the DeviceClass component.
        /// </summary>
        public const string DeviceClass = "DeviceClass";
        /// <summary>
        /// The BrowseName for the DeviceFeatures component.
        /// </summary>
        public const string DeviceFeatures = "DeviceFeatures";
        /// <summary>
        /// The BrowseName for the DeviceHealth component.
        /// </summary>
        public const string DeviceHealth = "DeviceHealth";
        /// <summary>
        /// The BrowseName for the DeviceHealthAlarms component.
        /// </summary>
        public const string DeviceHealthAlarms = "DeviceHealthAlarms";
        /// <summary>
        /// The BrowseName for the DeviceHealthDiagnosticAlarmType component.
        /// </summary>
        public const string DeviceHealthDiagnosticAlarmType = "DeviceHealthDiagnosticAlarmType";
        /// <summary>
        /// The BrowseName for the DeviceHealthEnumeration component.
        /// </summary>
        public const string DeviceHealthEnumeration = "DeviceHealthEnumeration";
        /// <summary>
        /// The BrowseName for the DeviceManual component.
        /// </summary>
        public const string DeviceManual = "DeviceManual";
        /// <summary>
        /// The BrowseName for the DeviceRevision component.
        /// </summary>
        public const string DeviceRevision = "DeviceRevision";
        /// <summary>
        /// The BrowseName for the DeviceSet component.
        /// </summary>
        public const string DeviceSet = "DeviceSet";
        /// <summary>
        /// The BrowseName for the DeviceTopology component.
        /// </summary>
        public const string DeviceTopology = "DeviceTopology";
        /// <summary>
        /// The BrowseName for the DeviceType component.
        /// </summary>
        public const string DeviceType = "DeviceType";
        /// <summary>
        /// The BrowseName for the DeviceTypeImage component.
        /// </summary>
        public const string DeviceTypeImage = "DeviceTypeImage";
        /// <summary>
        /// The BrowseName for the DiameterIndicationType component.
        /// </summary>
        public const string DiameterIndicationType = "DiameterIndicationType";
        /// <summary>
        /// The BrowseName for the DirectLoadingType component.
        /// </summary>
        public const string DirectLoadingType = "DirectLoadingType";
        /// <summary>
        /// The BrowseName for the DisplayMode component.
        /// </summary>
        public const string DisplayMode = "DisplayMode";
        /// <summary>
        /// The BrowseName for the Documentation component.
        /// </summary>
        public const string Documentation = "Documentation";
        /// <summary>
        /// The BrowseName for the DocumentationFiles component.
        /// </summary>
        public const string DocumentationFiles = "DocumentationFiles";
        /// <summary>
        /// The BrowseName for the DynamicCalibrationTargetCategoryType component.
        /// </summary>
        public const string DynamicCalibrationTargetCategoryType = "DynamicCalibrationTargetCategoryType";
        /// <summary>
        /// The BrowseName for the Error component.
        /// </summary>
        public const string Error = "Error";
        /// <summary>
        /// The BrowseName for the ErrorMessage component.
        /// </summary>
        public const string ErrorMessage = "ErrorMessage";
        /// <summary>
        /// The BrowseName for the ErrorToIdle component.
        /// </summary>
        public const string ErrorToIdle = "ErrorToIdle";
        /// <summary>
        /// The BrowseName for the Executing component.
        /// </summary>
        public const string Executing = "Executing";
        /// <summary>
        /// The BrowseName for the ExitLock component.
        /// </summary>
        public const string ExitLock = "ExitLock";
        /// <summary>
        /// The BrowseName for the FailureAlarmType component.
        /// </summary>
        public const string FailureAlarmType = "FailureAlarmType";
        /// <summary>
        /// The BrowseName for the FallbackVersion component.
        /// </summary>
        public const string FallbackVersion = "FallbackVersion";
        /// <summary>
        /// The BrowseName for the FetchResultDataType component.
        /// </summary>
        public const string FetchResultDataType = "FetchResultDataType";
        /// <summary>
        /// The BrowseName for the FetchTransferResultData component.
        /// </summary>
        public const string FetchTransferResultData = "FetchTransferResultData";
        /// <summary>
        /// The BrowseName for the FileSystemLoadingType component.
        /// </summary>
        public const string FileSystemLoadingType = "FileSystemLoadingType";
        /// <summary>
        /// The BrowseName for the FileTransfer component.
        /// </summary>
        public const string FileTransfer = "FileTransfer";
        /// <summary>
        /// The BrowseName for the FromExecutingToExecuting component.
        /// </summary>
        public const string FromExecutingToExecuting = "FromExecutingToExecuting";
        /// <summary>
        /// The BrowseName for the FromExecutingToNotAvailable component.
        /// </summary>
        public const string FromExecutingToNotAvailable = "FromExecutingToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromExecutingToNotExecuting component.
        /// </summary>
        public const string FromExecutingToNotExecuting = "FromExecutingToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromExecutingToOutOfService component.
        /// </summary>
        public const string FromExecutingToOutOfService = "FromExecutingToOutOfService";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToMaintenance component.
        /// </summary>
        public const string FromMaintenanceToMaintenance = "FromMaintenanceToMaintenance";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToNone component.
        /// </summary>
        public const string FromMaintenanceToNone = "FromMaintenanceToNone";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToProcessing component.
        /// </summary>
        public const string FromMaintenanceToProcessing = "FromMaintenanceToProcessing";
        /// <summary>
        /// The BrowseName for the FromMaintenanceToSetup component.
        /// </summary>
        public const string FromMaintenanceToSetup = "FromMaintenanceToSetup";
        /// <summary>
        /// The BrowseName for the FromNoneToMaintenance component.
        /// </summary>
        public const string FromNoneToMaintenance = "FromNoneToMaintenance";
        /// <summary>
        /// The BrowseName for the FromNoneToNone component.
        /// </summary>
        public const string FromNoneToNone = "FromNoneToNone";
        /// <summary>
        /// The BrowseName for the FromNoneToProcessing component.
        /// </summary>
        public const string FromNoneToProcessing = "FromNoneToProcessing";
        /// <summary>
        /// The BrowseName for the FromNoneToSetup component.
        /// </summary>
        public const string FromNoneToSetup = "FromNoneToSetup";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToExecuting component.
        /// </summary>
        public const string FromNotAvailableToExecuting = "FromNotAvailableToExecuting";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToNotAvailable component.
        /// </summary>
        public const string FromNotAvailableToNotAvailable = "FromNotAvailableToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToNotExecuting component.
        /// </summary>
        public const string FromNotAvailableToNotExecuting = "FromNotAvailableToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromNotAvailableToOutOfService component.
        /// </summary>
        public const string FromNotAvailableToOutOfService = "FromNotAvailableToOutOfService";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToExecuting component.
        /// </summary>
        public const string FromNotExecutingToExecuting = "FromNotExecutingToExecuting";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToNotAvailable component.
        /// </summary>
        public const string FromNotExecutingToNotAvailable = "FromNotExecutingToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToNotExecuting component.
        /// </summary>
        public const string FromNotExecutingToNotExecuting = "FromNotExecutingToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromNotExecutingToOutOfService component.
        /// </summary>
        public const string FromNotExecutingToOutOfService = "FromNotExecutingToOutOfService";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToExecuting component.
        /// </summary>
        public const string FromOutOfServiceToExecuting = "FromOutOfServiceToExecuting";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToNotAvailable component.
        /// </summary>
        public const string FromOutOfServiceToNotAvailable = "FromOutOfServiceToNotAvailable";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToNotExecuting component.
        /// </summary>
        public const string FromOutOfServiceToNotExecuting = "FromOutOfServiceToNotExecuting";
        /// <summary>
        /// The BrowseName for the FromOutOfServiceToOutOfService component.
        /// </summary>
        public const string FromOutOfServiceToOutOfService = "FromOutOfServiceToOutOfService";
        /// <summary>
        /// The BrowseName for the FromProcessingToMaintenance component.
        /// </summary>
        public const string FromProcessingToMaintenance = "FromProcessingToMaintenance";
        /// <summary>
        /// The BrowseName for the FromProcessingToNone component.
        /// </summary>
        public const string FromProcessingToNone = "FromProcessingToNone";
        /// <summary>
        /// The BrowseName for the FromProcessingToProcessing component.
        /// </summary>
        public const string FromProcessingToProcessing = "FromProcessingToProcessing";
        /// <summary>
        /// The BrowseName for the FromProcessingToSetup component.
        /// </summary>
        public const string FromProcessingToSetup = "FromProcessingToSetup";
        /// <summary>
        /// The BrowseName for the FromSetupToMaintenance component.
        /// </summary>
        public const string FromSetupToMaintenance = "FromSetupToMaintenance";
        /// <summary>
        /// The BrowseName for the FromSetupToNone component.
        /// </summary>
        public const string FromSetupToNone = "FromSetupToNone";
        /// <summary>
        /// The BrowseName for the FromSetupToProcessing component.
        /// </summary>
        public const string FromSetupToProcessing = "FromSetupToProcessing";
        /// <summary>
        /// The BrowseName for the FromSetupToSetup component.
        /// </summary>
        public const string FromSetupToSetup = "FromSetupToSetup";
        /// <summary>
        /// The BrowseName for the FunctionalGroupType component.
        /// </summary>
        public const string FunctionalGroupType = "FunctionalGroupType";
        /// <summary>
        /// The BrowseName for the GetUpdateBehavior component.
        /// </summary>
        public const string GetUpdateBehavior = "GetUpdateBehavior";
        /// <summary>
        /// The BrowseName for the HardwareRevision component.
        /// </summary>
        public const string HardwareRevision = "HardwareRevision";
        /// <summary>
        /// The BrowseName for the HasReferenceMeasurementInstrument component.
        /// </summary>
        public const string HasReferenceMeasurementInstrument = "HasReferenceMeasurementInstrument";
        /// <summary>
        /// The BrowseName for the HasStatisticComponent component.
        /// </summary>
        public const string HasStatisticComponent = "HasStatisticComponent";
        /// <summary>
        /// The BrowseName for the Hash component.
        /// </summary>
        public const string Hash = "Hash";
        /// <summary>
        /// The BrowseName for the IAggregateStatisticsType component.
        /// </summary>
        public const string IAggregateStatisticsType = "IAggregateStatisticsType";
        /// <summary>
        /// The BrowseName for the IDeviceHealthType component.
        /// </summary>
        public const string IDeviceHealthType = "IDeviceHealthType";
        /// <summary>
        /// The BrowseName for the IMachineTagNameplateType component.
        /// </summary>
        public const string IMachineTagNameplateType = "IMachineTagNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineVendorNameplateType component.
        /// </summary>
        public const string IMachineVendorNameplateType = "IMachineVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineryItemVendorNameplateType component.
        /// </summary>
        public const string IMachineryItemVendorNameplateType = "IMachineryItemVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IOperationCounterType component.
        /// </summary>
        public const string IOperationCounterType = "IOperationCounterType";
        /// <summary>
        /// The BrowseName for the IRollingStatisticsType component.
        /// </summary>
        public const string IRollingStatisticsType = "IRollingStatisticsType";
        /// <summary>
        /// The BrowseName for the IStatisticsType component.
        /// </summary>
        public const string IStatisticsType = "IStatisticsType";
        /// <summary>
        /// The BrowseName for the ISupportInfoType component.
        /// </summary>
        public const string ISupportInfoType = "ISupportInfoType";
        /// <summary>
        /// The BrowseName for the ITagNameplateType component.
        /// </summary>
        public const string ITagNameplateType = "ITagNameplateType";
        /// <summary>
        /// The BrowseName for the IVendorNameplateType component.
        /// </summary>
        public const string IVendorNameplateType = "IVendorNameplateType";
        /// <summary>
        /// The BrowseName for the Identification component.
        /// </summary>
        public const string Identification = "Identification";
        /// <summary>
        /// The BrowseName for the Idle component.
        /// </summary>
        public const string Idle = "Idle";
        /// <summary>
        /// The BrowseName for the IdleToInstalling component.
        /// </summary>
        public const string IdleToInstalling = "IdleToInstalling";
        /// <summary>
        /// The BrowseName for the IdleToPreparing component.
        /// </summary>
        public const string IdleToPreparing = "IdleToPreparing";
        /// <summary>
        /// The BrowseName for the ImageSet component.
        /// </summary>
        public const string ImageSet = "ImageSet";
        /// <summary>
        /// The BrowseName for the Indication component.
        /// </summary>
        public const string Indication = "Indication";
        /// <summary>
        /// The BrowseName for the InitLock component.
        /// </summary>
        public const string InitLock = "InitLock";
        /// <summary>
        /// The BrowseName for the InitialOperationDate component.
        /// </summary>
        public const string InitialOperationDate = "InitialOperationDate";
        /// <summary>
        /// The BrowseName for the InstallFiles component.
        /// </summary>
        public const string InstallFiles = "InstallFiles";
        /// <summary>
        /// The BrowseName for the InstallSoftwarePackage component.
        /// </summary>
        public const string InstallSoftwarePackage = "InstallSoftwarePackage";
        /// <summary>
        /// The BrowseName for the Installation component.
        /// </summary>
        public const string Installation = "Installation";
        /// <summary>
        /// The BrowseName for the InstallationDelay component.
        /// </summary>
        public const string InstallationDelay = "InstallationDelay";
        /// <summary>
        /// The BrowseName for the InstallationStateMachineType component.
        /// </summary>
        public const string InstallationStateMachineType = "InstallationStateMachineType";
        /// <summary>
        /// The BrowseName for the Installing component.
        /// </summary>
        public const string Installing = "Installing";
        /// <summary>
        /// The BrowseName for the InstallingToError component.
        /// </summary>
        public const string InstallingToError = "InstallingToError";
        /// <summary>
        /// The BrowseName for the InstallingToIdle component.
        /// </summary>
        public const string InstallingToIdle = "InstallingToIdle";
        /// <summary>
        /// The BrowseName for the Intensity component.
        /// </summary>
        public const string Intensity = "Intensity";
        /// <summary>
        /// The BrowseName for the IsOnline component.
        /// </summary>
        public const string IsOnline = "IsOnline";
        /// <summary>
        /// The BrowseName for the IsPartOfBase component.
        /// </summary>
        public const string IsPartOfBase = "IsPartOfBase";
        /// <summary>
        /// The BrowseName for the LastValidationDate component.
        /// </summary>
        public const string LastValidationDate = "LastValidationDate";
        /// <summary>
        /// The BrowseName for the LengthIndicationType component.
        /// </summary>
        public const string LengthIndicationType = "LengthIndicationType";
        /// <summary>
        /// The BrowseName for the LevelDisplayMode component.
        /// </summary>
        public const string LevelDisplayMode = "LevelDisplayMode";
        /// <summary>
        /// The BrowseName for the LevelPercent component.
        /// </summary>
        public const string LevelPercent = "LevelPercent";
        /// <summary>
        /// The BrowseName for the LifetimeVariableType component.
        /// </summary>
        public const string LifetimeVariableType = "LifetimeVariableType";
        /// <summary>
        /// The BrowseName for the LimitValue component.
        /// </summary>
        public const string LimitValue = "LimitValue";
        /// <summary>
        /// The BrowseName for the Loading component.
        /// </summary>
        public const string Loading = "Loading";
        /// <summary>
        /// The BrowseName for the Location component.
        /// </summary>
        public const string Location = "Location";
        /// <summary>
        /// The BrowseName for the Lock component.
        /// </summary>
        public const string Lock = "Lock";
        /// <summary>
        /// The BrowseName for the Locked component.
        /// </summary>
        public const string Locked = "Locked";
        /// <summary>
        /// The BrowseName for the LockingClient component.
        /// </summary>
        public const string LockingClient = "LockingClient";
        /// <summary>
        /// The BrowseName for the LockingServicesType component.
        /// </summary>
        public const string LockingServicesType = "LockingServicesType";
        /// <summary>
        /// The BrowseName for the LockingUser component.
        /// </summary>
        public const string LockingUser = "LockingUser";
        /// <summary>
        /// The BrowseName for the MachineComponentsType component.
        /// </summary>
        public const string MachineComponentsType = "MachineComponentsType";
        /// <summary>
        /// The BrowseName for the MachineIdentificationType component.
        /// </summary>
        public const string MachineIdentificationType = "MachineIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryBuildingBlocks component.
        /// </summary>
        public const string MachineryBuildingBlocks = "MachineryBuildingBlocks";
        /// <summary>
        /// The BrowseName for the MachineryComponentIdentificationType component.
        /// </summary>
        public const string MachineryComponentIdentificationType = "MachineryComponentIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemIdentificationType component.
        /// </summary>
        public const string MachineryItemIdentificationType = "MachineryItemIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemState component.
        /// </summary>
        public const string MachineryItemState = "MachineryItemState";
        /// <summary>
        /// The BrowseName for the MachineryItemState_StateMachineType component.
        /// </summary>
        public const string MachineryItemState_StateMachineType = "MachineryItemState_StateMachineType";
        /// <summary>
        /// The BrowseName for the MachineryOperationMode component.
        /// </summary>
        public const string MachineryOperationMode = "MachineryOperationMode";
        /// <summary>
        /// The BrowseName for the MachineryOperationModeStateMachineType component.
        /// </summary>
        public const string MachineryOperationModeStateMachineType = "MachineryOperationModeStateMachineType";
        /// <summary>
        /// The BrowseName for the Machines component.
        /// </summary>
        public const string Machines = "Machines";
        /// <summary>
        /// The BrowseName for the Maintenance component.
        /// </summary>
        public const string Maintenance = "Maintenance";
        /// <summary>
        /// The BrowseName for the MaintenanceRequiredAlarmType component.
        /// </summary>
        public const string MaintenanceRequiredAlarmType = "MaintenanceRequiredAlarmType";
        /// <summary>
        /// The BrowseName for the Manufacturer component.
        /// </summary>
        public const string Manufacturer = "Manufacturer";
        /// <summary>
        /// The BrowseName for the ManufacturerUri component.
        /// </summary>
        public const string ManufacturerUri = "ManufacturerUri";
        /// <summary>
        /// The BrowseName for the MaxInactiveLockTime component.
        /// </summary>
        public const string MaxInactiveLockTime = "MaxInactiveLockTime";
        /// <summary>
        /// The BrowseName for the MethodSet component.
        /// </summary>
        public const string MethodSet = "MethodSet";
        /// <summary>
        /// The BrowseName for the Model component.
        /// </summary>
        public const string Model = "Model";
        /// <summary>
        /// The BrowseName for the MonthOfConstruction component.
        /// </summary>
        public const string MonthOfConstruction = "MonthOfConstruction";
        /// <summary>
        /// The BrowseName for the NetworkAddress component.
        /// </summary>
        public const string NetworkAddress = "NetworkAddress";
        /// <summary>
        /// The BrowseName for the NetworkSet component.
        /// </summary>
        public const string NetworkSet = "NetworkSet";
        /// <summary>
        /// The BrowseName for the NetworkType component.
        /// </summary>
        public const string NetworkType = "NetworkType";
        /// <summary>
        /// The BrowseName for the NextValidationDate component.
        /// </summary>
        public const string NextValidationDate = "NextValidationDate";
        /// <summary>
        /// The BrowseName for the None component.
        /// </summary>
        public const string None = "None";
        /// <summary>
        /// The BrowseName for the NormalMode component.
        /// </summary>
        public const string NormalMode = "NormalMode";
        /// <summary>
        /// The BrowseName for the NotAvailable component.
        /// </summary>
        public const string NotAvailable = "NotAvailable";
        /// <summary>
        /// The BrowseName for the NotExecuting component.
        /// </summary>
        public const string NotExecuting = "NotExecuting";
        /// <summary>
        /// The BrowseName for the NotWaitingForConfirm component.
        /// </summary>
        public const string NotWaitingForConfirm = "NotWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the NotWaitingForConfirmToWaitingForConfirm component.
        /// </summary>
        public const string NotWaitingForConfirmToWaitingForConfirm = "NotWaitingForConfirmToWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the NotWaitingForPowerCycle component.
        /// </summary>
        public const string NotWaitingForPowerCycle = "NotWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the NotWaitingForPowerCycleToWaitingForPowerCycle component.
        /// </summary>
        public const string NotWaitingForPowerCycleToWaitingForPowerCycle = "NotWaitingForPowerCycleToWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the NumberOfPartsIndicationType component.
        /// </summary>
        public const string NumberOfPartsIndicationType = "NumberOfPartsIndicationType";
        /// <summary>
        /// The BrowseName for the NumberOfUsagesIndicationType component.
        /// </summary>
        public const string NumberOfUsagesIndicationType = "NumberOfUsagesIndicationType";
        /// <summary>
        /// The BrowseName for the OffSpecAlarmType component.
        /// </summary>
        public const string OffSpecAlarmType = "OffSpecAlarmType";
        /// <summary>
        /// The BrowseName for the OneTimeCalibrationTargetCategoryType component.
        /// </summary>
        public const string OneTimeCalibrationTargetCategoryType = "OneTimeCalibrationTargetCategoryType";
        /// <summary>
        /// The BrowseName for the OnlineAccess component.
        /// </summary>
        public const string OnlineAccess = "OnlineAccess";
        /// <summary>
        /// The BrowseName for the Opc.Ua.Di component.
        /// </summary>
        public const string OpcUaDi_XmlSchema = "Opc.Ua.Di";
        /// <summary>
        /// The BrowseName for the OperationCycleCounter component.
        /// </summary>
        public const string OperationCycleCounter = "OperationCycleCounter";
        /// <summary>
        /// The BrowseName for the OperationDuration component.
        /// </summary>
        public const string OperationDuration = "OperationDuration";
        /// <summary>
        /// The BrowseName for the OperationMode component.
        /// </summary>
        public const string OperationMode = "OperationMode";
        /// <summary>
        /// The BrowseName for the OperationalConditions component.
        /// </summary>
        public const string OperationalConditions = "OperationalConditions";
        /// <summary>
        /// The BrowseName for the OutOfService component.
        /// </summary>
        public const string OutOfService = "OutOfService";
        /// <summary>
        /// The BrowseName for the PackageLoadingType component.
        /// </summary>
        public const string PackageLoadingType = "PackageLoadingType";
        /// <summary>
        /// The BrowseName for the ParameterResultDataType component.
        /// </summary>
        public const string ParameterResultDataType = "ParameterResultDataType";
        /// <summary>
        /// The BrowseName for the ParameterSet component.
        /// </summary>
        public const string ParameterSet = "ParameterSet";
        /// <summary>
        /// The BrowseName for the Parameters component.
        /// </summary>
        public const string Parameters = "Parameters";
        /// <summary>
        /// The BrowseName for the PatchIdentifiers component.
        /// </summary>
        public const string PatchIdentifiers = "PatchIdentifiers";
        /// <summary>
        /// The BrowseName for the PendingVersion component.
        /// </summary>
        public const string PendingVersion = "PendingVersion";
        /// <summary>
        /// The BrowseName for the PercentComplete component.
        /// </summary>
        public const string PercentComplete = "PercentComplete";
        /// <summary>
        /// The BrowseName for the PermittedMode component.
        /// </summary>
        public const string PermittedMode = "PermittedMode";
        /// <summary>
        /// The BrowseName for the PowerCycle component.
        /// </summary>
        public const string PowerCycle = "PowerCycle";
        /// <summary>
        /// The BrowseName for the PowerCycleStateMachineType component.
        /// </summary>
        public const string PowerCycleStateMachineType = "PowerCycleStateMachineType";
        /// <summary>
        /// The BrowseName for the PowerOnDuration component.
        /// </summary>
        public const string PowerOnDuration = "PowerOnDuration";
        /// <summary>
        /// The BrowseName for the Prepare component.
        /// </summary>
        public const string Prepare = "Prepare";
        /// <summary>
        /// The BrowseName for the PrepareForUpdate component.
        /// </summary>
        public const string PrepareForUpdate = "PrepareForUpdate";
        /// <summary>
        /// The BrowseName for the PrepareForUpdateStateMachineType component.
        /// </summary>
        public const string PrepareForUpdateStateMachineType = "PrepareForUpdateStateMachineType";
        /// <summary>
        /// The BrowseName for the PreparedForUpdate component.
        /// </summary>
        public const string PreparedForUpdate = "PreparedForUpdate";
        /// <summary>
        /// The BrowseName for the PreparedForUpdateToResuming component.
        /// </summary>
        public const string PreparedForUpdateToResuming = "PreparedForUpdateToResuming";
        /// <summary>
        /// The BrowseName for the Preparing component.
        /// </summary>
        public const string Preparing = "Preparing";
        /// <summary>
        /// The BrowseName for the PreparingToIdle component.
        /// </summary>
        public const string PreparingToIdle = "PreparingToIdle";
        /// <summary>
        /// The BrowseName for the PreparingToPreparedForUpdate component.
        /// </summary>
        public const string PreparingToPreparedForUpdate = "PreparingToPreparedForUpdate";
        /// <summary>
        /// The BrowseName for the Processing component.
        /// </summary>
        public const string Processing = "Processing";
        /// <summary>
        /// The BrowseName for the ProductCode component.
        /// </summary>
        public const string ProductCode = "ProductCode";
        /// <summary>
        /// The BrowseName for the ProductInstanceUri component.
        /// </summary>
        public const string ProductInstanceUri = "ProductInstanceUri";
        /// <summary>
        /// The BrowseName for the ProtocolSupport component.
        /// </summary>
        public const string ProtocolSupport = "ProtocolSupport";
        /// <summary>
        /// The BrowseName for the ProtocolType component.
        /// </summary>
        public const string ProtocolType = "ProtocolType";
        /// <summary>
        /// The BrowseName for the Quality component.
        /// </summary>
        public const string Quality = "Quality";
        /// <summary>
        /// The BrowseName for the ReleaseDate component.
        /// </summary>
        public const string ReleaseDate = "ReleaseDate";
        /// <summary>
        /// The BrowseName for the RemainingLockTime component.
        /// </summary>
        public const string RemainingLockTime = "RemainingLockTime";
        /// <summary>
        /// The BrowseName for the RenewLock component.
        /// </summary>
        public const string RenewLock = "RenewLock";
        /// <summary>
        /// The BrowseName for the ResetCondition component.
        /// </summary>
        public const string ResetCondition = "ResetCondition";
        /// <summary>
        /// The BrowseName for the ResetStatistics component.
        /// </summary>
        public const string ResetStatistics = "ResetStatistics";
        /// <summary>
        /// The BrowseName for the Resolution component.
        /// </summary>
        public const string Resolution = "Resolution";
        /// <summary>
        /// The BrowseName for the Resume component.
        /// </summary>
        public const string Resume = "Resume";
        /// <summary>
        /// The BrowseName for the Resuming component.
        /// </summary>
        public const string Resuming = "Resuming";
        /// <summary>
        /// The BrowseName for the ResumingToIdle component.
        /// </summary>
        public const string ResumingToIdle = "ResumingToIdle";
        /// <summary>
        /// The BrowseName for the ReusableCalibrationTargetCategoryType component.
        /// </summary>
        public const string ReusableCalibrationTargetCategoryType = "ReusableCalibrationTargetCategoryType";
        /// <summary>
        /// The BrowseName for the ReusableDeviceCalibrationTargetCategoryType component.
        /// </summary>
        public const string ReusableDeviceCalibrationTargetCategoryType = "ReusableDeviceCalibrationTargetCategoryType";
        /// <summary>
        /// The BrowseName for the RevisionCounter component.
        /// </summary>
        public const string RevisionCounter = "RevisionCounter";
        /// <summary>
        /// The BrowseName for the SerialNumber component.
        /// </summary>
        public const string SerialNumber = "SerialNumber";
        /// <summary>
        /// The BrowseName for the Setup component.
        /// </summary>
        public const string Setup = "Setup";
        /// <summary>
        /// The BrowseName for the SignalColor component.
        /// </summary>
        public const string SignalColor = "SignalColor";
        /// <summary>
        /// The BrowseName for the SignalMode component.
        /// </summary>
        public const string SignalMode = "SignalMode";
        /// <summary>
        /// The BrowseName for the SignalModeLight component.
        /// </summary>
        public const string SignalModeLight = "SignalModeLight";
        /// <summary>
        /// The BrowseName for the SignalOn component.
        /// </summary>
        public const string SignalOn = "SignalOn";
        /// <summary>
        /// The BrowseName for the SoftwareLoadingType component.
        /// </summary>
        public const string SoftwareLoadingType = "SoftwareLoadingType";
        /// <summary>
        /// The BrowseName for the SoftwareReleaseDate component.
        /// </summary>
        public const string SoftwareReleaseDate = "SoftwareReleaseDate";
        /// <summary>
        /// The BrowseName for the SoftwareRevision component.
        /// </summary>
        public const string SoftwareRevision = "SoftwareRevision";
        /// <summary>
        /// The BrowseName for the SoftwareType component.
        /// </summary>
        public const string SoftwareType = "SoftwareType";
        /// <summary>
        /// The BrowseName for the SoftwareUpdateType component.
        /// </summary>
        public const string SoftwareUpdateType = "SoftwareUpdateType";
        /// <summary>
        /// The BrowseName for the SoftwareVersionFileType component.
        /// </summary>
        public const string SoftwareVersionFileType = "SoftwareVersionFileType";
        /// <summary>
        /// The BrowseName for the SoftwareVersionType component.
        /// </summary>
        public const string SoftwareVersionType = "SoftwareVersionType";
        /// <summary>
        /// The BrowseName for the StackElementAcousticType component.
        /// </summary>
        public const string StackElementAcousticType = "StackElementAcousticType";
        /// <summary>
        /// The BrowseName for the StackElementLightType component.
        /// </summary>
        public const string StackElementLightType = "StackElementLightType";
        /// <summary>
        /// The BrowseName for the StackElementType component.
        /// </summary>
        public const string StackElementType = "StackElementType";
        /// <summary>
        /// The BrowseName for the StackLevel component.
        /// </summary>
        public const string StackLevel = "StackLevel";
        /// <summary>
        /// The BrowseName for the StackLevelType component.
        /// </summary>
        public const string StackLevelType = "StackLevelType";
        /// <summary>
        /// The BrowseName for the StackRunning component.
        /// </summary>
        public const string StackRunning = "StackRunning";
        /// <summary>
        /// The BrowseName for the StackRunningType component.
        /// </summary>
        public const string StackRunningType = "StackRunningType";
        /// <summary>
        /// The BrowseName for the StacklightMode component.
        /// </summary>
        public const string StacklightMode = "StacklightMode";
        /// <summary>
        /// The BrowseName for the StacklightOperationMode component.
        /// </summary>
        public const string StacklightOperationMode = "StacklightOperationMode";
        /// <summary>
        /// The BrowseName for the StacklightType component.
        /// </summary>
        public const string StacklightType = "StacklightType";
        /// <summary>
        /// The BrowseName for the StartTime component.
        /// </summary>
        public const string StartTime = "StartTime";
        /// <summary>
        /// The BrowseName for the StartValue component.
        /// </summary>
        public const string StartValue = "StartValue";
        /// <summary>
        /// The BrowseName for the SubstanceVolumeIndicationType component.
        /// </summary>
        public const string SubstanceVolumeIndicationType = "SubstanceVolumeIndicationType";
        /// <summary>
        /// The BrowseName for the SupportedTypes component.
        /// </summary>
        public const string SupportedTypes = "SupportedTypes";
        /// <summary>
        /// The BrowseName for the TargetMode component.
        /// </summary>
        public const string TargetMode = "TargetMode";
        /// <summary>
        /// The BrowseName for the TimeIndicationType component.
        /// </summary>
        public const string TimeIndicationType = "TimeIndicationType";
        /// <summary>
        /// The BrowseName for the TopologyElementType component.
        /// </summary>
        public const string TopologyElementType = "TopologyElementType";
        /// <summary>
        /// The BrowseName for the TransferFromDevice component.
        /// </summary>
        public const string TransferFromDevice = "TransferFromDevice";
        /// <summary>
        /// The BrowseName for the TransferResultDataDataType component.
        /// </summary>
        public const string TransferResultDataDataType = "TransferResultDataDataType";
        /// <summary>
        /// The BrowseName for the TransferResultErrorDataType component.
        /// </summary>
        public const string TransferResultErrorDataType = "TransferResultErrorDataType";
        /// <summary>
        /// The BrowseName for the TransferServicesType component.
        /// </summary>
        public const string TransferServicesType = "TransferServicesType";
        /// <summary>
        /// The BrowseName for the TransferToDevice component.
        /// </summary>
        public const string TransferToDevice = "TransferToDevice";
        /// <summary>
        /// The BrowseName for the TypeDictionary component.
        /// </summary>
        public const string TypeDictionary_XmlSchema = "TypeDictionary";
        /// <summary>
        /// The BrowseName for the UIElement component.
        /// </summary>
        public const string UIElement = "UIElement";
        /// <summary>
        /// The BrowseName for the UIElementType component.
        /// </summary>
        public const string UIElementType = "UIElementType";
        /// <summary>
        /// The BrowseName for the UpdateBehavior component.
        /// </summary>
        public const string UpdateBehavior = "UpdateBehavior";
        /// <summary>
        /// The BrowseName for the UpdateKey component.
        /// </summary>
        public const string UpdateKey = "UpdateKey";
        /// <summary>
        /// The BrowseName for the UpdateStatus component.
        /// </summary>
        public const string UpdateStatus = "UpdateStatus";
        /// <summary>
        /// The BrowseName for the ValidateFiles component.
        /// </summary>
        public const string ValidateFiles = "ValidateFiles";
        /// <summary>
        /// The BrowseName for the VendorErrorCode component.
        /// </summary>
        public const string VendorErrorCode = "VendorErrorCode";
        /// <summary>
        /// The BrowseName for the WaitingForConfirm component.
        /// </summary>
        public const string WaitingForConfirm = "WaitingForConfirm";
        /// <summary>
        /// The BrowseName for the WaitingForConfirmToNotWaitingForConfirm component.
        /// </summary>
        public const string WaitingForConfirmToNotWaitingForConfirm = "WaitingForConfirmToNotWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the WaitingForPowerCycle component.
        /// </summary>
        public const string WaitingForPowerCycle = "WaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the WaitingForPowerCycleToNotWaitingForPowerCycle component.
        /// </summary>
        public const string WaitingForPowerCycleToNotWaitingForPowerCycle = "WaitingForPowerCycleToNotWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the WarningValues component.
        /// </summary>
        public const string WarningValues = "WarningValues";
        /// <summary>
        /// The BrowseName for the WindowDuration component.
        /// </summary>
        public const string WindowDuration = "WindowDuration";
        /// <summary>
        /// The BrowseName for the WindowNumberOfValues component.
        /// </summary>
        public const string WindowNumberOfValues = "WindowNumberOfValues";
        /// <summary>
        /// The BrowseName for the WriteBlockSize component.
        /// </summary>
        public const string WriteBlockSize = "WriteBlockSize";
        /// <summary>
        /// The BrowseName for the WriteTimeout component.
        /// </summary>
        public const string WriteTimeout = "WriteTimeout";
        /// <summary>
        /// The BrowseName for the YearOfConstruction component.
        /// </summary>
        public const string YearOfConstruction = "YearOfConstruction";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/DI/ component.
        /// </summary>
        public const string OPCUADINamespaceMetadata = "http://opcfoundation.org/UA/DI/";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/IA/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_IA_ = "http://opcfoundation.org/UA/IA/";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/Machinery/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_Machinery_ = "http://opcfoundation.org/UA/Machinery/";
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the DI namespace.
        /// </summary>
        public const string DI = "http://opcfoundation.org/UA/DI/";

        /// <summary>
        /// The URI for the DIXsd namespace.
        /// </summary>
        public const string DIXsd = "http://opcfoundation.org/UA/DI/Types.xsd";

        /// <summary>
        /// The URI for the Machinery namespace.
        /// </summary>
        public const string Machinery = "http://opcfoundation.org/UA/Machinery/";

        /// <summary>
        /// The URI for the MachineryXsd namespace.
        /// </summary>
        public const string MachineryXsd = "http://opcfoundation.org/UA/Machinery/Types.xsd";

        /// <summary>
        /// The URI for the IA namespace.
        /// </summary>
        public const string IA = "http://opcfoundation.org/UA/IA/";

        /// <summary>
        /// The URI for the IAXsd namespace.
        /// </summary>
        public const string IAXsd = "http://opcfoundation.org/UA/IA/Types.xsd";
    }
    #endregion
}

