/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/IA/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;
using UnifiedAutomation.UaBase;
using System.Diagnostics;

namespace OpcUa.IA
{
    #region LevelDisplayMode
    /// <summary>
    /// https://reference.opcfoundation.org/v105/IA/v102/docs/5.3.2
    /// </summary>
    [DataContract(Namespace = OpcUa.IA.Namespaces.IAXsd)]
    public enum LevelDisplayMode
    {
        /// <summary>
        /// Uses dimming to display fractions.
        /// </summary>
        [EnumMember(Value = "Dimmed_0")]
        Dimmed = 0,
        /// <summary>
        /// Uses blinking to display fractions.
        /// </summary>
        [EnumMember(Value = "Blinking_1")]
        Blinking = 1,
        /// <summary>
        /// Display fractions in a way not defined in this version of the specification.
        /// </summary>
        [EnumMember(Value = "Other_2")]
        Other = 2,
    }

    #region LevelDisplayModeCollection Class
    /// <summary>
    /// A collection of LevelDisplayMode objects.
    /// </summary>
    [CollectionDataContract]
    public partial class LevelDisplayModeCollection : List<LevelDisplayMode>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public LevelDisplayModeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public LevelDisplayModeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public LevelDisplayModeCollection(IEnumerable<LevelDisplayMode> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator LevelDisplayModeCollection(LevelDisplayMode[] values)
        {
            if (values != null)
            {
                return new LevelDisplayModeCollection(values);
            }

            return new LevelDisplayModeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator LevelDisplayMode[](LevelDisplayModeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            LevelDisplayModeCollection clone = new LevelDisplayModeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((LevelDisplayMode)TypeUtils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region SignalColor
    /// <summary>
    /// https://reference.opcfoundation.org/v105/IA/v102/docs/5.3.3
    /// </summary>
    [DataContract(Namespace = OpcUa.IA.Namespaces.IAXsd)]
    public enum SignalColor
    {
        /// <summary>
        /// Element is disabled.
        /// </summary>
        [EnumMember(Value = "Off_0")]
        Off = 0,
        /// <summary>
        /// This value indicates a red lamp colour.
        /// </summary>
        [EnumMember(Value = "Red_1")]
        Red = 1,
        /// <summary>
        /// This value indicates a green lamp colour.
        /// </summary>
        [EnumMember(Value = "Green_2")]
        Green = 2,
        /// <summary>
        /// This value indicates a blue lamp colour.
        /// </summary>
        [EnumMember(Value = "Blue_3")]
        Blue = 3,
        /// <summary>
        /// This value indicates a yellow lamp colour (R+G).
        /// </summary>
        [EnumMember(Value = "Yellow_4")]
        Yellow = 4,
        /// <summary>
        /// This value indicates a purple lamp colour (R+B).
        /// </summary>
        [EnumMember(Value = "Purple_5")]
        Purple = 5,
        /// <summary>
        /// This value indicates a cyan lamp colour (G+B).
        /// </summary>
        [EnumMember(Value = "Cyan_6")]
        Cyan = 6,
        /// <summary>
        /// This value indicates a white lamp colour (R+G+B).
        /// </summary>
        [EnumMember(Value = "White_7")]
        White = 7,
    }

    #region SignalColorCollection Class
    /// <summary>
    /// A collection of SignalColor objects.
    /// </summary>
    [CollectionDataContract]
    public partial class SignalColorCollection : List<SignalColor>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SignalColorCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SignalColorCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SignalColorCollection(IEnumerable<SignalColor> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SignalColorCollection(SignalColor[] values)
        {
            if (values != null)
            {
                return new SignalColorCollection(values);
            }

            return new SignalColorCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SignalColor[](SignalColorCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            SignalColorCollection clone = new SignalColorCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SignalColor)TypeUtils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region SignalModeLight
    /// <summary>
    /// https://reference.opcfoundation.org/v105/IA/v102/docs/5.3.4
    /// </summary>
    [DataContract(Namespace = OpcUa.IA.Namespaces.IAXsd)]
    public enum SignalModeLight
    {
        /// <summary>
        /// This value indicates a continuous light.
        /// </summary>
        [EnumMember(Value = "Continuous_0")]
        Continuous = 0,
        /// <summary>
        /// This value indicates a blinking light (blinking in regular intervals with equally long on and off times).
        /// </summary>
        [EnumMember(Value = "Blinking_1")]
        Blinking = 1,
        /// <summary>
        /// This value indicates a flashing light (blinking in intervals with longer off times than on times, per interval multiple on times are possible).
        /// </summary>
        [EnumMember(Value = "Flashing_2")]
        Flashing = 2,
        /// <summary>
        /// The light is handled in a way not defined in this version of the specification.
        /// </summary>
        [EnumMember(Value = "Other_3")]
        Other = 3,
    }

    #region SignalModeLightCollection Class
    /// <summary>
    /// A collection of SignalModeLight objects.
    /// </summary>
    [CollectionDataContract]
    public partial class SignalModeLightCollection : List<SignalModeLight>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SignalModeLightCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SignalModeLightCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SignalModeLightCollection(IEnumerable<SignalModeLight> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SignalModeLightCollection(SignalModeLight[] values)
        {
            if (values != null)
            {
                return new SignalModeLightCollection(values);
            }

            return new SignalModeLightCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SignalModeLight[](SignalModeLightCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            SignalModeLightCollection clone = new SignalModeLightCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SignalModeLight)TypeUtils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region StacklightOperationMode
    /// <summary>
    /// https://reference.opcfoundation.org/v105/IA/v102/docs/5.3.1
    /// </summary>
    [DataContract(Namespace = OpcUa.IA.Namespaces.IAXsd)]
    public enum StacklightOperationMode
    {
        /// <summary>
        /// Stacklight is used as stack of individual lights
        /// </summary>
        [EnumMember(Value = "Segmented_0")]
        Segmented = 0,
        /// <summary>
        /// Stacklight is used as level meter
        /// </summary>
        [EnumMember(Value = "Levelmeter_1")]
        Levelmeter = 1,
        /// <summary>
        /// The whole stack acts as a running light
        /// </summary>
        [EnumMember(Value = "Running_Light_2")]
        Running_Light = 2,
        /// <summary>
        /// Stacklight is used in a way not defined in this version of the specification
        /// </summary>
        [EnumMember(Value = "Other_3")]
        Other = 3,
    }

    #region StacklightOperationModeCollection Class
    /// <summary>
    /// A collection of StacklightOperationMode objects.
    /// </summary>
    [CollectionDataContract]
    public partial class StacklightOperationModeCollection : List<StacklightOperationMode>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public StacklightOperationModeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public StacklightOperationModeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public StacklightOperationModeCollection(IEnumerable<StacklightOperationMode> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator StacklightOperationModeCollection(StacklightOperationMode[] values)
        {
            if (values != null)
            {
                return new StacklightOperationModeCollection(values);
            }

            return new StacklightOperationModeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator StacklightOperationMode[](StacklightOperationModeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            StacklightOperationModeCollection clone = new StacklightOperationModeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((StacklightOperationMode)TypeUtils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion


    #region EncodeableTypes
    /// <summary>
    /// Contains a method for registering all encodeable types of the namespace.
    /// </summary>
    public class EncodeableTypes
    {
        /// <summary>
        /// Register all encodeable types of the namespace at the communication stack.
        /// The Decoder will decode the registered types.
        /// </summary>
        public static void RegisterEncodeableTypes(MessageContext context)
        {
        }
    }
    #endregion
}
