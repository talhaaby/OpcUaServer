/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/Machinery/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;
using UnifiedAutomation.MachineDemoServer.Models.Jobs;
using System.Text;
using System.Threading;
using System.IO;
using System.Reflection;
using System.Text.Json;

using System.ServiceModel;
using Opc.Ua.Bindings;
using OpcUa.Server;
using Org.BouncyCastle.Asn1.Mozilla;
using System.Linq.Expressions;
using System.Reflection.Metadata;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml;
using Opc.Server;







namespace OpcUa.Server
{


    public partial class ServerNodeManager : BaseNodeManager
    {

        public ushort InstanceNamespaceIndex { get; set; }
        public ushort TypeNamespaceIndex { get; set; }
        public class SystemFunction
        {
            public string BrowseName;
        }


        public override void Startup()
        {



            try
            {
                base.Startup();
                Console.WriteLine("Starting JobControl.");

               

                TypeNamespaceIndex = AddNamespaceUri(OpcUa.Server.Namespaces.ISA95JOBCONTROL_V2);
                InstanceNamespaceIndex = AddNamespaceUri("http://opcfoundation.org/UA/ISA95-JOBCONTROL_V2/");
                Console.WriteLine("Loading the Controller Model.");
                ImportUaNodeset(Assembly.GetEntryAssembly(), "Opc.Ua.ISA95-JOBCONTROL_V2.NodeSet2.xml");


                XmlParser parser = new XmlParser(this, InstanceNamespaceIndex); // Pass this instance and namespace
                parser.ParseXmlFile("Opc.Ua.ISA95-JOBCONTROL_V2.NodeSet2.xml");

            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to stop JobControl " + e.Message);
            }
        }

        /// <summary>
        /// Called when the node manager is stopped.
        /// </summary>
        public override void Shutdown()
        {
            try
            {
                Console.WriteLine("Stopping JobControl.");

                // TBD 

                base.Shutdown();
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to stop JobControl " + e.Message);
            }
        }



        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <returns></returns>
        /// [Forward Method to Method Handler]
        protected override CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            MethodHandle methodHandle)
        {
            if (methodHandle.MethodData is SystemFunction)
            {
                return DispatchControllerMethod;
            }

            return null;
        }

        /// [Forward Method to Method Handler]

        /// <summary>
        /// Dispatches a method to the controller.
        /// </summary>
        /// [Implement Method]
        private UnifiedAutomation.UaBase.StatusCode DispatchControllerMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<UnifiedAutomation.UaBase.Variant> inputArguments,
            List<UnifiedAutomation.UaBase.StatusCode> inputArgumentResults,
            List<UnifiedAutomation.UaBase.Variant> outputArguments)
        {
            SystemFunction data = methodHandle.MethodData as SystemFunction;

            if (data != null)
            {
                
                    if(data.BrowseName == "RequestJobResponseByJobOrderID")
                        {
                            return Test();
                        }
                    else if (data.BrowseName == "RequestJobResponseByJobOrderState")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "ReceiveJobResponse")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Abort")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Cancel")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Clear")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Pause")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Resume")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "RevokeStart")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Start")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Stop")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Store")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "StoreAndStart")
                    {
                        return Test();
                    }
                    else if (data.BrowseName == "Update")
                    {
                        return Test();
                    }
            }

            return UnifiedAutomation.UaBase.StatusCodes.BadNotImplemented;
            


        }

      
        UnifiedAutomation.UaBase.StatusCode Test()

        {
            return new UnifiedAutomation.UaBase.StatusCode() ;
        }









        #region Constructor
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        internal ServerNodeManager(ServerManager server) : base(server)
        {
        }
        #endregion

        #region IDisposable
        /// <summary>
        /// An overrideable version of the Dispose.
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TBD
            }
        }
        #endregion


    }

}

