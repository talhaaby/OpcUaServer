/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/Machinery/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/
/*

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.IO;
using System.Reflection;
using System.Text.Json;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;
using static UnifiedAutomation.MachineDemoServer.JobData;

namespace OpcUa.JobControl
{
    internal partial class JobControlManager : BaseNodeManager
    {
        #region Constructor
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>



        // Method to populate a JobOrderNode with JSON data
    


        public JobControlManager(ServerManager server) : base(server)
        {

        }
        #endregion

        #region IDisposable
        /// <summary>
        /// An overrideable version of the Dispose.
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TBD
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Called when the node manager is started.
        /// </summary>
        public override void Startup()
        {
            try
            {
                Console.WriteLine("Starting JobControlManager.");
        

                DefaultNamespaceIndex = AddNamespaceUri("http://opcfoundation.org/UA/ISA95-JOBCONTROL_V2/");

                Console.WriteLine("Loading the JobControlManager Model.");
                ImportUaNodeset(Assembly.GetEntryAssembly(), "opc.ua.isa95-jobcontrol.nodeset2.xml");

                // Load and populate Job Orders from JSON file
               // LoadJobOrdersFromJson();
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to start JobControlManager: " + e.Message);
            }
        }
        /// <summary>
        /// Called when the node manager is stopped.
        /// </summary>
        public override void Shutdown()
        {
            try
            {
                Console.WriteLine("Stopping JobControlManager.");

                // TBD
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to stop JobControlManager " + e.Message);
            }
        }

        #endregion

        #region Private Methods
        
        #endregion
        
        #region Private Fields
        #endregion

    }
}
*/
using System;
using System.Collections.Generic;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;
using static UnifiedAutomation.MachineDemoServer.JobData;

namespace OpcUa.JobControl
{
    internal partial class JobControlManager : 
    {
        private class Job
        {
            public string JobId { get; set; }
            public JobStatusEnum Status { get; set; }
            public Dictionary<string, Variant> Parameters { get; set; }
        }

        private Dictionary<string, Job> _activeJobs = new Dictionary<string, Job>();
        private const string JobControlNamespaceUri = "http://opcfoundation.org/UA/ISA95-JOBCONTROL_V2/";

        // JobStatusEnum (from the NodeSet)
        private enum JobStatusEnum { Ready = 6, Active = 7, Complete = 8, Aborted = 23, Stopping = 24 }

        // NodeIds from the NodeSet (replace with your actual NodeIds)
        private NodeId JobControlTypeNodeId = new NodeId("JobControlType", 2); // NamespaceIndex 2 for ISA95
        private NodeId ISA95JobOrderReceiverObjectTypeNodeId = new NodeId("ISA95JobOrderReceiverObjectType", 2);

        // Constructor
        public JobControlManager(ServerManager server) : base(server)
        {
        }

        // ... (Dispose, Startup, Shutdown methods remain the same) ...

        public override void OnRootNodeManagerStarted(RootNodeManager nodeManager)
        {
            base.OnRootNodeManagerStarted(nodeManager);

            // Manually create the JobControlType and ISA95JobOrderReceiverObjectType objects
            var jobControlType = new BaseObjectState(null);
            jobControlType.NodeId = JobControlTypeNodeId;
            jobControlType.BrowseName = new QualifiedName("JobControlType", 2);
            jobControlType.DisplayName = new LocalizedText("JobControlType");
            jobControlType.TypeDefinitionId = ObjectTypeIds.BaseObjectType;

            var jobOrderReceiver = new BaseObjectState(jobControlType);
            jobOrderReceiver.NodeId = ISA95JobOrderReceiverObjectTypeNodeId;
            jobOrderReceiver.BrowseName = new QualifiedName("JobOrderReceiver", 2);
            jobOrderReceiver.DisplayName = new LocalizedText("JobOrderReceiver");
            jobOrderReceiver.TypeDefinitionId = ObjectTypeIds.BaseObjectType;

            // Add references
            jobControlType.AddReference(ReferenceTypeIds.HasComponent, true, jobOrderReceiver.NodeId);

            // Add the objects to the server's address space
            Server.AddRootNode(jobControlType);
            Server.AddNode(jobOrderReceiver);

            // Create and attach the methods
            var startMethod = CreateMethod(jobOrderReceiver, "Start", Start_OnCall);
            var stopMethod = CreateMethod(jobOrderReceiver, "Stop", Stop_OnCall);
            var storeMethod = CreateMethod(jobOrderReceiver, "Store", Store_OnCall);
            var storeAndStartMethod = CreateMethod(jobOrderReceiver, "StoreAndStart", StoreAndStart_OnCall);
            var pauseMethod = CreateMethod(jobOrderReceiver, "Pause", Pause_OnCall);
            var resumeMethod = CreateMethod(jobOrderReceiver, "Resume", Resume_OnCall);
            var abortMethod = CreateMethod(jobOrderReceiver, "Abort", Abort_OnCall);
            var cancelMethod = CreateMethod(jobOrderReceiver, "Cancel", Cancel_OnCall);
            var clearMethod = CreateMethod(jobOrderReceiver, "Clear", Clear_OnCall);
            var revokeStartMethod = CreateMethod(jobOrderReceiver, "RevokeStart", RevokeStart_OnCall);
            var updateMethod = CreateMethod(jobOrderReceiver, "Update", Update_OnCall);
        }

        // Helper method to create a MethodNode
        private Method CreateMethod(BaseObjectState parent, string browseName, EventHandler<MethodEventArgs> onCallHandler)
        {
            var method = new Method(parent, new NodeId(browseName, DefaultNamespaceIndex));
            method.DisplayName = new LocalizedText(browseName);
            method.OnCallMethod += onCallHandler;
            AddPredefinedNode(SystemContext, method);
            return method;
        }

        // ... (Method implementations) ...

        // Example implementation for the Start method
        private void Start_OnCall(object sender, MethodEventArgs e)
        {
            try
            {
                string jobId = (string)e.InputArguments[0].Value; // jobName input argument
                LocalizedText comment = (LocalizedText)e.InputArguments[1].Value; // comment input argument

                if (_activeJobs.ContainsKey(jobId))
                {
                    e.Error = StatusCodes.BadAlreadyExists; // Job already exists
                    return;
                }

                // ... (Your job start logic) ...

                // Set output arguments
                e.OutputArguments[0] = new Variant(StatusCodes.Good);
            }
            catch (Exception ex)
            {
                e.Error = StatusCodes.BadUnexpectedError;
                Console.WriteLine($"Error in Start_OnCall: {ex.Message}");
            }
        }

        // ... (Implementations for other methods: Store, StoreAndStart, Stop, Pause, Resume, Abort, Cancel, Clear, RevokeStart, Update) ...
    }
}




