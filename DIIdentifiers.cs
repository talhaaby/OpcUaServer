/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/DI/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using UnifiedAutomation.UaBase;

namespace OpcUa.DI
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class DataTypes
    {
        /// <summary>
        /// The identifier for the DeviceHealthEnumeration DataType.
        /// </summary>
        public const uint DeviceHealthEnumeration = 6244;

        /// <summary>
        /// The identifier for the SoftwareVersionFileType DataType.
        /// </summary>
        public const uint SoftwareVersionFileType = 331;

        /// <summary>
        /// The identifier for the UpdateBehavior DataType.
        /// </summary>
        public const uint UpdateBehavior = 333;

        /// <summary>
        /// The identifier for the FetchResultDataType DataType.
        /// </summary>
        public const uint FetchResultDataType = 6522;

        /// <summary>
        /// The identifier for the TransferResultDataDataType DataType.
        /// </summary>
        public const uint TransferResultDataDataType = 15889;

        /// <summary>
        /// The identifier for the TransferResultErrorDataType DataType.
        /// </summary>
        public const uint TransferResultErrorDataType = 15888;

        /// <summary>
        /// The identifier for the ParameterResultDataType DataType.
        /// </summary>
        public const uint ParameterResultDataType = 6525;

    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Objects
    {
        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint IDeviceHealthType_DeviceHealthAlarms = 15053;

        /// <summary>
        /// The identifier for the DeviceTypeImage Object.
        /// </summary>
        public const uint ISupportInfoType_DeviceTypeImage = 15055;

        /// <summary>
        /// The identifier for the Documentation Object.
        /// </summary>
        public const uint ISupportInfoType_Documentation = 15057;

        /// <summary>
        /// The identifier for the DocumentationFiles Object.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles = 27;

        /// <summary>
        /// The identifier for the &lt;DocumentFileId&gt; Object.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId = 28;

        /// <summary>
        /// The identifier for the ImageSet Object.
        /// </summary>
        public const uint ISupportInfoType_ImageSet = 15061;

        /// <summary>
        /// The identifier for the ProtocolSupport Object.
        /// </summary>
        public const uint ISupportInfoType_ProtocolSupport = 15059;

        /// <summary>
        /// The identifier for the &lt;GroupIdentifier&gt; Object.
        /// </summary>
        public const uint FunctionalGroupType_GroupIdentifier = 6027;

        /// <summary>
        /// The identifier for the &lt;ObjectIdentifier&gt; Object.
        /// </summary>
        public const uint ConfigurableObjectType_ObjectIdentifier = 6026;

        /// <summary>
        /// The identifier for the SupportedTypes Object.
        /// </summary>
        public const uint ConfigurableObjectType_SupportedTypes = 5004;

        /// <summary>
        /// The identifier for the &lt;CPIdentifier&gt; Object.
        /// </summary>
        public const uint NetworkType_CPIdentifier = 6248;

        /// <summary>
        /// The identifier for the &lt;NetworkIdentifier&gt; Object.
        /// </summary>
        public const uint ConnectionPointType_NetworkIdentifier = 6599;

        /// <summary>
        /// The identifier for the &lt;ProfileIdentifier&gt; Object.
        /// </summary>
        public const uint NetworkType_ProfileIdentifier = 6596;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint NetworkType_Lock = 6294;

        /// <summary>
        /// The identifier for the &lt;ProfileIdentifier&gt; Object.
        /// </summary>
        public const uint ConnectionPointType_ProfileIdentifier = 6499;

        /// <summary>
        /// The identifier for the NetworkAddress Object.
        /// </summary>
        public const uint ConnectionPointType_NetworkAddress = 6354;

        /// <summary>
        /// The identifier for the NetworkAddress Object.
        /// </summary>
        public const uint NetworkType_CPIdentifier_NetworkAddress = 6292;

        /// <summary>
        /// The identifier for the FileSystem Object.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem = 194;

        /// <summary>
        /// The identifier for the FallbackVersion Object.
        /// </summary>
        public const uint CachedLoadingType_FallbackVersion = 188;

        /// <summary>
        /// The identifier for the PendingVersion Object.
        /// </summary>
        public const uint CachedLoadingType_PendingVersion = 187;

        /// <summary>
        /// The identifier for the CurrentVersion Object.
        /// </summary>
        public const uint PackageLoadingType_CurrentVersion = 139;

        /// <summary>
        /// The identifier for the FileTransfer Object.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer = 140;

        /// <summary>
        /// The identifier for the Confirmation Object.
        /// </summary>
        public const uint SoftwareUpdateType_Confirmation = 98;

        /// <summary>
        /// The identifier for the NotWaitingForConfirm Object.
        /// </summary>
        public const uint ConfirmationStateMachineType_NotWaitingForConfirm = 323;

        /// <summary>
        /// The identifier for the NotWaitingForConfirmToWaitingForConfirm Object.
        /// </summary>
        public const uint ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm = 327;

        /// <summary>
        /// The identifier for the WaitingForConfirm Object.
        /// </summary>
        public const uint ConfirmationStateMachineType_WaitingForConfirm = 325;

        /// <summary>
        /// The identifier for the WaitingForConfirmToNotWaitingForConfirm Object.
        /// </summary>
        public const uint ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm = 329;

        /// <summary>
        /// The identifier for the Installation Object.
        /// </summary>
        public const uint SoftwareUpdateType_Installation = 40;

        /// <summary>
        /// The identifier for the Error Object.
        /// </summary>
        public const uint InstallationStateMachineType_Error = 275;

        /// <summary>
        /// The identifier for the ErrorToIdle Object.
        /// </summary>
        public const uint InstallationStateMachineType_ErrorToIdle = 283;

        /// <summary>
        /// The identifier for the Idle Object.
        /// </summary>
        public const uint InstallationStateMachineType_Idle = 271;

        /// <summary>
        /// The identifier for the IdleToInstalling Object.
        /// </summary>
        public const uint InstallationStateMachineType_IdleToInstalling = 277;

        /// <summary>
        /// The identifier for the Installing Object.
        /// </summary>
        public const uint InstallationStateMachineType_Installing = 273;

        /// <summary>
        /// The identifier for the InstallingToError Object.
        /// </summary>
        public const uint InstallationStateMachineType_InstallingToError = 281;

        /// <summary>
        /// The identifier for the InstallingToIdle Object.
        /// </summary>
        public const uint InstallationStateMachineType_InstallingToIdle = 279;

        /// <summary>
        /// The identifier for the Loading Object.
        /// </summary>
        public const uint SoftwareUpdateType_Loading = 2;

        /// <summary>
        /// The identifier for the Parameters Object.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters = 122;

        /// <summary>
        /// The identifier for the PowerCycle Object.
        /// </summary>
        public const uint SoftwareUpdateType_PowerCycle = 76;

        /// <summary>
        /// The identifier for the NotWaitingForPowerCycle Object.
        /// </summary>
        public const uint PowerCycleStateMachineType_NotWaitingForPowerCycle = 299;

        /// <summary>
        /// The identifier for the NotWaitingForPowerCycleToWaitingForPowerCycle Object.
        /// </summary>
        public const uint PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle = 303;

        /// <summary>
        /// The identifier for the WaitingForPowerCycle Object.
        /// </summary>
        public const uint PowerCycleStateMachineType_WaitingForPowerCycle = 301;

        /// <summary>
        /// The identifier for the WaitingForPowerCycleToNotWaitingForPowerCycle Object.
        /// </summary>
        public const uint PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle = 305;

        /// <summary>
        /// The identifier for the PrepareForUpdate Object.
        /// </summary>
        public const uint SoftwareUpdateType_PrepareForUpdate = 4;

        /// <summary>
        /// The identifier for the Idle Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Idle = 231;

        /// <summary>
        /// The identifier for the IdleToPreparing Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_IdleToPreparing = 239;

        /// <summary>
        /// The identifier for the Preparing Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Preparing = 233;

        /// <summary>
        /// The identifier for the PreparedForUpdate Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparedForUpdate = 235;

        /// <summary>
        /// The identifier for the PreparedForUpdateToResuming Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparedForUpdateToResuming = 245;

        /// <summary>
        /// The identifier for the Resuming Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Resuming = 237;

        /// <summary>
        /// The identifier for the PreparingToIdle Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparingToIdle = 241;

        /// <summary>
        /// The identifier for the PreparingToPreparedForUpdate Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate = 243;

        /// <summary>
        /// The identifier for the ResumingToIdle Object.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_ResumingToIdle = 247;

        /// <summary>
        /// The identifier for the &lt;GroupIdentifier&gt; Object.
        /// </summary>
        public const uint TopologyElementType_GroupIdentifier = 6567;

        /// <summary>
        /// The identifier for the &lt;CPIdentifier&gt; Object.
        /// </summary>
        public const uint DeviceType_CPIdentifier = 6571;

        /// <summary>
        /// The identifier for the NetworkAddress Object.
        /// </summary>
        public const uint DeviceType_CPIdentifier_NetworkAddress = 6592;

        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint DeviceType_DeviceHealthAlarms = 15105;

        /// <summary>
        /// The identifier for the DeviceTypeImage Object.
        /// </summary>
        public const uint DeviceType_DeviceTypeImage = 6209;

        /// <summary>
        /// The identifier for the Documentation Object.
        /// </summary>
        public const uint DeviceType_Documentation = 6211;

        /// <summary>
        /// The identifier for the ImageSet Object.
        /// </summary>
        public const uint DeviceType_ImageSet = 6215;

        /// <summary>
        /// The identifier for the ProtocolSupport Object.
        /// </summary>
        public const uint DeviceType_ProtocolSupport = 6213;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint TopologyElementType_Identification = 6014;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint TopologyElementType_Lock = 6161;

        /// <summary>
        /// The identifier for the MethodSet Object.
        /// </summary>
        public const uint TopologyElementType_MethodSet = 5003;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint TopologyElementType_ParameterSet = 5002;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint FetchResultDataType_Encoding_DefaultBinary = 6551;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint FetchResultDataType_Encoding_DefaultJson = 15909;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint FetchResultDataType_Encoding_DefaultXml = 6535;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint TransferResultDataDataType_Encoding_DefaultBinary = 15892;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint TransferResultDataDataType_Encoding_DefaultJson = 15911;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint TransferResultDataDataType_Encoding_DefaultXml = 15901;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint TransferResultErrorDataType_Encoding_DefaultBinary = 15891;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint TransferResultErrorDataType_Encoding_DefaultJson = 15910;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint TransferResultErrorDataType_Encoding_DefaultXml = 15900;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint ParameterResultDataType_Encoding_DefaultBinary = 6554;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint ParameterResultDataType_Encoding_DefaultJson = 15912;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint ParameterResultDataType_Encoding_DefaultXml = 6538;

        /// <summary>
        /// The identifier for the DeviceSet Object.
        /// </summary>
        public const uint DeviceSet = 5001;

        /// <summary>
        /// The identifier for the DeviceFeatures Object.
        /// </summary>
        public const uint DeviceSet_DeviceFeatures = 15034;

        /// <summary>
        /// The identifier for the DeviceTopology Object.
        /// </summary>
        public const uint DeviceTopology = 6094;

        /// <summary>
        /// The identifier for the NetworkSet Object.
        /// </summary>
        public const uint NetworkSet = 6078;

        /// <summary>
        /// The identifier for the http://opcfoundation.org/UA/DI/ Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata = 15001;

    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the DeviceHealthDiagnosticAlarmType ObjectType.
        /// </summary>
        public const uint DeviceHealthDiagnosticAlarmType = 15143;

        /// <summary>
        /// The identifier for the CheckFunctionAlarmType ObjectType.
        /// </summary>
        public const uint CheckFunctionAlarmType = 15441;

        /// <summary>
        /// The identifier for the FailureAlarmType ObjectType.
        /// </summary>
        public const uint FailureAlarmType = 15292;

        /// <summary>
        /// The identifier for the MaintenanceRequiredAlarmType ObjectType.
        /// </summary>
        public const uint MaintenanceRequiredAlarmType = 15739;

        /// <summary>
        /// The identifier for the OffSpecAlarmType ObjectType.
        /// </summary>
        public const uint OffSpecAlarmType = 15590;

        /// <summary>
        /// The identifier for the IDeviceHealthType ObjectType.
        /// </summary>
        public const uint IDeviceHealthType = 15051;

        /// <summary>
        /// The identifier for the IOperationCounterType ObjectType.
        /// </summary>
        public const uint IOperationCounterType = 480;

        /// <summary>
        /// The identifier for the ISupportInfoType ObjectType.
        /// </summary>
        public const uint ISupportInfoType = 15054;

        /// <summary>
        /// The identifier for the ITagNameplateType ObjectType.
        /// </summary>
        public const uint ITagNameplateType = 15048;

        /// <summary>
        /// The identifier for the IVendorNameplateType ObjectType.
        /// </summary>
        public const uint IVendorNameplateType = 15035;

        /// <summary>
        /// The identifier for the BaseLifetimeIndicationType ObjectType.
        /// </summary>
        public const uint BaseLifetimeIndicationType = 473;

        /// <summary>
        /// The identifier for the DiameterIndicationType ObjectType.
        /// </summary>
        public const uint DiameterIndicationType = 478;

        /// <summary>
        /// The identifier for the LengthIndicationType ObjectType.
        /// </summary>
        public const uint LengthIndicationType = 477;

        /// <summary>
        /// The identifier for the NumberOfPartsIndicationType ObjectType.
        /// </summary>
        public const uint NumberOfPartsIndicationType = 475;

        /// <summary>
        /// The identifier for the NumberOfUsagesIndicationType ObjectType.
        /// </summary>
        public const uint NumberOfUsagesIndicationType = 476;

        /// <summary>
        /// The identifier for the SubstanceVolumeIndicationType ObjectType.
        /// </summary>
        public const uint SubstanceVolumeIndicationType = 479;

        /// <summary>
        /// The identifier for the TimeIndicationType ObjectType.
        /// </summary>
        public const uint TimeIndicationType = 474;

        /// <summary>
        /// The identifier for the ConfigurableObjectType ObjectType.
        /// </summary>
        public const uint ConfigurableObjectType = 1004;

        /// <summary>
        /// The identifier for the FunctionalGroupType ObjectType.
        /// </summary>
        public const uint FunctionalGroupType = 1005;

        /// <summary>
        /// The identifier for the LockingServicesType ObjectType.
        /// </summary>
        public const uint LockingServicesType = 6388;

        /// <summary>
        /// The identifier for the NetworkType ObjectType.
        /// </summary>
        public const uint NetworkType = 6247;

        /// <summary>
        /// The identifier for the ProtocolType ObjectType.
        /// </summary>
        public const uint ProtocolType = 1006;

        /// <summary>
        /// The identifier for the SoftwareLoadingType ObjectType.
        /// </summary>
        public const uint SoftwareLoadingType = 135;

        /// <summary>
        /// The identifier for the FileSystemLoadingType ObjectType.
        /// </summary>
        public const uint FileSystemLoadingType = 192;

        /// <summary>
        /// The identifier for the PackageLoadingType ObjectType.
        /// </summary>
        public const uint PackageLoadingType = 137;

        /// <summary>
        /// The identifier for the CachedLoadingType ObjectType.
        /// </summary>
        public const uint CachedLoadingType = 171;

        /// <summary>
        /// The identifier for the DirectLoadingType ObjectType.
        /// </summary>
        public const uint DirectLoadingType = 153;

        /// <summary>
        /// The identifier for the SoftwareUpdateType ObjectType.
        /// </summary>
        public const uint SoftwareUpdateType = 1;

        /// <summary>
        /// The identifier for the SoftwareVersionType ObjectType.
        /// </summary>
        public const uint SoftwareVersionType = 212;

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType ObjectType.
        /// </summary>
        public const uint ConfirmationStateMachineType = 307;

        /// <summary>
        /// The identifier for the InstallationStateMachineType ObjectType.
        /// </summary>
        public const uint InstallationStateMachineType = 249;

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType ObjectType.
        /// </summary>
        public const uint PowerCycleStateMachineType = 285;

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType ObjectType.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType = 213;

        /// <summary>
        /// The identifier for the TopologyElementType ObjectType.
        /// </summary>
        public const uint TopologyElementType = 1001;

        /// <summary>
        /// The identifier for the BlockType ObjectType.
        /// </summary>
        public const uint BlockType = 1003;

        /// <summary>
        /// The identifier for the ComponentType ObjectType.
        /// </summary>
        public const uint ComponentType = 15063;

        /// <summary>
        /// The identifier for the DeviceType ObjectType.
        /// </summary>
        public const uint DeviceType = 1002;

        /// <summary>
        /// The identifier for the SoftwareType ObjectType.
        /// </summary>
        public const uint SoftwareType = 15106;

        /// <summary>
        /// The identifier for the ConnectionPointType ObjectType.
        /// </summary>
        public const uint ConnectionPointType = 6308;

        /// <summary>
        /// The identifier for the TransferServicesType ObjectType.
        /// </summary>
        public const uint TransferServicesType = 6526;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the Close Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Close = 39;

        /// <summary>
        /// The identifier for the GetPosition Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition = 68;

        /// <summary>
        /// The identifier for the Open Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Open = 36;

        /// <summary>
        /// The identifier for the Read Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Read = 63;

        /// <summary>
        /// The identifier for the SetPosition Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition = 71;

        /// <summary>
        /// The identifier for the Write Method.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Write = 66;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint LockingServicesType_BreakLock = 6400;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint LockingServicesType_ExitLock = 6398;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint LockingServicesType_InitLock = 6393;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint LockingServicesType_RenewLock = 6396;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint NetworkType_Lock_BreakLock = 6306;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint NetworkType_Lock_ExitLock = 6304;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint NetworkType_Lock_InitLock = 6299;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint NetworkType_Lock_RenewLock = 6302;

        /// <summary>
        /// The identifier for the CreateDirectory Method.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateDirectory = 195;

        /// <summary>
        /// The identifier for the CreateFile Method.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateFile = 198;

        /// <summary>
        /// The identifier for the Delete Method.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_DeleteFileSystemObject = 201;

        /// <summary>
        /// The identifier for the MoveOrCopy Method.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_MoveOrCopy = 203;

        /// <summary>
        /// The identifier for the GetUpdateBehavior Method.
        /// </summary>
        public const uint FileSystemLoadingType_GetUpdateBehavior = 206;

        /// <summary>
        /// The identifier for the ValidateFiles Method.
        /// </summary>
        public const uint FileSystemLoadingType_ValidateFiles = 209;

        /// <summary>
        /// The identifier for the GetUpdateBehavior Method.
        /// </summary>
        public const uint CachedLoadingType_GetUpdateBehavior = 189;

        /// <summary>
        /// The identifier for the CloseAndCommit Method.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_CloseAndCommit = 148;

        /// <summary>
        /// The identifier for the GenerateFileForRead Method.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForRead = 142;

        /// <summary>
        /// The identifier for the GenerateFileForWrite Method.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForWrite = 145;

        /// <summary>
        /// The identifier for the Confirm Method.
        /// </summary>
        public const uint SoftwareUpdateType_Confirmation_Confirm = 112;

        /// <summary>
        /// The identifier for the Resume Method.
        /// </summary>
        public const uint SoftwareUpdateType_Installation_Resume = 61;

        /// <summary>
        /// The identifier for the CloseAndCommit Method.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_CloseAndCommit = 130;

        /// <summary>
        /// The identifier for the GenerateFileForRead Method.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForRead = 124;

        /// <summary>
        /// The identifier for the GenerateFileForWrite Method.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForWrite = 127;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint SoftwareUpdateType_PrepareForUpdate_Abort = 20;

        /// <summary>
        /// The identifier for the Prepare Method.
        /// </summary>
        public const uint SoftwareUpdateType_PrepareForUpdate_Prepare = 19;

        /// <summary>
        /// The identifier for the Confirm Method.
        /// </summary>
        public const uint ConfirmationStateMachineType_Confirm = 321;

        /// <summary>
        /// The identifier for the InstallFiles Method.
        /// </summary>
        public const uint InstallationStateMachineType_InstallFiles = 268;

        /// <summary>
        /// The identifier for the InstallSoftwarePackage Method.
        /// </summary>
        public const uint InstallationStateMachineType_InstallSoftwarePackage = 265;

        /// <summary>
        /// The identifier for the Resume Method.
        /// </summary>
        public const uint InstallationStateMachineType_Resume = 270;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Abort = 229;

        /// <summary>
        /// The identifier for the Prepare Method.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Prepare = 228;

        /// <summary>
        /// The identifier for the Resume Method.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Resume = 230;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint TopologyElementType_Lock_BreakLock = 6173;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint TopologyElementType_Lock_ExitLock = 6171;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint TopologyElementType_Lock_InitLock = 6166;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint TopologyElementType_Lock_RenewLock = 6169;

        /// <summary>
        /// The identifier for the FetchTransferResultData Method.
        /// </summary>
        public const uint TransferServicesType_FetchTransferResultData = 6531;

        /// <summary>
        /// The identifier for the TransferFromDevice Method.
        /// </summary>
        public const uint TransferServicesType_TransferFromDevice = 6529;

        /// <summary>
        /// The identifier for the TransferToDevice Method.
        /// </summary>
        public const uint TransferServicesType_TransferToDevice = 6527;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ReferenceTypes
    {
        /// <summary>
        /// The identifier for the ConnectsTo ReferenceType.
        /// </summary>
        public const uint ConnectsTo = 6030;

        /// <summary>
        /// The identifier for the ConnectsToParent ReferenceType.
        /// </summary>
        public const uint ConnectsToParent = 6467;

        /// <summary>
        /// The identifier for the IsOnline ReferenceType.
        /// </summary>
        public const uint IsOnline = 6031;

    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the EnumStrings Variable.
        /// </summary>
        public const uint DeviceHealthEnumeration_EnumStrings = 6450;

        /// <summary>
        /// The identifier for the EnumStrings Variable.
        /// </summary>
        public const uint SoftwareVersionFileType_EnumStrings = 332;

        /// <summary>
        /// The identifier for the OptionSetValues Variable.
        /// </summary>
        public const uint UpdateBehavior_OptionSetValues = 388;

        /// <summary>
        /// The identifier for the Opc.Ua.Di Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema = 6435;

        /// <summary>
        /// The identifier for the Deprecated Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_Deprecated = 15893;

        /// <summary>
        /// The identifier for the FetchResultDataType Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_FetchResultDataType = 6555;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_NamespaceUri = 6437;

        /// <summary>
        /// The identifier for the ParameterResultDataType Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_ParameterResultDataType = 6564;

        /// <summary>
        /// The identifier for the TransferResultDataDataType Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultDataDataType = 15897;

        /// <summary>
        /// The identifier for the TransferResultErrorDataType Variable.
        /// </summary>
        public const uint OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultErrorDataType = 15894;

        /// <summary>
        /// The identifier for the Opc.Ua.Di Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema = 6423;

        /// <summary>
        /// The identifier for the Deprecated Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_Deprecated = 15902;

        /// <summary>
        /// The identifier for the FetchResultDataType Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_FetchResultDataType = 6539;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_NamespaceUri = 6425;

        /// <summary>
        /// The identifier for the ParameterResultDataType Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_ParameterResultDataType = 6548;

        /// <summary>
        /// The identifier for the TransferResultDataDataType Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultDataDataType = 15906;

        /// <summary>
        /// The identifier for the TransferResultErrorDataType Variable.
        /// </summary>
        public const uint XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultErrorDataType = 15903;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint IDeviceHealthType_DeviceHealth = 15052;

        /// <summary>
        /// The identifier for the OperationCycleCounter Variable.
        /// </summary>
        public const uint IOperationCounterType_OperationCycleCounter = 483;

        /// <summary>
        /// The identifier for the OperationDuration Variable.
        /// </summary>
        public const uint IOperationCounterType_OperationDuration = 482;

        /// <summary>
        /// The identifier for the PowerOnDuration Variable.
        /// </summary>
        public const uint IOperationCounterType_PowerOnDuration = 481;

        /// <summary>
        /// The identifier for the &lt;ImageIdentifier&gt; Variable.
        /// </summary>
        public const uint ISupportInfoType_DeviceTypeImage_ImageIdentifier = 15056;

        /// <summary>
        /// The identifier for the &lt;DocumentIdentifier&gt; Variable.
        /// </summary>
        public const uint ISupportInfoType_Documentation_DocumentIdentifier = 15058;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Close_InputArguments = 62;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_InputArguments = 69;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_OutputArguments = 70;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Open_InputArguments = 37;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Open_OutputArguments = 38;

        /// <summary>
        /// The identifier for the OpenCount Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_OpenCount = 32;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Read_InputArguments = 64;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Read_OutputArguments = 65;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition_InputArguments = 72;

        /// <summary>
        /// The identifier for the Size Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Size = 29;

        /// <summary>
        /// The identifier for the UserWritable Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_UserWritable = 31;

        /// <summary>
        /// The identifier for the Writable Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Writable = 30;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ISupportInfoType_DocumentationFiles_DocumentFileId_Write_InputArguments = 67;

        /// <summary>
        /// The identifier for the &lt;ImageIdentifier&gt; Variable.
        /// </summary>
        public const uint ISupportInfoType_ImageSet_ImageIdentifier = 15062;

        /// <summary>
        /// The identifier for the &lt;ProtocolSupportIdentifier&gt; Variable.
        /// </summary>
        public const uint ISupportInfoType_ProtocolSupport_ProtocolSupportIdentifier = 15060;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint ITagNameplateType_AssetId = 15049;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint ITagNameplateType_ComponentName = 15050;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint IVendorNameplateType_DeviceClass = 15044;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint IVendorNameplateType_DeviceManual = 15043;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint IVendorNameplateType_DeviceRevision = 15041;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint IVendorNameplateType_HardwareRevision = 15039;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint IVendorNameplateType_Manufacturer = 15036;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint IVendorNameplateType_ManufacturerUri = 15037;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint IVendorNameplateType_Model = 15038;

        /// <summary>
        /// The identifier for the PatchIdentifiers Variable.
        /// </summary>
        public const uint IVendorNameplateType_PatchIdentifiers = 24;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint IVendorNameplateType_ProductCode = 15042;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint IVendorNameplateType_ProductInstanceUri = 15046;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint IVendorNameplateType_RevisionCounter = 15047;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint IVendorNameplateType_SerialNumber = 15045;

        /// <summary>
        /// The identifier for the SoftwareReleaseDate Variable.
        /// </summary>
        public const uint IVendorNameplateType_SoftwareReleaseDate = 23;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint IVendorNameplateType_SoftwareRevision = 15040;

        /// <summary>
        /// The identifier for the UIElement Variable.
        /// </summary>
        public const uint FunctionalGroupType_GroupIdentifier_UIElement = 6242;

        /// <summary>
        /// The identifier for the UIElement Variable.
        /// </summary>
        public const uint FunctionalGroupType_UIElement = 6243;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LockingServicesType_BreakLock_OutputArguments = 6401;

        /// <summary>
        /// The identifier for the DefaultInstanceBrowseName Variable.
        /// </summary>
        public const uint LockingServicesType_DefaultInstanceBrowseName = 15890;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LockingServicesType_ExitLock_OutputArguments = 6399;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LockingServicesType_InitLock_InputArguments = 6394;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LockingServicesType_InitLock_OutputArguments = 6395;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint LockingServicesType_Locked = 6534;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint LockingServicesType_LockingClient = 6390;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint LockingServicesType_LockingUser = 6391;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint LockingServicesType_RemainingLockTime = 6392;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LockingServicesType_RenewLock_OutputArguments = 6397;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint NetworkType_Lock_BreakLock_OutputArguments = 6307;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint NetworkType_Lock_ExitLock_OutputArguments = 6305;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint NetworkType_Lock_InitLock_InputArguments = 6300;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint NetworkType_Lock_InitLock_OutputArguments = 6301;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint NetworkType_Lock_Locked = 6497;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint NetworkType_Lock_LockingClient = 6296;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint NetworkType_Lock_LockingUser = 6297;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint NetworkType_Lock_RemainingLockTime = 6298;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint NetworkType_Lock_RenewLock_OutputArguments = 6303;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateDirectory_InputArguments = 196;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateDirectory_OutputArguments = 197;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateFile_InputArguments = 199;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_CreateFile_OutputArguments = 200;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_DeleteFileSystemObject_InputArguments = 202;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_MoveOrCopy_InputArguments = 204;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_FileSystem_MoveOrCopy_OutputArguments = 205;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_GetUpdateBehavior_InputArguments = 207;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_GetUpdateBehavior_OutputArguments = 208;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_ValidateFiles_InputArguments = 210;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FileSystemLoadingType_ValidateFiles_OutputArguments = 211;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint CachedLoadingType_FallbackVersion_Manufacturer = 373;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint CachedLoadingType_FallbackVersion_ManufacturerUri = 374;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint CachedLoadingType_FallbackVersion_SoftwareRevision = 375;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint CachedLoadingType_GetUpdateBehavior_InputArguments = 190;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint CachedLoadingType_GetUpdateBehavior_OutputArguments = 191;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint CachedLoadingType_PendingVersion_Manufacturer = 366;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint CachedLoadingType_PendingVersion_ManufacturerUri = 367;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint CachedLoadingType_PendingVersion_SoftwareRevision = 368;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint PackageLoadingType_CurrentVersion_Manufacturer = 345;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint PackageLoadingType_CurrentVersion_ManufacturerUri = 346;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint PackageLoadingType_CurrentVersion_SoftwareRevision = 347;

        /// <summary>
        /// The identifier for the UpdateBehavior Variable.
        /// </summary>
        public const uint DirectLoadingType_UpdateBehavior = 169;

        /// <summary>
        /// The identifier for the WriteTimeout Variable.
        /// </summary>
        public const uint DirectLoadingType_WriteTimeout = 170;

        /// <summary>
        /// The identifier for the ErrorMessage Variable.
        /// </summary>
        public const uint PackageLoadingType_ErrorMessage = 151;

        /// <summary>
        /// The identifier for the ClientProcessingTimeout Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_ClientProcessingTimeout = 141;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_CloseAndCommit_InputArguments = 149;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_CloseAndCommit_OutputArguments = 150;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForRead_InputArguments = 143;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForRead_OutputArguments = 144;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForWrite_InputArguments = 146;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint PackageLoadingType_FileTransfer_GenerateFileForWrite_OutputArguments = 147;

        /// <summary>
        /// The identifier for the WriteBlockSize Variable.
        /// </summary>
        public const uint PackageLoadingType_WriteBlockSize = 152;

        /// <summary>
        /// The identifier for the UpdateKey Variable.
        /// </summary>
        public const uint SoftwareLoadingType_UpdateKey = 136;

        /// <summary>
        /// The identifier for the ConfirmationTimeout Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Confirmation_ConfirmationTimeout = 113;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Confirmation_CurrentState = 99;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Confirmation_CurrentState_Id = 100;

        /// <summary>
        /// The identifier for the DefaultInstanceBrowseName Variable.
        /// </summary>
        public const uint SoftwareUpdateType_DefaultInstanceBrowseName = 134;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Installation_CurrentState = 41;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Installation_CurrentState_Id = 42;

        /// <summary>
        /// The identifier for the ClientProcessingTimeout Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_ClientProcessingTimeout = 123;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_CloseAndCommit_InputArguments = 131;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_CloseAndCommit_OutputArguments = 132;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForRead_InputArguments = 125;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForRead_OutputArguments = 126;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForWrite_InputArguments = 128;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint SoftwareUpdateType_Parameters_GenerateFileForWrite_OutputArguments = 129;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint SoftwareUpdateType_PowerCycle_CurrentState = 77;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint SoftwareUpdateType_PowerCycle_CurrentState_Id = 78;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint SoftwareUpdateType_PrepareForUpdate_CurrentState = 5;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint SoftwareUpdateType_PrepareForUpdate_CurrentState_Id = 6;

        /// <summary>
        /// The identifier for the UpdateStatus Variable.
        /// </summary>
        public const uint SoftwareUpdateType_UpdateStatus = 133;

        /// <summary>
        /// The identifier for the VendorErrorCode Variable.
        /// </summary>
        public const uint SoftwareUpdateType_VendorErrorCode = 402;

        /// <summary>
        /// The identifier for the ChangeLogReference Variable.
        /// </summary>
        public const uint SoftwareVersionType_ChangeLogReference = 385;

        /// <summary>
        /// The identifier for the Hash Variable.
        /// </summary>
        public const uint SoftwareVersionType_Hash = 386;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint SoftwareVersionType_Manufacturer = 380;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint SoftwareVersionType_ManufacturerUri = 381;

        /// <summary>
        /// The identifier for the PatchIdentifiers Variable.
        /// </summary>
        public const uint SoftwareVersionType_PatchIdentifiers = 383;

        /// <summary>
        /// The identifier for the ReleaseDate Variable.
        /// </summary>
        public const uint SoftwareVersionType_ReleaseDate = 384;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint SoftwareVersionType_SoftwareRevision = 382;

        /// <summary>
        /// The identifier for the ConfirmationTimeout Variable.
        /// </summary>
        public const uint ConfirmationStateMachineType_ConfirmationTimeout = 322;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint ConfirmationStateMachineType_NotWaitingForConfirm_StateNumber = 324;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm_TransitionNumber = 328;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint ConfirmationStateMachineType_WaitingForConfirm_StateNumber = 326;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm_TransitionNumber = 330;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_Error_StateNumber = 276;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_ErrorToIdle_TransitionNumber = 284;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_Idle_StateNumber = 272;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_IdleToInstalling_TransitionNumber = 387;

        /// <summary>
        /// The identifier for the InstallationDelay Variable.
        /// </summary>
        public const uint InstallationStateMachineType_InstallationDelay = 264;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint InstallationStateMachineType_InstallFiles_InputArguments = 269;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_Installing_StateNumber = 274;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_InstallingToError_TransitionNumber = 282;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint InstallationStateMachineType_InstallingToIdle_TransitionNumber = 280;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint InstallationStateMachineType_InstallSoftwarePackage_InputArguments = 266;

        /// <summary>
        /// The identifier for the PercentComplete Variable.
        /// </summary>
        public const uint InstallationStateMachineType_PercentComplete = 263;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PowerCycleStateMachineType_NotWaitingForPowerCycle_StateNumber = 300;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle_TransitionNumber = 304;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PowerCycleStateMachineType_WaitingForPowerCycle_StateNumber = 302;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle_TransitionNumber = 306;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Idle_StateNumber = 232;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_IdleToPreparing_TransitionNumber = 240;

        /// <summary>
        /// The identifier for the PercentComplete Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PercentComplete = 227;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparedForUpdate_StateNumber = 236;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparedForUpdateToResuming_TransitionNumber = 246;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Preparing_StateNumber = 234;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparingToIdle_TransitionNumber = 242;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate_TransitionNumber = 244;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_Resuming_StateNumber = 238;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint PrepareForUpdateStateMachineType_ResumingToIdle_TransitionNumber = 248;

        /// <summary>
        /// The identifier for the ActualMode Variable.
        /// </summary>
        public const uint BlockType_ActualMode = 6010;

        /// <summary>
        /// The identifier for the NormalMode Variable.
        /// </summary>
        public const uint BlockType_NormalMode = 6012;

        /// <summary>
        /// The identifier for the PermittedMode Variable.
        /// </summary>
        public const uint BlockType_PermittedMode = 6011;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint BlockType_RevisionCounter = 6009;

        /// <summary>
        /// The identifier for the TargetMode Variable.
        /// </summary>
        public const uint BlockType_TargetMode = 6013;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint ComponentType_AssetId = 15098;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint ComponentType_ComponentName = 15099;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint ComponentType_DeviceClass = 15094;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint ComponentType_DeviceManual = 15093;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint ComponentType_DeviceRevision = 15091;

        /// <summary>
        /// The identifier for the DeviceClass Variable.
        /// </summary>
        public const uint DeviceType_DeviceClass = 6470;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint DeviceType_DeviceHealth = 6208;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint DeviceType_DeviceManual = 6005;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint DeviceType_DeviceRevision = 6006;

        /// <summary>
        /// The identifier for the &lt;ImageIdentifier&gt; Variable.
        /// </summary>
        public const uint DeviceType_DeviceTypeImage_ImageIdentifier = 6210;

        /// <summary>
        /// The identifier for the &lt;DocumentIdentifier&gt; Variable.
        /// </summary>
        public const uint DeviceType_Documentation_DocumentIdentifier = 6212;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint DeviceType_HardwareRevision = 6008;

        /// <summary>
        /// The identifier for the &lt;ImageIdentifier&gt; Variable.
        /// </summary>
        public const uint DeviceType_ImageSet_ImageIdentifier = 6216;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint DeviceType_Manufacturer = 6003;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint DeviceType_ManufacturerUri = 15100;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint DeviceType_Model = 6004;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint DeviceType_ProductCode = 15101;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint DeviceType_ProductInstanceUri = 15102;

        /// <summary>
        /// The identifier for the &lt;ProtocolSupportIdentifier&gt; Variable.
        /// </summary>
        public const uint DeviceType_ProtocolSupport_ProtocolSupportIdentifier = 6214;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint DeviceType_RevisionCounter = 6002;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint DeviceType_SerialNumber = 6001;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint DeviceType_SoftwareRevision = 6007;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint ComponentType_HardwareRevision = 15089;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint ComponentType_Manufacturer = 15086;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint ComponentType_ManufacturerUri = 15087;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint ComponentType_Model = 15088;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint ComponentType_ProductCode = 15092;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint ComponentType_ProductInstanceUri = 15096;

        /// <summary>
        /// The identifier for the RevisionCounter Variable.
        /// </summary>
        public const uint ComponentType_RevisionCounter = 15097;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint ComponentType_SerialNumber = 15095;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint ComponentType_SoftwareRevision = 15090;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint SoftwareType_Manufacturer = 15129;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint SoftwareType_Model = 15131;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint SoftwareType_SoftwareRevision = 15133;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_BreakLock_OutputArguments = 6174;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_ExitLock_OutputArguments = 6172;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_InitLock_InputArguments = 6167;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_InitLock_OutputArguments = 6168;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_Locked = 6468;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_LockingClient = 6163;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_LockingUser = 6164;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_RemainingLockTime = 6165;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TopologyElementType_Lock_RenewLock_OutputArguments = 6170;

        /// <summary>
        /// The identifier for the &lt;ParameterIdentifier&gt; Variable.
        /// </summary>
        public const uint TopologyElementType_ParameterSet_ParameterIdentifier = 6017;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint TransferServicesType_FetchTransferResultData_InputArguments = 6532;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TransferServicesType_FetchTransferResultData_OutputArguments = 6533;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TransferServicesType_TransferFromDevice_OutputArguments = 6530;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint TransferServicesType_TransferToDevice_OutputArguments = 6528;

        /// <summary>
        /// The identifier for the Indication Variable.
        /// </summary>
        public const uint LifetimeVariableType_Indication = 471;

        /// <summary>
        /// The identifier for the LimitValue Variable.
        /// </summary>
        public const uint LifetimeVariableType_LimitValue = 470;

        /// <summary>
        /// The identifier for the StartValue Variable.
        /// </summary>
        public const uint LifetimeVariableType_StartValue = 469;

        /// <summary>
        /// The identifier for the WarningValues Variable.
        /// </summary>
        public const uint LifetimeVariableType_WarningValues = 472;

        /// <summary>
        /// The identifier for the OnlineAccess Object.
        /// </summary>
        public const uint DeviceTopology_OnlineAccess = 6095;

        /// <summary>
        /// The identifier for the DefaultAccessRestrictions Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_DefaultAccessRestrictions = 15033;

        /// <summary>
        /// The identifier for the DefaultRolePermissions Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_DefaultRolePermissions = 15031;

        /// <summary>
        /// The identifier for the DefaultUserRolePermissions Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_DefaultUserRolePermissions = 15032;

        /// <summary>
        /// The identifier for the IsNamespaceSubset Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_IsNamespaceSubset = 15005;

        /// <summary>
        /// The identifier for the NamespacePublicationDate Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_NamespacePublicationDate = 15004;

        /// <summary>
        /// The identifier for the NamespaceUri Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_NamespaceUri = 15002;

        /// <summary>
        /// The identifier for the NamespaceVersion Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_NamespaceVersion = 15003;

        /// <summary>
        /// The identifier for the StaticNodeIdTypes Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_StaticNodeIdTypes = 15006;

        /// <summary>
        /// The identifier for the StaticNumericNodeIdRange Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_StaticNumericNodeIdRange = 15007;

        /// <summary>
        /// The identifier for the StaticStringNodeIdPattern Object.
        /// </summary>
        public const uint Namespaces_OPCUADINamespaceMetadata_StaticStringNodeIdPattern = 15008;

        /// <summary>
        /// The identifier for the MaxInactiveLockTime Object.
        /// </summary>
        public const uint ServerCapabilities_MaxInactiveLockTime = 6387;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableTypes
    {
        /// <summary>
        /// The identifier for the LifetimeVariableType VariableType.
        /// </summary>
        public const uint LifetimeVariableType = 468;

        /// <summary>
        /// The identifier for the UIElementType VariableType.
        /// </summary>
        public const uint UIElementType = 6246;

    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all DataTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class DataTypeIds
    {
        /// <summary>
        /// The identifier for the DeviceHealthEnumeration DataType.
        /// </summary>
        public static readonly ExpandedNodeId DeviceHealthEnumeration = new ExpandedNodeId(DataTypes.DeviceHealthEnumeration, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionFileType DataType.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionFileType = new ExpandedNodeId(DataTypes.SoftwareVersionFileType, Namespaces.DI);

        /// <summary>
        /// The identifier for the UpdateBehavior DataType.
        /// </summary>
        public static readonly ExpandedNodeId UpdateBehavior = new ExpandedNodeId(DataTypes.UpdateBehavior, Namespaces.DI);

        /// <summary>
        /// The identifier for the FetchResultDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId FetchResultDataType = new ExpandedNodeId(DataTypes.FetchResultDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultDataDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultDataDataType = new ExpandedNodeId(DataTypes.TransferResultDataDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultErrorDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultErrorDataType = new ExpandedNodeId(DataTypes.TransferResultErrorDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ParameterResultDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId ParameterResultDataType = new ExpandedNodeId(DataTypes.ParameterResultDataType, Namespaces.DI);

    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Methods in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Close Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Close = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_Close, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Open Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Open = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_Open, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Read Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Read = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_Read, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Write Method.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Write = new ExpandedNodeId(Methods.ISupportInfoType_DocumentationFiles_DocumentFileId_Write, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_BreakLock = new ExpandedNodeId(Methods.LockingServicesType_BreakLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_ExitLock = new ExpandedNodeId(Methods.LockingServicesType_ExitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_InitLock = new ExpandedNodeId(Methods.LockingServicesType_InitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_RenewLock = new ExpandedNodeId(Methods.LockingServicesType_RenewLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_BreakLock = new ExpandedNodeId(Methods.NetworkType_Lock_BreakLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_ExitLock = new ExpandedNodeId(Methods.NetworkType_Lock_ExitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_InitLock = new ExpandedNodeId(Methods.NetworkType_Lock_InitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_RenewLock = new ExpandedNodeId(Methods.NetworkType_Lock_RenewLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateDirectory Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateDirectory = new ExpandedNodeId(Methods.FileSystemLoadingType_FileSystem_CreateDirectory, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateFile Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateFile = new ExpandedNodeId(Methods.FileSystemLoadingType_FileSystem_CreateFile, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_DeleteFileSystemObject Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_DeleteFileSystemObject = new ExpandedNodeId(Methods.FileSystemLoadingType_FileSystem_DeleteFileSystemObject, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_MoveOrCopy Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_MoveOrCopy = new ExpandedNodeId(Methods.FileSystemLoadingType_FileSystem_MoveOrCopy, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_GetUpdateBehavior Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_GetUpdateBehavior = new ExpandedNodeId(Methods.FileSystemLoadingType_GetUpdateBehavior, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_ValidateFiles Method.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_ValidateFiles = new ExpandedNodeId(Methods.FileSystemLoadingType_ValidateFiles, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_GetUpdateBehavior Method.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_GetUpdateBehavior = new ExpandedNodeId(Methods.CachedLoadingType_GetUpdateBehavior, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_CloseAndCommit Method.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_CloseAndCommit = new ExpandedNodeId(Methods.PackageLoadingType_FileTransfer_CloseAndCommit, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForRead Method.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForRead = new ExpandedNodeId(Methods.PackageLoadingType_FileTransfer_GenerateFileForRead, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForWrite Method.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForWrite = new ExpandedNodeId(Methods.PackageLoadingType_FileTransfer_GenerateFileForWrite, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Confirmation_Confirm Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Confirmation_Confirm = new ExpandedNodeId(Methods.SoftwareUpdateType_Confirmation_Confirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Installation_Resume Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Installation_Resume = new ExpandedNodeId(Methods.SoftwareUpdateType_Installation_Resume, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_CloseAndCommit Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_CloseAndCommit = new ExpandedNodeId(Methods.SoftwareUpdateType_Parameters_CloseAndCommit, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForRead Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForRead = new ExpandedNodeId(Methods.SoftwareUpdateType_Parameters_GenerateFileForRead, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForWrite Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForWrite = new ExpandedNodeId(Methods.SoftwareUpdateType_Parameters_GenerateFileForWrite, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PrepareForUpdate_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PrepareForUpdate_Abort = new ExpandedNodeId(Methods.SoftwareUpdateType_PrepareForUpdate_Abort, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PrepareForUpdate_Prepare Method.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PrepareForUpdate_Prepare = new ExpandedNodeId(Methods.SoftwareUpdateType_PrepareForUpdate_Prepare, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_Confirm Method.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_Confirm = new ExpandedNodeId(Methods.ConfirmationStateMachineType_Confirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallFiles Method.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallFiles = new ExpandedNodeId(Methods.InstallationStateMachineType_InstallFiles, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallSoftwarePackage Method.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallSoftwarePackage = new ExpandedNodeId(Methods.InstallationStateMachineType_InstallSoftwarePackage, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Resume Method.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Resume = new ExpandedNodeId(Methods.InstallationStateMachineType_Resume, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Abort = new ExpandedNodeId(Methods.PrepareForUpdateStateMachineType_Abort, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Prepare Method.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Prepare = new ExpandedNodeId(Methods.PrepareForUpdateStateMachineType_Prepare, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Resume Method.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Resume = new ExpandedNodeId(Methods.PrepareForUpdateStateMachineType_Resume, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_BreakLock = new ExpandedNodeId(Methods.TopologyElementType_Lock_BreakLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_ExitLock = new ExpandedNodeId(Methods.TopologyElementType_Lock_ExitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_InitLock = new ExpandedNodeId(Methods.TopologyElementType_Lock_InitLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_RenewLock = new ExpandedNodeId(Methods.TopologyElementType_Lock_RenewLock, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_FetchTransferResultData Method.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_FetchTransferResultData = new ExpandedNodeId(Methods.TransferServicesType_FetchTransferResultData, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_TransferFromDevice Method.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_TransferFromDevice = new ExpandedNodeId(Methods.TransferServicesType_TransferFromDevice, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_TransferToDevice Method.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_TransferToDevice = new ExpandedNodeId(Methods.TransferServicesType_TransferToDevice, Namespaces.DI);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectIds
    {
        /// <summary>
        /// The identifier for the IDeviceHealthType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId IDeviceHealthType_DeviceHealthAlarms = new ExpandedNodeId(Objects.IDeviceHealthType_DeviceHealthAlarms, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DeviceTypeImage Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DeviceTypeImage = new ExpandedNodeId(Objects.ISupportInfoType_DeviceTypeImage, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_Documentation Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_Documentation = new ExpandedNodeId(Objects.ISupportInfoType_Documentation, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles = new ExpandedNodeId(Objects.ISupportInfoType_DocumentationFiles, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId = new ExpandedNodeId(Objects.ISupportInfoType_DocumentationFiles_DocumentFileId, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_ImageSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_ImageSet = new ExpandedNodeId(Objects.ISupportInfoType_ImageSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_ProtocolSupport Object.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_ProtocolSupport = new ExpandedNodeId(Objects.ISupportInfoType_ProtocolSupport, Namespaces.DI);

        /// <summary>
        /// The identifier for the FunctionalGroupType_GroupIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalGroupType_GroupIdentifier = new ExpandedNodeId(Objects.FunctionalGroupType_GroupIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfigurableObjectType_ObjectIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfigurableObjectType_ObjectIdentifier = new ExpandedNodeId(Objects.ConfigurableObjectType_ObjectIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfigurableObjectType_SupportedTypes Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfigurableObjectType_SupportedTypes = new ExpandedNodeId(Objects.ConfigurableObjectType_SupportedTypes, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_CPIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_CPIdentifier = new ExpandedNodeId(Objects.NetworkType_CPIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConnectionPointType_NetworkIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId ConnectionPointType_NetworkIdentifier = new ExpandedNodeId(Objects.ConnectionPointType_NetworkIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_ProfileIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_ProfileIdentifier = new ExpandedNodeId(Objects.NetworkType_ProfileIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock = new ExpandedNodeId(Objects.NetworkType_Lock, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConnectionPointType_ProfileIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId ConnectionPointType_ProfileIdentifier = new ExpandedNodeId(Objects.ConnectionPointType_ProfileIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConnectionPointType_NetworkAddress Object.
        /// </summary>
        public static readonly ExpandedNodeId ConnectionPointType_NetworkAddress = new ExpandedNodeId(Objects.ConnectionPointType_NetworkAddress, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_CPIdentifier_NetworkAddress Object.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_CPIdentifier_NetworkAddress = new ExpandedNodeId(Objects.NetworkType_CPIdentifier_NetworkAddress, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem Object.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem = new ExpandedNodeId(Objects.FileSystemLoadingType_FileSystem, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_FallbackVersion Object.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_FallbackVersion = new ExpandedNodeId(Objects.CachedLoadingType_FallbackVersion, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_PendingVersion Object.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_PendingVersion = new ExpandedNodeId(Objects.CachedLoadingType_PendingVersion, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_CurrentVersion Object.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_CurrentVersion = new ExpandedNodeId(Objects.PackageLoadingType_CurrentVersion, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer Object.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer = new ExpandedNodeId(Objects.PackageLoadingType_FileTransfer, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Confirmation Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Confirmation = new ExpandedNodeId(Objects.SoftwareUpdateType_Confirmation, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_NotWaitingForConfirm Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_NotWaitingForConfirm = new ExpandedNodeId(Objects.ConfirmationStateMachineType_NotWaitingForConfirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm = new ExpandedNodeId(Objects.ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_WaitingForConfirm Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_WaitingForConfirm = new ExpandedNodeId(Objects.ConfirmationStateMachineType_WaitingForConfirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm Object.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm = new ExpandedNodeId(Objects.ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Installation Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Installation = new ExpandedNodeId(Objects.SoftwareUpdateType_Installation, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Error Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Error = new ExpandedNodeId(Objects.InstallationStateMachineType_Error, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_ErrorToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_ErrorToIdle = new ExpandedNodeId(Objects.InstallationStateMachineType_ErrorToIdle, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Idle Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Idle = new ExpandedNodeId(Objects.InstallationStateMachineType_Idle, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_IdleToInstalling Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_IdleToInstalling = new ExpandedNodeId(Objects.InstallationStateMachineType_IdleToInstalling, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Installing Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Installing = new ExpandedNodeId(Objects.InstallationStateMachineType_Installing, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallingToError Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallingToError = new ExpandedNodeId(Objects.InstallationStateMachineType_InstallingToError, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallingToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallingToIdle = new ExpandedNodeId(Objects.InstallationStateMachineType_InstallingToIdle, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Loading Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Loading = new ExpandedNodeId(Objects.SoftwareUpdateType_Loading, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters = new ExpandedNodeId(Objects.SoftwareUpdateType_Parameters, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PowerCycle Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PowerCycle = new ExpandedNodeId(Objects.SoftwareUpdateType_PowerCycle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_NotWaitingForPowerCycle Object.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_NotWaitingForPowerCycle = new ExpandedNodeId(Objects.PowerCycleStateMachineType_NotWaitingForPowerCycle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle Object.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle = new ExpandedNodeId(Objects.PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_WaitingForPowerCycle Object.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_WaitingForPowerCycle = new ExpandedNodeId(Objects.PowerCycleStateMachineType_WaitingForPowerCycle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle Object.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle = new ExpandedNodeId(Objects.PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PrepareForUpdate Object.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PrepareForUpdate = new ExpandedNodeId(Objects.SoftwareUpdateType_PrepareForUpdate, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Idle Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Idle = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_Idle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_IdleToPreparing Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_IdleToPreparing = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_IdleToPreparing, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Preparing Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Preparing = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_Preparing, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparedForUpdate Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparedForUpdate = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_PreparedForUpdate, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparedForUpdateToResuming Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparedForUpdateToResuming = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_PreparedForUpdateToResuming, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Resuming Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Resuming = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_Resuming, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparingToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparingToIdle = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_PreparingToIdle, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_ResumingToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_ResumingToIdle = new ExpandedNodeId(Objects.PrepareForUpdateStateMachineType_ResumingToIdle, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_GroupIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_GroupIdentifier = new ExpandedNodeId(Objects.TopologyElementType_GroupIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_CPIdentifier Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_CPIdentifier = new ExpandedNodeId(Objects.DeviceType_CPIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_CPIdentifier_NetworkAddress Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_CPIdentifier_NetworkAddress = new ExpandedNodeId(Objects.DeviceType_CPIdentifier_NetworkAddress, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceHealthAlarms = new ExpandedNodeId(Objects.DeviceType_DeviceHealthAlarms, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceTypeImage Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceTypeImage = new ExpandedNodeId(Objects.DeviceType_DeviceTypeImage, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_Documentation Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_Documentation = new ExpandedNodeId(Objects.DeviceType_Documentation, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ImageSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ImageSet = new ExpandedNodeId(Objects.DeviceType_ImageSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ProtocolSupport Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ProtocolSupport = new ExpandedNodeId(Objects.DeviceType_ProtocolSupport, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Identification = new ExpandedNodeId(Objects.TopologyElementType_Identification, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock = new ExpandedNodeId(Objects.TopologyElementType_Lock, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_MethodSet Object.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_MethodSet = new ExpandedNodeId(Objects.TopologyElementType_MethodSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_ParameterSet = new ExpandedNodeId(Objects.TopologyElementType_ParameterSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the FetchResultDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId FetchResultDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.FetchResultDataType_Encoding_DefaultBinary, Namespaces.DI);

        /// <summary>
        /// The identifier for the FetchResultDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId FetchResultDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.FetchResultDataType_Encoding_DefaultJson, Namespaces.DI);

        /// <summary>
        /// The identifier for the FetchResultDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId FetchResultDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.FetchResultDataType_Encoding_DefaultXml, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultDataDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultDataDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.TransferResultDataDataType_Encoding_DefaultBinary, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultDataDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultDataDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.TransferResultDataDataType_Encoding_DefaultJson, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultDataDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultDataDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.TransferResultDataDataType_Encoding_DefaultXml, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultErrorDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultErrorDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.TransferResultErrorDataType_Encoding_DefaultBinary, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultErrorDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultErrorDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.TransferResultErrorDataType_Encoding_DefaultJson, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferResultErrorDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId TransferResultErrorDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.TransferResultErrorDataType_Encoding_DefaultXml, Namespaces.DI);

        /// <summary>
        /// The identifier for the ParameterResultDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId ParameterResultDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.ParameterResultDataType_Encoding_DefaultBinary, Namespaces.DI);

        /// <summary>
        /// The identifier for the ParameterResultDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId ParameterResultDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.ParameterResultDataType_Encoding_DefaultJson, Namespaces.DI);

        /// <summary>
        /// The identifier for the ParameterResultDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId ParameterResultDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.ParameterResultDataType_Encoding_DefaultXml, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet = new ExpandedNodeId(Objects.DeviceSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceSet_DeviceFeatures Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_DeviceFeatures = new ExpandedNodeId(Objects.DeviceSet_DeviceFeatures, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceTopology Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceTopology = new ExpandedNodeId(Objects.DeviceTopology, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkSet Object.
        /// </summary>
        public static readonly ExpandedNodeId NetworkSet = new ExpandedNodeId(Objects.NetworkSet, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata Object.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata = new ExpandedNodeId(Objects.Namespaces_OPCUADINamespaceMetadata, Namespaces.DI);

    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Objects in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the DeviceHealthDiagnosticAlarmType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DeviceHealthDiagnosticAlarmType = new ExpandedNodeId(ObjectTypes.DeviceHealthDiagnosticAlarmType, Namespaces.DI);

        /// <summary>
        /// The identifier for the CheckFunctionAlarmType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CheckFunctionAlarmType = new ExpandedNodeId(ObjectTypes.CheckFunctionAlarmType, Namespaces.DI);

        /// <summary>
        /// The identifier for the FailureAlarmType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FailureAlarmType = new ExpandedNodeId(ObjectTypes.FailureAlarmType, Namespaces.DI);

        /// <summary>
        /// The identifier for the MaintenanceRequiredAlarmType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId MaintenanceRequiredAlarmType = new ExpandedNodeId(ObjectTypes.MaintenanceRequiredAlarmType, Namespaces.DI);

        /// <summary>
        /// The identifier for the OffSpecAlarmType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId OffSpecAlarmType = new ExpandedNodeId(ObjectTypes.OffSpecAlarmType, Namespaces.DI);

        /// <summary>
        /// The identifier for the IDeviceHealthType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IDeviceHealthType = new ExpandedNodeId(ObjectTypes.IDeviceHealthType, Namespaces.DI);

        /// <summary>
        /// The identifier for the IOperationCounterType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IOperationCounterType = new ExpandedNodeId(ObjectTypes.IOperationCounterType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType = new ExpandedNodeId(ObjectTypes.ISupportInfoType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ITagNameplateType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ITagNameplateType = new ExpandedNodeId(ObjectTypes.ITagNameplateType, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType = new ExpandedNodeId(ObjectTypes.IVendorNameplateType, Namespaces.DI);

        /// <summary>
        /// The identifier for the BaseLifetimeIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseLifetimeIndicationType = new ExpandedNodeId(ObjectTypes.BaseLifetimeIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the DiameterIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DiameterIndicationType = new ExpandedNodeId(ObjectTypes.DiameterIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the LengthIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LengthIndicationType = new ExpandedNodeId(ObjectTypes.LengthIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the NumberOfPartsIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId NumberOfPartsIndicationType = new ExpandedNodeId(ObjectTypes.NumberOfPartsIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the NumberOfUsagesIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId NumberOfUsagesIndicationType = new ExpandedNodeId(ObjectTypes.NumberOfUsagesIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the SubstanceVolumeIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SubstanceVolumeIndicationType = new ExpandedNodeId(ObjectTypes.SubstanceVolumeIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the TimeIndicationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TimeIndicationType = new ExpandedNodeId(ObjectTypes.TimeIndicationType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfigurableObjectType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ConfigurableObjectType = new ExpandedNodeId(ObjectTypes.ConfigurableObjectType, Namespaces.DI);

        /// <summary>
        /// The identifier for the FunctionalGroupType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalGroupType = new ExpandedNodeId(ObjectTypes.FunctionalGroupType, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType = new ExpandedNodeId(ObjectTypes.LockingServicesType, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType = new ExpandedNodeId(ObjectTypes.NetworkType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ProtocolType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProtocolType = new ExpandedNodeId(ObjectTypes.ProtocolType, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareLoadingType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareLoadingType = new ExpandedNodeId(ObjectTypes.SoftwareLoadingType, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType = new ExpandedNodeId(ObjectTypes.FileSystemLoadingType, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType = new ExpandedNodeId(ObjectTypes.PackageLoadingType, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType = new ExpandedNodeId(ObjectTypes.CachedLoadingType, Namespaces.DI);

        /// <summary>
        /// The identifier for the DirectLoadingType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DirectLoadingType = new ExpandedNodeId(ObjectTypes.DirectLoadingType, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType = new ExpandedNodeId(ObjectTypes.SoftwareUpdateType, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType = new ExpandedNodeId(ObjectTypes.SoftwareVersionType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType = new ExpandedNodeId(ObjectTypes.ConfirmationStateMachineType, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType = new ExpandedNodeId(ObjectTypes.InstallationStateMachineType, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType = new ExpandedNodeId(ObjectTypes.PowerCycleStateMachineType, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType = new ExpandedNodeId(ObjectTypes.PrepareForUpdateStateMachineType, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType = new ExpandedNodeId(ObjectTypes.TopologyElementType, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BlockType = new ExpandedNodeId(ObjectTypes.BlockType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType = new ExpandedNodeId(ObjectTypes.ComponentType, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType = new ExpandedNodeId(ObjectTypes.DeviceType, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareType = new ExpandedNodeId(ObjectTypes.SoftwareType, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConnectionPointType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ConnectionPointType = new ExpandedNodeId(ObjectTypes.ConnectionPointType, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType = new ExpandedNodeId(ObjectTypes.TransferServicesType, Namespaces.DI);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all ReferenceTypes in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class ReferenceTypeIds
    {
        /// <summary>
        /// The identifier for the ConnectsTo ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId ConnectsTo = new ExpandedNodeId(ReferenceTypes.ConnectsTo, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConnectsToParent ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId ConnectsToParent = new ExpandedNodeId(ReferenceTypes.ConnectsToParent, Namespaces.DI);

        /// <summary>
        /// The identifier for the IsOnline ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId IsOnline = new ExpandedNodeId(ReferenceTypes.IsOnline, Namespaces.DI);

    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all Variables in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the DeviceHealthEnumeration_EnumStrings Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceHealthEnumeration_EnumStrings = new ExpandedNodeId(Variables.DeviceHealthEnumeration_EnumStrings, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionFileType_EnumStrings Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionFileType_EnumStrings = new ExpandedNodeId(Variables.SoftwareVersionFileType_EnumStrings, Namespaces.DI);

        /// <summary>
        /// The identifier for the UpdateBehavior_OptionSetValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId UpdateBehavior_OptionSetValues = new ExpandedNodeId(Variables.UpdateBehavior_OptionSetValues, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_Deprecated Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_Deprecated = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_Deprecated, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_FetchResultDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_FetchResultDataType = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_FetchResultDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_NamespaceUri = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_NamespaceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_ParameterResultDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_ParameterResultDataType = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_ParameterResultDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultDataDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultDataDataType = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultDataDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultErrorDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultErrorDataType = new ExpandedNodeId(Variables.OPCBinarySchema_TypeSystem_OpcUaDi_BinarySchema_TransferResultErrorDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_Deprecated Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_Deprecated = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_Deprecated, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_FetchResultDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_FetchResultDataType = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_FetchResultDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_NamespaceUri = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_NamespaceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_ParameterResultDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_ParameterResultDataType = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_ParameterResultDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultDataDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultDataDataType = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultDataDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultErrorDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultErrorDataType = new ExpandedNodeId(Variables.XmlSchema_TypeSystem_OpcUaDi_XmlSchema_TransferResultErrorDataType, Namespaces.DI);

        /// <summary>
        /// The identifier for the IDeviceHealthType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId IDeviceHealthType_DeviceHealth = new ExpandedNodeId(Variables.IDeviceHealthType_DeviceHealth, Namespaces.DI);

        /// <summary>
        /// The identifier for the IOperationCounterType_OperationCycleCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId IOperationCounterType_OperationCycleCounter = new ExpandedNodeId(Variables.IOperationCounterType_OperationCycleCounter, Namespaces.DI);

        /// <summary>
        /// The identifier for the IOperationCounterType_OperationDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId IOperationCounterType_OperationDuration = new ExpandedNodeId(Variables.IOperationCounterType_OperationDuration, Namespaces.DI);

        /// <summary>
        /// The identifier for the IOperationCounterType_PowerOnDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId IOperationCounterType_PowerOnDuration = new ExpandedNodeId(Variables.IOperationCounterType_PowerOnDuration, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DeviceTypeImage_ImageIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DeviceTypeImage_ImageIdentifier = new ExpandedNodeId(Variables.ISupportInfoType_DeviceTypeImage_ImageIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_Documentation_DocumentIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_Documentation_DocumentIdentifier = new ExpandedNodeId(Variables.ISupportInfoType_Documentation_DocumentIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Close_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Close_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Close_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_OutputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_GetPosition_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Open_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Open_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Open_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Open_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Open_OutputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Open_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_OpenCount Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_OpenCount = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_OpenCount, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Read_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Read_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Read_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Read_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Read_OutputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Read_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_SetPosition_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Size Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Size = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Size, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_UserWritable Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_UserWritable = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_UserWritable, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Writable Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Writable = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Writable, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_DocumentationFiles_DocumentFileId_Write_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_DocumentationFiles_DocumentFileId_Write_InputArguments = new ExpandedNodeId(Variables.ISupportInfoType_DocumentationFiles_DocumentFileId_Write_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_ImageSet_ImageIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_ImageSet_ImageIdentifier = new ExpandedNodeId(Variables.ISupportInfoType_ImageSet_ImageIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ISupportInfoType_ProtocolSupport_ProtocolSupportIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId ISupportInfoType_ProtocolSupport_ProtocolSupportIdentifier = new ExpandedNodeId(Variables.ISupportInfoType_ProtocolSupport_ProtocolSupportIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the ITagNameplateType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ITagNameplateType_AssetId = new ExpandedNodeId(Variables.ITagNameplateType_AssetId, Namespaces.DI);

        /// <summary>
        /// The identifier for the ITagNameplateType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId ITagNameplateType_ComponentName = new ExpandedNodeId(Variables.ITagNameplateType_ComponentName, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_DeviceClass = new ExpandedNodeId(Variables.IVendorNameplateType_DeviceClass, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_DeviceManual = new ExpandedNodeId(Variables.IVendorNameplateType_DeviceManual, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_DeviceRevision = new ExpandedNodeId(Variables.IVendorNameplateType_DeviceRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_HardwareRevision = new ExpandedNodeId(Variables.IVendorNameplateType_HardwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_Manufacturer = new ExpandedNodeId(Variables.IVendorNameplateType_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_ManufacturerUri = new ExpandedNodeId(Variables.IVendorNameplateType_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_Model = new ExpandedNodeId(Variables.IVendorNameplateType_Model, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_PatchIdentifiers Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_PatchIdentifiers = new ExpandedNodeId(Variables.IVendorNameplateType_PatchIdentifiers, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_ProductCode = new ExpandedNodeId(Variables.IVendorNameplateType_ProductCode, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_ProductInstanceUri = new ExpandedNodeId(Variables.IVendorNameplateType_ProductInstanceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_RevisionCounter = new ExpandedNodeId(Variables.IVendorNameplateType_RevisionCounter, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_SerialNumber = new ExpandedNodeId(Variables.IVendorNameplateType_SerialNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_SoftwareReleaseDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_SoftwareReleaseDate = new ExpandedNodeId(Variables.IVendorNameplateType_SoftwareReleaseDate, Namespaces.DI);

        /// <summary>
        /// The identifier for the IVendorNameplateType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId IVendorNameplateType_SoftwareRevision = new ExpandedNodeId(Variables.IVendorNameplateType_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the FunctionalGroupType_GroupIdentifier_UIElement Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalGroupType_GroupIdentifier_UIElement = new ExpandedNodeId(Variables.FunctionalGroupType_GroupIdentifier_UIElement, Namespaces.DI);

        /// <summary>
        /// The identifier for the FunctionalGroupType_UIElement Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalGroupType_UIElement = new ExpandedNodeId(Variables.FunctionalGroupType_UIElement, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_BreakLock_OutputArguments = new ExpandedNodeId(Variables.LockingServicesType_BreakLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_DefaultInstanceBrowseName Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_DefaultInstanceBrowseName = new ExpandedNodeId(Variables.LockingServicesType_DefaultInstanceBrowseName, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_ExitLock_OutputArguments = new ExpandedNodeId(Variables.LockingServicesType_ExitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_InitLock_InputArguments = new ExpandedNodeId(Variables.LockingServicesType_InitLock_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_InitLock_OutputArguments = new ExpandedNodeId(Variables.LockingServicesType_InitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_Locked = new ExpandedNodeId(Variables.LockingServicesType_Locked, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_LockingClient = new ExpandedNodeId(Variables.LockingServicesType_LockingClient, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_LockingUser = new ExpandedNodeId(Variables.LockingServicesType_LockingUser, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_RemainingLockTime = new ExpandedNodeId(Variables.LockingServicesType_RemainingLockTime, Namespaces.DI);

        /// <summary>
        /// The identifier for the LockingServicesType_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LockingServicesType_RenewLock_OutputArguments = new ExpandedNodeId(Variables.LockingServicesType_RenewLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.NetworkType_Lock_BreakLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.NetworkType_Lock_ExitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.NetworkType_Lock_InitLock_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.NetworkType_Lock_InitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_Locked = new ExpandedNodeId(Variables.NetworkType_Lock_Locked, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_LockingClient = new ExpandedNodeId(Variables.NetworkType_Lock_LockingClient, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_LockingUser = new ExpandedNodeId(Variables.NetworkType_Lock_LockingUser, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_RemainingLockTime = new ExpandedNodeId(Variables.NetworkType_Lock_RemainingLockTime, Namespaces.DI);

        /// <summary>
        /// The identifier for the NetworkType_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId NetworkType_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.NetworkType_Lock_RenewLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateDirectory_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateDirectory_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_CreateDirectory_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateDirectory_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateDirectory_OutputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_CreateDirectory_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateFile_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateFile_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_CreateFile_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_CreateFile_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_CreateFile_OutputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_CreateFile_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_DeleteFileSystemObject_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_DeleteFileSystemObject_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_DeleteFileSystemObject_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_MoveOrCopy_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_MoveOrCopy_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_MoveOrCopy_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_FileSystem_MoveOrCopy_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_FileSystem_MoveOrCopy_OutputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_FileSystem_MoveOrCopy_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_GetUpdateBehavior_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_GetUpdateBehavior_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_GetUpdateBehavior_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_GetUpdateBehavior_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_GetUpdateBehavior_OutputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_GetUpdateBehavior_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_ValidateFiles_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_ValidateFiles_InputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_ValidateFiles_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the FileSystemLoadingType_ValidateFiles_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FileSystemLoadingType_ValidateFiles_OutputArguments = new ExpandedNodeId(Variables.FileSystemLoadingType_ValidateFiles_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_FallbackVersion_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_FallbackVersion_Manufacturer = new ExpandedNodeId(Variables.CachedLoadingType_FallbackVersion_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_FallbackVersion_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_FallbackVersion_ManufacturerUri = new ExpandedNodeId(Variables.CachedLoadingType_FallbackVersion_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_FallbackVersion_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_FallbackVersion_SoftwareRevision = new ExpandedNodeId(Variables.CachedLoadingType_FallbackVersion_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_GetUpdateBehavior_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_GetUpdateBehavior_InputArguments = new ExpandedNodeId(Variables.CachedLoadingType_GetUpdateBehavior_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_GetUpdateBehavior_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_GetUpdateBehavior_OutputArguments = new ExpandedNodeId(Variables.CachedLoadingType_GetUpdateBehavior_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_PendingVersion_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_PendingVersion_Manufacturer = new ExpandedNodeId(Variables.CachedLoadingType_PendingVersion_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_PendingVersion_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_PendingVersion_ManufacturerUri = new ExpandedNodeId(Variables.CachedLoadingType_PendingVersion_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the CachedLoadingType_PendingVersion_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId CachedLoadingType_PendingVersion_SoftwareRevision = new ExpandedNodeId(Variables.CachedLoadingType_PendingVersion_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_CurrentVersion_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_CurrentVersion_Manufacturer = new ExpandedNodeId(Variables.PackageLoadingType_CurrentVersion_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_CurrentVersion_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_CurrentVersion_ManufacturerUri = new ExpandedNodeId(Variables.PackageLoadingType_CurrentVersion_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_CurrentVersion_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_CurrentVersion_SoftwareRevision = new ExpandedNodeId(Variables.PackageLoadingType_CurrentVersion_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the DirectLoadingType_UpdateBehavior Variable.
        /// </summary>
        public static readonly ExpandedNodeId DirectLoadingType_UpdateBehavior = new ExpandedNodeId(Variables.DirectLoadingType_UpdateBehavior, Namespaces.DI);

        /// <summary>
        /// The identifier for the DirectLoadingType_WriteTimeout Variable.
        /// </summary>
        public static readonly ExpandedNodeId DirectLoadingType_WriteTimeout = new ExpandedNodeId(Variables.DirectLoadingType_WriteTimeout, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_ErrorMessage Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_ErrorMessage = new ExpandedNodeId(Variables.PackageLoadingType_ErrorMessage, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_ClientProcessingTimeout Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_ClientProcessingTimeout = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_ClientProcessingTimeout, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_CloseAndCommit_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_CloseAndCommit_InputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_CloseAndCommit_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_CloseAndCommit_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_CloseAndCommit_OutputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_CloseAndCommit_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForRead_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForRead_InputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_GenerateFileForRead_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForRead_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForRead_OutputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_GenerateFileForRead_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForWrite_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForWrite_InputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_GenerateFileForWrite_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_FileTransfer_GenerateFileForWrite_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_FileTransfer_GenerateFileForWrite_OutputArguments = new ExpandedNodeId(Variables.PackageLoadingType_FileTransfer_GenerateFileForWrite_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the PackageLoadingType_WriteBlockSize Variable.
        /// </summary>
        public static readonly ExpandedNodeId PackageLoadingType_WriteBlockSize = new ExpandedNodeId(Variables.PackageLoadingType_WriteBlockSize, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareLoadingType_UpdateKey Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareLoadingType_UpdateKey = new ExpandedNodeId(Variables.SoftwareLoadingType_UpdateKey, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Confirmation_ConfirmationTimeout Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Confirmation_ConfirmationTimeout = new ExpandedNodeId(Variables.SoftwareUpdateType_Confirmation_ConfirmationTimeout, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Confirmation_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Confirmation_CurrentState = new ExpandedNodeId(Variables.SoftwareUpdateType_Confirmation_CurrentState, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Confirmation_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Confirmation_CurrentState_Id = new ExpandedNodeId(Variables.SoftwareUpdateType_Confirmation_CurrentState_Id, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_DefaultInstanceBrowseName Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_DefaultInstanceBrowseName = new ExpandedNodeId(Variables.SoftwareUpdateType_DefaultInstanceBrowseName, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Installation_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Installation_CurrentState = new ExpandedNodeId(Variables.SoftwareUpdateType_Installation_CurrentState, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Installation_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Installation_CurrentState_Id = new ExpandedNodeId(Variables.SoftwareUpdateType_Installation_CurrentState_Id, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_ClientProcessingTimeout Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_ClientProcessingTimeout = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_ClientProcessingTimeout, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_CloseAndCommit_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_CloseAndCommit_InputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_CloseAndCommit_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_CloseAndCommit_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_CloseAndCommit_OutputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_CloseAndCommit_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForRead_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForRead_InputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_GenerateFileForRead_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForRead_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForRead_OutputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_GenerateFileForRead_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForWrite_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForWrite_InputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_GenerateFileForWrite_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_Parameters_GenerateFileForWrite_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_Parameters_GenerateFileForWrite_OutputArguments = new ExpandedNodeId(Variables.SoftwareUpdateType_Parameters_GenerateFileForWrite_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PowerCycle_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PowerCycle_CurrentState = new ExpandedNodeId(Variables.SoftwareUpdateType_PowerCycle_CurrentState, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PowerCycle_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PowerCycle_CurrentState_Id = new ExpandedNodeId(Variables.SoftwareUpdateType_PowerCycle_CurrentState_Id, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PrepareForUpdate_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PrepareForUpdate_CurrentState = new ExpandedNodeId(Variables.SoftwareUpdateType_PrepareForUpdate_CurrentState, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_PrepareForUpdate_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_PrepareForUpdate_CurrentState_Id = new ExpandedNodeId(Variables.SoftwareUpdateType_PrepareForUpdate_CurrentState_Id, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_UpdateStatus Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_UpdateStatus = new ExpandedNodeId(Variables.SoftwareUpdateType_UpdateStatus, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareUpdateType_VendorErrorCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareUpdateType_VendorErrorCode = new ExpandedNodeId(Variables.SoftwareUpdateType_VendorErrorCode, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_ChangeLogReference Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_ChangeLogReference = new ExpandedNodeId(Variables.SoftwareVersionType_ChangeLogReference, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_Hash Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_Hash = new ExpandedNodeId(Variables.SoftwareVersionType_Hash, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_Manufacturer = new ExpandedNodeId(Variables.SoftwareVersionType_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_ManufacturerUri = new ExpandedNodeId(Variables.SoftwareVersionType_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_PatchIdentifiers Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_PatchIdentifiers = new ExpandedNodeId(Variables.SoftwareVersionType_PatchIdentifiers, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_ReleaseDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_ReleaseDate = new ExpandedNodeId(Variables.SoftwareVersionType_ReleaseDate, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareVersionType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareVersionType_SoftwareRevision = new ExpandedNodeId(Variables.SoftwareVersionType_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_ConfirmationTimeout Variable.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_ConfirmationTimeout = new ExpandedNodeId(Variables.ConfirmationStateMachineType_ConfirmationTimeout, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_NotWaitingForConfirm_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_NotWaitingForConfirm_StateNumber = new ExpandedNodeId(Variables.ConfirmationStateMachineType_NotWaitingForConfirm_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm_TransitionNumber = new ExpandedNodeId(Variables.ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_WaitingForConfirm_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_WaitingForConfirm_StateNumber = new ExpandedNodeId(Variables.ConfirmationStateMachineType_WaitingForConfirm_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm_TransitionNumber = new ExpandedNodeId(Variables.ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Error_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Error_StateNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_Error_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_ErrorToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_ErrorToIdle_TransitionNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_ErrorToIdle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Idle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Idle_StateNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_Idle_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_IdleToInstalling_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_IdleToInstalling_TransitionNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_IdleToInstalling_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallationDelay Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallationDelay = new ExpandedNodeId(Variables.InstallationStateMachineType_InstallationDelay, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallFiles_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallFiles_InputArguments = new ExpandedNodeId(Variables.InstallationStateMachineType_InstallFiles_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_Installing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_Installing_StateNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_Installing_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallingToError_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallingToError_TransitionNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_InstallingToError_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallingToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallingToIdle_TransitionNumber = new ExpandedNodeId(Variables.InstallationStateMachineType_InstallingToIdle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_InstallSoftwarePackage_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_InstallSoftwarePackage_InputArguments = new ExpandedNodeId(Variables.InstallationStateMachineType_InstallSoftwarePackage_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the InstallationStateMachineType_PercentComplete Variable.
        /// </summary>
        public static readonly ExpandedNodeId InstallationStateMachineType_PercentComplete = new ExpandedNodeId(Variables.InstallationStateMachineType_PercentComplete, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_NotWaitingForPowerCycle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_NotWaitingForPowerCycle_StateNumber = new ExpandedNodeId(Variables.PowerCycleStateMachineType_NotWaitingForPowerCycle_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle_TransitionNumber = new ExpandedNodeId(Variables.PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_WaitingForPowerCycle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_WaitingForPowerCycle_StateNumber = new ExpandedNodeId(Variables.PowerCycleStateMachineType_WaitingForPowerCycle_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle_TransitionNumber = new ExpandedNodeId(Variables.PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Idle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Idle_StateNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_Idle_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_IdleToPreparing_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_IdleToPreparing_TransitionNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_IdleToPreparing_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PercentComplete Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PercentComplete = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_PercentComplete, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparedForUpdate_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparedForUpdate_StateNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_PreparedForUpdate_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparedForUpdateToResuming_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparedForUpdateToResuming_TransitionNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_PreparedForUpdateToResuming_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Preparing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Preparing_StateNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_Preparing_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparingToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparingToIdle_TransitionNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_PreparingToIdle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate_TransitionNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_Resuming_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_Resuming_StateNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_Resuming_StateNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the PrepareForUpdateStateMachineType_ResumingToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId PrepareForUpdateStateMachineType_ResumingToIdle_TransitionNumber = new ExpandedNodeId(Variables.PrepareForUpdateStateMachineType_ResumingToIdle_TransitionNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType_ActualMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BlockType_ActualMode = new ExpandedNodeId(Variables.BlockType_ActualMode, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType_NormalMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BlockType_NormalMode = new ExpandedNodeId(Variables.BlockType_NormalMode, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType_PermittedMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BlockType_PermittedMode = new ExpandedNodeId(Variables.BlockType_PermittedMode, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId BlockType_RevisionCounter = new ExpandedNodeId(Variables.BlockType_RevisionCounter, Namespaces.DI);

        /// <summary>
        /// The identifier for the BlockType_TargetMode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BlockType_TargetMode = new ExpandedNodeId(Variables.BlockType_TargetMode, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_AssetId = new ExpandedNodeId(Variables.ComponentType_AssetId, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_ComponentName = new ExpandedNodeId(Variables.ComponentType_ComponentName, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_DeviceClass = new ExpandedNodeId(Variables.ComponentType_DeviceClass, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_DeviceManual = new ExpandedNodeId(Variables.ComponentType_DeviceManual, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_DeviceRevision = new ExpandedNodeId(Variables.ComponentType_DeviceRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceClass Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceClass = new ExpandedNodeId(Variables.DeviceType_DeviceClass, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceHealth = new ExpandedNodeId(Variables.DeviceType_DeviceHealth, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceManual = new ExpandedNodeId(Variables.DeviceType_DeviceManual, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceRevision = new ExpandedNodeId(Variables.DeviceType_DeviceRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_DeviceTypeImage_ImageIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_DeviceTypeImage_ImageIdentifier = new ExpandedNodeId(Variables.DeviceType_DeviceTypeImage_ImageIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_Documentation_DocumentIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_Documentation_DocumentIdentifier = new ExpandedNodeId(Variables.DeviceType_Documentation_DocumentIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_HardwareRevision = new ExpandedNodeId(Variables.DeviceType_HardwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ImageSet_ImageIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ImageSet_ImageIdentifier = new ExpandedNodeId(Variables.DeviceType_ImageSet_ImageIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_Manufacturer = new ExpandedNodeId(Variables.DeviceType_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ManufacturerUri = new ExpandedNodeId(Variables.DeviceType_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_Model = new ExpandedNodeId(Variables.DeviceType_Model, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ProductCode = new ExpandedNodeId(Variables.DeviceType_ProductCode, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ProductInstanceUri = new ExpandedNodeId(Variables.DeviceType_ProductInstanceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_ProtocolSupport_ProtocolSupportIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_ProtocolSupport_ProtocolSupportIdentifier = new ExpandedNodeId(Variables.DeviceType_ProtocolSupport_ProtocolSupportIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_RevisionCounter = new ExpandedNodeId(Variables.DeviceType_RevisionCounter, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_SerialNumber = new ExpandedNodeId(Variables.DeviceType_SerialNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceType_SoftwareRevision = new ExpandedNodeId(Variables.DeviceType_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_HardwareRevision = new ExpandedNodeId(Variables.ComponentType_HardwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_Manufacturer = new ExpandedNodeId(Variables.ComponentType_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_ManufacturerUri = new ExpandedNodeId(Variables.ComponentType_ManufacturerUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_Model = new ExpandedNodeId(Variables.ComponentType_Model, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_ProductCode = new ExpandedNodeId(Variables.ComponentType_ProductCode, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_ProductInstanceUri = new ExpandedNodeId(Variables.ComponentType_ProductInstanceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_RevisionCounter = new ExpandedNodeId(Variables.ComponentType_RevisionCounter, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_SerialNumber = new ExpandedNodeId(Variables.ComponentType_SerialNumber, Namespaces.DI);

        /// <summary>
        /// The identifier for the ComponentType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId ComponentType_SoftwareRevision = new ExpandedNodeId(Variables.ComponentType_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareType_Manufacturer = new ExpandedNodeId(Variables.SoftwareType_Manufacturer, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareType_Model = new ExpandedNodeId(Variables.SoftwareType_Model, Namespaces.DI);

        /// <summary>
        /// The identifier for the SoftwareType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId SoftwareType_SoftwareRevision = new ExpandedNodeId(Variables.SoftwareType_SoftwareRevision, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.TopologyElementType_Lock_BreakLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.TopologyElementType_Lock_ExitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.TopologyElementType_Lock_InitLock_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.TopologyElementType_Lock_InitLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_Locked = new ExpandedNodeId(Variables.TopologyElementType_Lock_Locked, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_LockingClient = new ExpandedNodeId(Variables.TopologyElementType_Lock_LockingClient, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_LockingUser = new ExpandedNodeId(Variables.TopologyElementType_Lock_LockingUser, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_RemainingLockTime = new ExpandedNodeId(Variables.TopologyElementType_Lock_RemainingLockTime, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.TopologyElementType_Lock_RenewLock_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TopologyElementType_ParameterSet_ParameterIdentifier Variable.
        /// </summary>
        public static readonly ExpandedNodeId TopologyElementType_ParameterSet_ParameterIdentifier = new ExpandedNodeId(Variables.TopologyElementType_ParameterSet_ParameterIdentifier, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_FetchTransferResultData_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_FetchTransferResultData_InputArguments = new ExpandedNodeId(Variables.TransferServicesType_FetchTransferResultData_InputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_FetchTransferResultData_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_FetchTransferResultData_OutputArguments = new ExpandedNodeId(Variables.TransferServicesType_FetchTransferResultData_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_TransferFromDevice_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_TransferFromDevice_OutputArguments = new ExpandedNodeId(Variables.TransferServicesType_TransferFromDevice_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the TransferServicesType_TransferToDevice_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TransferServicesType_TransferToDevice_OutputArguments = new ExpandedNodeId(Variables.TransferServicesType_TransferToDevice_OutputArguments, Namespaces.DI);

        /// <summary>
        /// The identifier for the LifetimeVariableType_Indication Variable.
        /// </summary>
        public static readonly ExpandedNodeId LifetimeVariableType_Indication = new ExpandedNodeId(Variables.LifetimeVariableType_Indication, Namespaces.DI);

        /// <summary>
        /// The identifier for the LifetimeVariableType_LimitValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId LifetimeVariableType_LimitValue = new ExpandedNodeId(Variables.LifetimeVariableType_LimitValue, Namespaces.DI);

        /// <summary>
        /// The identifier for the LifetimeVariableType_StartValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId LifetimeVariableType_StartValue = new ExpandedNodeId(Variables.LifetimeVariableType_StartValue, Namespaces.DI);

        /// <summary>
        /// The identifier for the LifetimeVariableType_WarningValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId LifetimeVariableType_WarningValues = new ExpandedNodeId(Variables.LifetimeVariableType_WarningValues, Namespaces.DI);

        /// <summary>
        /// The identifier for the DeviceTopology_OnlineAccess Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceTopology_OnlineAccess = new ExpandedNodeId(Variables.DeviceTopology_OnlineAccess, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_DefaultAccessRestrictions Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_DefaultAccessRestrictions = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_DefaultAccessRestrictions, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_DefaultRolePermissions Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_DefaultRolePermissions = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_DefaultRolePermissions, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_DefaultUserRolePermissions Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_DefaultUserRolePermissions = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_DefaultUserRolePermissions, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_IsNamespaceSubset Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_IsNamespaceSubset = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_IsNamespaceSubset, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_NamespacePublicationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_NamespacePublicationDate = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_NamespacePublicationDate, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_NamespaceUri = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_NamespaceUri, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_NamespaceVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_NamespaceVersion = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_NamespaceVersion, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_StaticNodeIdTypes Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_StaticNodeIdTypes = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_StaticNodeIdTypes, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_StaticNumericNodeIdRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_StaticNumericNodeIdRange = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_StaticNumericNodeIdRange, Namespaces.DI);

        /// <summary>
        /// The identifier for the Namespaces_OPCUADINamespaceMetadata_StaticStringNodeIdPattern Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_OPCUADINamespaceMetadata_StaticStringNodeIdPattern = new ExpandedNodeId(Variables.Namespaces_OPCUADINamespaceMetadata_StaticStringNodeIdPattern, Namespaces.DI);

        /// <summary>
        /// The identifier for the ServerCapabilities_MaxInactiveLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId ServerCapabilities_MaxInactiveLockTime = new ExpandedNodeId(Variables.ServerCapabilities_MaxInactiveLockTime, Namespaces.DI);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares ExpandedNodeIds for all VariableType in the Model.
    /// </summary>
    /// <remarks>
    /// Call ExpandedNodeId.ToNodeId to use these constants.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("UaModeler", "1.6.9")]
    public static partial class VariableTypeIds
    {
        /// <summary>
        /// The identifier for the LifetimeVariableType VariableType.
        /// </summary>
        public static readonly ExpandedNodeId LifetimeVariableType = new ExpandedNodeId(VariableTypes.LifetimeVariableType, Namespaces.DI);

        /// <summary>
        /// The identifier for the UIElementType VariableType.
        /// </summary>
        public static readonly ExpandedNodeId UIElementType = new ExpandedNodeId(VariableTypes.UIElementType, Namespaces.DI);

    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the &lt;CPIdentifier&gt; component.
        /// </summary>
        public const string CPIdentifier = "<CPIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;DocumentFileId&gt; component.
        /// </summary>
        public const string DocumentFileId = "<DocumentFileId>";
        /// <summary>
        /// The BrowseName for the &lt;DocumentIdentifier&gt; component.
        /// </summary>
        public const string DocumentIdentifier = "<DocumentIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;GroupIdentifier&gt; component.
        /// </summary>
        public const string GroupIdentifier = "<GroupIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ImageIdentifier&gt; component.
        /// </summary>
        public const string ImageIdentifier = "<ImageIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;NetworkIdentifier&gt; component.
        /// </summary>
        public const string NetworkIdentifier = "<NetworkIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ObjectIdentifier&gt; component.
        /// </summary>
        public const string ObjectIdentifier = "<ObjectIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ParameterIdentifier&gt; component.
        /// </summary>
        public const string ParameterIdentifier = "<ParameterIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ProfileIdentifier&gt; component.
        /// </summary>
        public const string ProfileIdentifier = "<ProfileIdentifier>";
        /// <summary>
        /// The BrowseName for the &lt;ProtocolSupportIdentifier&gt; component.
        /// </summary>
        public const string ProtocolSupportIdentifier = "<ProtocolSupportIdentifier>";
        /// <summary>
        /// The BrowseName for the Abort component.
        /// </summary>
        public const string Abort = "Abort";
        /// <summary>
        /// The BrowseName for the ActualMode component.
        /// </summary>
        public const string ActualMode = "ActualMode";
        /// <summary>
        /// The BrowseName for the AssetId component.
        /// </summary>
        public const string AssetId = "AssetId";
        /// <summary>
        /// The BrowseName for the BaseLifetimeIndicationType component.
        /// </summary>
        public const string BaseLifetimeIndicationType = "BaseLifetimeIndicationType";
        /// <summary>
        /// The BrowseName for the BlockType component.
        /// </summary>
        public const string BlockType = "BlockType";
        /// <summary>
        /// The BrowseName for the BreakLock component.
        /// </summary>
        public const string BreakLock = "BreakLock";
        /// <summary>
        /// The BrowseName for the CachedLoadingType component.
        /// </summary>
        public const string CachedLoadingType = "CachedLoadingType";
        /// <summary>
        /// The BrowseName for the ChangeLogReference component.
        /// </summary>
        public const string ChangeLogReference = "ChangeLogReference";
        /// <summary>
        /// The BrowseName for the CheckFunctionAlarmType component.
        /// </summary>
        public const string CheckFunctionAlarmType = "CheckFunctionAlarmType";
        /// <summary>
        /// The BrowseName for the ComponentName component.
        /// </summary>
        public const string ComponentName = "ComponentName";
        /// <summary>
        /// The BrowseName for the ComponentType component.
        /// </summary>
        public const string ComponentType = "ComponentType";
        /// <summary>
        /// The BrowseName for the ConfigurableObjectType component.
        /// </summary>
        public const string ConfigurableObjectType = "ConfigurableObjectType";
        /// <summary>
        /// The BrowseName for the Confirm component.
        /// </summary>
        public const string Confirm = "Confirm";
        /// <summary>
        /// The BrowseName for the Confirmation component.
        /// </summary>
        public const string Confirmation = "Confirmation";
        /// <summary>
        /// The BrowseName for the ConfirmationStateMachineType component.
        /// </summary>
        public const string ConfirmationStateMachineType = "ConfirmationStateMachineType";
        /// <summary>
        /// The BrowseName for the ConfirmationTimeout component.
        /// </summary>
        public const string ConfirmationTimeout = "ConfirmationTimeout";
        /// <summary>
        /// The BrowseName for the ConnectionPointType component.
        /// </summary>
        public const string ConnectionPointType = "ConnectionPointType";
        /// <summary>
        /// The BrowseName for the ConnectsTo component.
        /// </summary>
        public const string ConnectsTo = "ConnectsTo";
        /// <summary>
        /// The BrowseName for the ConnectsToParent component.
        /// </summary>
        public const string ConnectsToParent = "ConnectsToParent";
        /// <summary>
        /// The BrowseName for the CurrentVersion component.
        /// </summary>
        public const string CurrentVersion = "CurrentVersion";
        /// <summary>
        /// The BrowseName for the DeviceClass component.
        /// </summary>
        public const string DeviceClass = "DeviceClass";
        /// <summary>
        /// The BrowseName for the DeviceFeatures component.
        /// </summary>
        public const string DeviceFeatures = "DeviceFeatures";
        /// <summary>
        /// The BrowseName for the DeviceHealth component.
        /// </summary>
        public const string DeviceHealth = "DeviceHealth";
        /// <summary>
        /// The BrowseName for the DeviceHealthAlarms component.
        /// </summary>
        public const string DeviceHealthAlarms = "DeviceHealthAlarms";
        /// <summary>
        /// The BrowseName for the DeviceHealthDiagnosticAlarmType component.
        /// </summary>
        public const string DeviceHealthDiagnosticAlarmType = "DeviceHealthDiagnosticAlarmType";
        /// <summary>
        /// The BrowseName for the DeviceHealthEnumeration component.
        /// </summary>
        public const string DeviceHealthEnumeration = "DeviceHealthEnumeration";
        /// <summary>
        /// The BrowseName for the DeviceManual component.
        /// </summary>
        public const string DeviceManual = "DeviceManual";
        /// <summary>
        /// The BrowseName for the DeviceRevision component.
        /// </summary>
        public const string DeviceRevision = "DeviceRevision";
        /// <summary>
        /// The BrowseName for the DeviceSet component.
        /// </summary>
        public const string DeviceSet = "DeviceSet";
        /// <summary>
        /// The BrowseName for the DeviceTopology component.
        /// </summary>
        public const string DeviceTopology = "DeviceTopology";
        /// <summary>
        /// The BrowseName for the DeviceType component.
        /// </summary>
        public const string DeviceType = "DeviceType";
        /// <summary>
        /// The BrowseName for the DeviceTypeImage component.
        /// </summary>
        public const string DeviceTypeImage = "DeviceTypeImage";
        /// <summary>
        /// The BrowseName for the DiameterIndicationType component.
        /// </summary>
        public const string DiameterIndicationType = "DiameterIndicationType";
        /// <summary>
        /// The BrowseName for the DirectLoadingType component.
        /// </summary>
        public const string DirectLoadingType = "DirectLoadingType";
        /// <summary>
        /// The BrowseName for the Documentation component.
        /// </summary>
        public const string Documentation = "Documentation";
        /// <summary>
        /// The BrowseName for the DocumentationFiles component.
        /// </summary>
        public const string DocumentationFiles = "DocumentationFiles";
        /// <summary>
        /// The BrowseName for the Error component.
        /// </summary>
        public const string Error = "Error";
        /// <summary>
        /// The BrowseName for the ErrorMessage component.
        /// </summary>
        public const string ErrorMessage = "ErrorMessage";
        /// <summary>
        /// The BrowseName for the ErrorToIdle component.
        /// </summary>
        public const string ErrorToIdle = "ErrorToIdle";
        /// <summary>
        /// The BrowseName for the ExitLock component.
        /// </summary>
        public const string ExitLock = "ExitLock";
        /// <summary>
        /// The BrowseName for the FailureAlarmType component.
        /// </summary>
        public const string FailureAlarmType = "FailureAlarmType";
        /// <summary>
        /// The BrowseName for the FallbackVersion component.
        /// </summary>
        public const string FallbackVersion = "FallbackVersion";
        /// <summary>
        /// The BrowseName for the FetchResultDataType component.
        /// </summary>
        public const string FetchResultDataType = "FetchResultDataType";
        /// <summary>
        /// The BrowseName for the FetchTransferResultData component.
        /// </summary>
        public const string FetchTransferResultData = "FetchTransferResultData";
        /// <summary>
        /// The BrowseName for the FileSystemLoadingType component.
        /// </summary>
        public const string FileSystemLoadingType = "FileSystemLoadingType";
        /// <summary>
        /// The BrowseName for the FileTransfer component.
        /// </summary>
        public const string FileTransfer = "FileTransfer";
        /// <summary>
        /// The BrowseName for the FunctionalGroupType component.
        /// </summary>
        public const string FunctionalGroupType = "FunctionalGroupType";
        /// <summary>
        /// The BrowseName for the GetUpdateBehavior component.
        /// </summary>
        public const string GetUpdateBehavior = "GetUpdateBehavior";
        /// <summary>
        /// The BrowseName for the HardwareRevision component.
        /// </summary>
        public const string HardwareRevision = "HardwareRevision";
        /// <summary>
        /// The BrowseName for the Hash component.
        /// </summary>
        public const string Hash = "Hash";
        /// <summary>
        /// The BrowseName for the IDeviceHealthType component.
        /// </summary>
        public const string IDeviceHealthType = "IDeviceHealthType";
        /// <summary>
        /// The BrowseName for the IOperationCounterType component.
        /// </summary>
        public const string IOperationCounterType = "IOperationCounterType";
        /// <summary>
        /// The BrowseName for the ISupportInfoType component.
        /// </summary>
        public const string ISupportInfoType = "ISupportInfoType";
        /// <summary>
        /// The BrowseName for the ITagNameplateType component.
        /// </summary>
        public const string ITagNameplateType = "ITagNameplateType";
        /// <summary>
        /// The BrowseName for the IVendorNameplateType component.
        /// </summary>
        public const string IVendorNameplateType = "IVendorNameplateType";
        /// <summary>
        /// The BrowseName for the Identification component.
        /// </summary>
        public const string Identification = "Identification";
        /// <summary>
        /// The BrowseName for the Idle component.
        /// </summary>
        public const string Idle = "Idle";
        /// <summary>
        /// The BrowseName for the IdleToInstalling component.
        /// </summary>
        public const string IdleToInstalling = "IdleToInstalling";
        /// <summary>
        /// The BrowseName for the IdleToPreparing component.
        /// </summary>
        public const string IdleToPreparing = "IdleToPreparing";
        /// <summary>
        /// The BrowseName for the ImageSet component.
        /// </summary>
        public const string ImageSet = "ImageSet";
        /// <summary>
        /// The BrowseName for the Indication component.
        /// </summary>
        public const string Indication = "Indication";
        /// <summary>
        /// The BrowseName for the InitLock component.
        /// </summary>
        public const string InitLock = "InitLock";
        /// <summary>
        /// The BrowseName for the InstallFiles component.
        /// </summary>
        public const string InstallFiles = "InstallFiles";
        /// <summary>
        /// The BrowseName for the InstallSoftwarePackage component.
        /// </summary>
        public const string InstallSoftwarePackage = "InstallSoftwarePackage";
        /// <summary>
        /// The BrowseName for the Installation component.
        /// </summary>
        public const string Installation = "Installation";
        /// <summary>
        /// The BrowseName for the InstallationDelay component.
        /// </summary>
        public const string InstallationDelay = "InstallationDelay";
        /// <summary>
        /// The BrowseName for the InstallationStateMachineType component.
        /// </summary>
        public const string InstallationStateMachineType = "InstallationStateMachineType";
        /// <summary>
        /// The BrowseName for the Installing component.
        /// </summary>
        public const string Installing = "Installing";
        /// <summary>
        /// The BrowseName for the InstallingToError component.
        /// </summary>
        public const string InstallingToError = "InstallingToError";
        /// <summary>
        /// The BrowseName for the InstallingToIdle component.
        /// </summary>
        public const string InstallingToIdle = "InstallingToIdle";
        /// <summary>
        /// The BrowseName for the IsOnline component.
        /// </summary>
        public const string IsOnline = "IsOnline";
        /// <summary>
        /// The BrowseName for the LengthIndicationType component.
        /// </summary>
        public const string LengthIndicationType = "LengthIndicationType";
        /// <summary>
        /// The BrowseName for the LifetimeVariableType component.
        /// </summary>
        public const string LifetimeVariableType = "LifetimeVariableType";
        /// <summary>
        /// The BrowseName for the LimitValue component.
        /// </summary>
        public const string LimitValue = "LimitValue";
        /// <summary>
        /// The BrowseName for the Loading component.
        /// </summary>
        public const string Loading = "Loading";
        /// <summary>
        /// The BrowseName for the Lock component.
        /// </summary>
        public const string Lock = "Lock";
        /// <summary>
        /// The BrowseName for the Locked component.
        /// </summary>
        public const string Locked = "Locked";
        /// <summary>
        /// The BrowseName for the LockingClient component.
        /// </summary>
        public const string LockingClient = "LockingClient";
        /// <summary>
        /// The BrowseName for the LockingServicesType component.
        /// </summary>
        public const string LockingServicesType = "LockingServicesType";
        /// <summary>
        /// The BrowseName for the LockingUser component.
        /// </summary>
        public const string LockingUser = "LockingUser";
        /// <summary>
        /// The BrowseName for the MaintenanceRequiredAlarmType component.
        /// </summary>
        public const string MaintenanceRequiredAlarmType = "MaintenanceRequiredAlarmType";
        /// <summary>
        /// The BrowseName for the Manufacturer component.
        /// </summary>
        public const string Manufacturer = "Manufacturer";
        /// <summary>
        /// The BrowseName for the ManufacturerUri component.
        /// </summary>
        public const string ManufacturerUri = "ManufacturerUri";
        /// <summary>
        /// The BrowseName for the MaxInactiveLockTime component.
        /// </summary>
        public const string MaxInactiveLockTime = "MaxInactiveLockTime";
        /// <summary>
        /// The BrowseName for the MethodSet component.
        /// </summary>
        public const string MethodSet = "MethodSet";
        /// <summary>
        /// The BrowseName for the Model component.
        /// </summary>
        public const string Model = "Model";
        /// <summary>
        /// The BrowseName for the NetworkAddress component.
        /// </summary>
        public const string NetworkAddress = "NetworkAddress";
        /// <summary>
        /// The BrowseName for the NetworkSet component.
        /// </summary>
        public const string NetworkSet = "NetworkSet";
        /// <summary>
        /// The BrowseName for the NetworkType component.
        /// </summary>
        public const string NetworkType = "NetworkType";
        /// <summary>
        /// The BrowseName for the NormalMode component.
        /// </summary>
        public const string NormalMode = "NormalMode";
        /// <summary>
        /// The BrowseName for the NotWaitingForConfirm component.
        /// </summary>
        public const string NotWaitingForConfirm = "NotWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the NotWaitingForConfirmToWaitingForConfirm component.
        /// </summary>
        public const string NotWaitingForConfirmToWaitingForConfirm = "NotWaitingForConfirmToWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the NotWaitingForPowerCycle component.
        /// </summary>
        public const string NotWaitingForPowerCycle = "NotWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the NotWaitingForPowerCycleToWaitingForPowerCycle component.
        /// </summary>
        public const string NotWaitingForPowerCycleToWaitingForPowerCycle = "NotWaitingForPowerCycleToWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the NumberOfPartsIndicationType component.
        /// </summary>
        public const string NumberOfPartsIndicationType = "NumberOfPartsIndicationType";
        /// <summary>
        /// The BrowseName for the NumberOfUsagesIndicationType component.
        /// </summary>
        public const string NumberOfUsagesIndicationType = "NumberOfUsagesIndicationType";
        /// <summary>
        /// The BrowseName for the OffSpecAlarmType component.
        /// </summary>
        public const string OffSpecAlarmType = "OffSpecAlarmType";
        /// <summary>
        /// The BrowseName for the OnlineAccess component.
        /// </summary>
        public const string OnlineAccess = "OnlineAccess";
        /// <summary>
        /// The BrowseName for the Opc.Ua.Di component.
        /// </summary>
        public const string OpcUaDi_XmlSchema = "Opc.Ua.Di";
        /// <summary>
        /// The BrowseName for the OperationCycleCounter component.
        /// </summary>
        public const string OperationCycleCounter = "OperationCycleCounter";
        /// <summary>
        /// The BrowseName for the OperationDuration component.
        /// </summary>
        public const string OperationDuration = "OperationDuration";
        /// <summary>
        /// The BrowseName for the PackageLoadingType component.
        /// </summary>
        public const string PackageLoadingType = "PackageLoadingType";
        /// <summary>
        /// The BrowseName for the ParameterResultDataType component.
        /// </summary>
        public const string ParameterResultDataType = "ParameterResultDataType";
        /// <summary>
        /// The BrowseName for the ParameterSet component.
        /// </summary>
        public const string ParameterSet = "ParameterSet";
        /// <summary>
        /// The BrowseName for the Parameters component.
        /// </summary>
        public const string Parameters = "Parameters";
        /// <summary>
        /// The BrowseName for the PatchIdentifiers component.
        /// </summary>
        public const string PatchIdentifiers = "PatchIdentifiers";
        /// <summary>
        /// The BrowseName for the PendingVersion component.
        /// </summary>
        public const string PendingVersion = "PendingVersion";
        /// <summary>
        /// The BrowseName for the PercentComplete component.
        /// </summary>
        public const string PercentComplete = "PercentComplete";
        /// <summary>
        /// The BrowseName for the PermittedMode component.
        /// </summary>
        public const string PermittedMode = "PermittedMode";
        /// <summary>
        /// The BrowseName for the PowerCycle component.
        /// </summary>
        public const string PowerCycle = "PowerCycle";
        /// <summary>
        /// The BrowseName for the PowerCycleStateMachineType component.
        /// </summary>
        public const string PowerCycleStateMachineType = "PowerCycleStateMachineType";
        /// <summary>
        /// The BrowseName for the PowerOnDuration component.
        /// </summary>
        public const string PowerOnDuration = "PowerOnDuration";
        /// <summary>
        /// The BrowseName for the Prepare component.
        /// </summary>
        public const string Prepare = "Prepare";
        /// <summary>
        /// The BrowseName for the PrepareForUpdate component.
        /// </summary>
        public const string PrepareForUpdate = "PrepareForUpdate";
        /// <summary>
        /// The BrowseName for the PrepareForUpdateStateMachineType component.
        /// </summary>
        public const string PrepareForUpdateStateMachineType = "PrepareForUpdateStateMachineType";
        /// <summary>
        /// The BrowseName for the PreparedForUpdate component.
        /// </summary>
        public const string PreparedForUpdate = "PreparedForUpdate";
        /// <summary>
        /// The BrowseName for the PreparedForUpdateToResuming component.
        /// </summary>
        public const string PreparedForUpdateToResuming = "PreparedForUpdateToResuming";
        /// <summary>
        /// The BrowseName for the Preparing component.
        /// </summary>
        public const string Preparing = "Preparing";
        /// <summary>
        /// The BrowseName for the PreparingToIdle component.
        /// </summary>
        public const string PreparingToIdle = "PreparingToIdle";
        /// <summary>
        /// The BrowseName for the PreparingToPreparedForUpdate component.
        /// </summary>
        public const string PreparingToPreparedForUpdate = "PreparingToPreparedForUpdate";
        /// <summary>
        /// The BrowseName for the ProductCode component.
        /// </summary>
        public const string ProductCode = "ProductCode";
        /// <summary>
        /// The BrowseName for the ProductInstanceUri component.
        /// </summary>
        public const string ProductInstanceUri = "ProductInstanceUri";
        /// <summary>
        /// The BrowseName for the ProtocolSupport component.
        /// </summary>
        public const string ProtocolSupport = "ProtocolSupport";
        /// <summary>
        /// The BrowseName for the ProtocolType component.
        /// </summary>
        public const string ProtocolType = "ProtocolType";
        /// <summary>
        /// The BrowseName for the ReleaseDate component.
        /// </summary>
        public const string ReleaseDate = "ReleaseDate";
        /// <summary>
        /// The BrowseName for the RemainingLockTime component.
        /// </summary>
        public const string RemainingLockTime = "RemainingLockTime";
        /// <summary>
        /// The BrowseName for the RenewLock component.
        /// </summary>
        public const string RenewLock = "RenewLock";
        /// <summary>
        /// The BrowseName for the Resume component.
        /// </summary>
        public const string Resume = "Resume";
        /// <summary>
        /// The BrowseName for the Resuming component.
        /// </summary>
        public const string Resuming = "Resuming";
        /// <summary>
        /// The BrowseName for the ResumingToIdle component.
        /// </summary>
        public const string ResumingToIdle = "ResumingToIdle";
        /// <summary>
        /// The BrowseName for the RevisionCounter component.
        /// </summary>
        public const string RevisionCounter = "RevisionCounter";
        /// <summary>
        /// The BrowseName for the SerialNumber component.
        /// </summary>
        public const string SerialNumber = "SerialNumber";
        /// <summary>
        /// The BrowseName for the SoftwareLoadingType component.
        /// </summary>
        public const string SoftwareLoadingType = "SoftwareLoadingType";
        /// <summary>
        /// The BrowseName for the SoftwareReleaseDate component.
        /// </summary>
        public const string SoftwareReleaseDate = "SoftwareReleaseDate";
        /// <summary>
        /// The BrowseName for the SoftwareRevision component.
        /// </summary>
        public const string SoftwareRevision = "SoftwareRevision";
        /// <summary>
        /// The BrowseName for the SoftwareType component.
        /// </summary>
        public const string SoftwareType = "SoftwareType";
        /// <summary>
        /// The BrowseName for the SoftwareUpdateType component.
        /// </summary>
        public const string SoftwareUpdateType = "SoftwareUpdateType";
        /// <summary>
        /// The BrowseName for the SoftwareVersionFileType component.
        /// </summary>
        public const string SoftwareVersionFileType = "SoftwareVersionFileType";
        /// <summary>
        /// The BrowseName for the SoftwareVersionType component.
        /// </summary>
        public const string SoftwareVersionType = "SoftwareVersionType";
        /// <summary>
        /// The BrowseName for the StartValue component.
        /// </summary>
        public const string StartValue = "StartValue";
        /// <summary>
        /// The BrowseName for the SubstanceVolumeIndicationType component.
        /// </summary>
        public const string SubstanceVolumeIndicationType = "SubstanceVolumeIndicationType";
        /// <summary>
        /// The BrowseName for the SupportedTypes component.
        /// </summary>
        public const string SupportedTypes = "SupportedTypes";
        /// <summary>
        /// The BrowseName for the TargetMode component.
        /// </summary>
        public const string TargetMode = "TargetMode";
        /// <summary>
        /// The BrowseName for the TimeIndicationType component.
        /// </summary>
        public const string TimeIndicationType = "TimeIndicationType";
        /// <summary>
        /// The BrowseName for the TopologyElementType component.
        /// </summary>
        public const string TopologyElementType = "TopologyElementType";
        /// <summary>
        /// The BrowseName for the TransferFromDevice component.
        /// </summary>
        public const string TransferFromDevice = "TransferFromDevice";
        /// <summary>
        /// The BrowseName for the TransferResultDataDataType component.
        /// </summary>
        public const string TransferResultDataDataType = "TransferResultDataDataType";
        /// <summary>
        /// The BrowseName for the TransferResultErrorDataType component.
        /// </summary>
        public const string TransferResultErrorDataType = "TransferResultErrorDataType";
        /// <summary>
        /// The BrowseName for the TransferServicesType component.
        /// </summary>
        public const string TransferServicesType = "TransferServicesType";
        /// <summary>
        /// The BrowseName for the TransferToDevice component.
        /// </summary>
        public const string TransferToDevice = "TransferToDevice";
        /// <summary>
        /// The BrowseName for the UIElement component.
        /// </summary>
        public const string UIElement = "UIElement";
        /// <summary>
        /// The BrowseName for the UIElementType component.
        /// </summary>
        public const string UIElementType = "UIElementType";
        /// <summary>
        /// The BrowseName for the UpdateBehavior component.
        /// </summary>
        public const string UpdateBehavior = "UpdateBehavior";
        /// <summary>
        /// The BrowseName for the UpdateKey component.
        /// </summary>
        public const string UpdateKey = "UpdateKey";
        /// <summary>
        /// The BrowseName for the UpdateStatus component.
        /// </summary>
        public const string UpdateStatus = "UpdateStatus";
        /// <summary>
        /// The BrowseName for the ValidateFiles component.
        /// </summary>
        public const string ValidateFiles = "ValidateFiles";
        /// <summary>
        /// The BrowseName for the VendorErrorCode component.
        /// </summary>
        public const string VendorErrorCode = "VendorErrorCode";
        /// <summary>
        /// The BrowseName for the WaitingForConfirm component.
        /// </summary>
        public const string WaitingForConfirm = "WaitingForConfirm";
        /// <summary>
        /// The BrowseName for the WaitingForConfirmToNotWaitingForConfirm component.
        /// </summary>
        public const string WaitingForConfirmToNotWaitingForConfirm = "WaitingForConfirmToNotWaitingForConfirm";
        /// <summary>
        /// The BrowseName for the WaitingForPowerCycle component.
        /// </summary>
        public const string WaitingForPowerCycle = "WaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the WaitingForPowerCycleToNotWaitingForPowerCycle component.
        /// </summary>
        public const string WaitingForPowerCycleToNotWaitingForPowerCycle = "WaitingForPowerCycleToNotWaitingForPowerCycle";
        /// <summary>
        /// The BrowseName for the WarningValues component.
        /// </summary>
        public const string WarningValues = "WarningValues";
        /// <summary>
        /// The BrowseName for the WriteBlockSize component.
        /// </summary>
        public const string WriteBlockSize = "WriteBlockSize";
        /// <summary>
        /// The BrowseName for the WriteTimeout component.
        /// </summary>
        public const string WriteTimeout = "WriteTimeout";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/DI/ component.
        /// </summary>
        public const string OPCUADINamespaceMetadata = "http://opcfoundation.org/UA/DI/";
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the DI namespace.
        /// </summary>
        public const string DI = "http://opcfoundation.org/UA/DI/";

        /// <summary>
        /// The URI for the DIXsd namespace.
        /// </summary>
        public const string DIXsd = "http://opcfoundation.org/UA/DI/Types.xsd";
    }
    #endregion
}

