/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/DI/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace OpcUa.DI
{
    #region IDeviceHealthModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.5.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IDeviceHealthType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class IDeviceHealthModel : BaseInterfaceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IDeviceHealthModel" /> class.
        /// </summary>
        public IDeviceHealthModel() : this((IDeviceHealthModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IDeviceHealthModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public IDeviceHealthModel(IDeviceHealthModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.DeviceHealth != null)
                {
                    DeviceHealth = template.DeviceHealth;
                }
                if (template.DeviceHealthAlarms != null)
                {
                    DeviceHealthAlarms = new FolderModel(template.DeviceHealthAlarms);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the DeviceHealth
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public DeviceHealthEnumeration? DeviceHealth
        {
            get => m_DeviceHealth;
            set => SetField(ref m_DeviceHealth, value, nameof(DeviceHealth));
        }
        private DeviceHealthEnumeration? m_DeviceHealth;

        /// <summary>
        /// Gets or sets the DeviceHealthAlarms
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel DeviceHealthAlarms { get; set; }


        #endregion
    }
    #endregion


    #region IOperationCounterModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.5.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IOperationCounterType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class IOperationCounterModel : BaseInterfaceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IOperationCounterModel" /> class.
        /// </summary>
        public IOperationCounterModel() : this((IOperationCounterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IOperationCounterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public IOperationCounterModel(IOperationCounterModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.OperationCycleCounter != null)
                {
                    OperationCycleCounter = template.OperationCycleCounter;
                }
                if (template.OperationDuration != null)
                {
                    OperationDuration = template.OperationDuration;
                }
                if (template.PowerOnDuration != null)
                {
                    PowerOnDuration = template.PowerOnDuration;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the OperationCycleCounter
        /// </summary>
        /// <details>
        /// OperationCycleCounter is counting the times the Device switches from not performing an activity to performing an activity. For example, each time a valve starts moving, is counted. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public object OperationCycleCounter
        {
            get => m_OperationCycleCounter;
            set => SetField(ref m_OperationCycleCounter, value, nameof(OperationCycleCounter));
        }
        private object m_OperationCycleCounter;

        /// <summary>
        /// Gets or sets the OperationDuration
        /// </summary>
        /// <details>
        /// OperationDuration is the duration the Device has been powered and performing an activity. This counter is intended for Devices where a distinction is made between switched on and in operation. For example, a drive might be powered on but not operating. It is not intended for Devices always performing an activity like sensors always measuring data. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted. The OperationDuration is provided as Duration, i.e., in milliseconds or even fractions of a millisecond. However, the Server is not expected to update the value in such a high frequency, but maybe once a minute or once an hour, depending on the application.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double? OperationDuration
        {
            get => m_OperationDuration;
            set => SetField(ref m_OperationDuration, value, nameof(OperationDuration));
        }
        private double? m_OperationDuration;

        /// <summary>
        /// Gets or sets the PowerOnDuration
        /// </summary>
        /// <details>
        /// PowerOnDuration is the duration the Device has been powered. The main purpose is to determine the time in which degradation of the Device occurred. The details, when the time is counted, is implementation-specific. Companion specifications might define specific rules. Typically, when the Device has supply voltage and the main CPU is running, the time is counted. This may include any kind of sleep mode, but may not include pure Wake on LAN. This value shall only increase during the lifetime of the Device and shall not be reset when the Device is restarted. The PowerOnDuration is provided as Duration, i.e., in milliseconds or even fractions of a millisecond. However, the Server is not expected to update the value in such a high frequency, but maybe once a minute or once an hour, depending on the application.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double? PowerOnDuration
        {
            get => m_PowerOnDuration;
            set => SetField(ref m_PowerOnDuration, value, nameof(PowerOnDuration));
        }
        private double? m_PowerOnDuration;


        #endregion
    }
    #endregion


    #region ISupportInfoModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.5.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ISupportInfoType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ISupportInfoModel : BaseInterfaceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ISupportInfoModel" /> class.
        /// </summary>
        public ISupportInfoModel() : this((ISupportInfoModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ISupportInfoModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ISupportInfoModel(ISupportInfoModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.DeviceTypeImage != null)
                {
                    DeviceTypeImage = new FolderModel(template.DeviceTypeImage);
                }
                if (template.Documentation != null)
                {
                    Documentation = new FolderModel(template.Documentation);
                }
                if (template.DocumentationFiles != null)
                {
                    DocumentationFiles = new FolderModel(template.DocumentationFiles);
                }
                if (template.ImageSet != null)
                {
                    ImageSet = new FolderModel(template.ImageSet);
                }
                if (template.ProtocolSupport != null)
                {
                    ProtocolSupport = new FolderModel(template.ProtocolSupport);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.2
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel DeviceTypeImage { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.3
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel Documentation { get; set; }

        /// <summary>
        /// Gets or sets the DocumentationFiles
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel DocumentationFiles { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.5
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel ImageSet { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.4
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel ProtocolSupport { get; set; }


        #endregion
    }
    #endregion


    #region ITagNameplateModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.5.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ITagNameplateType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ITagNameplateModel : BaseInterfaceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ITagNameplateModel" /> class.
        /// </summary>
        public ITagNameplateModel() : this((ITagNameplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ITagNameplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ITagNameplateModel(ITagNameplateModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.AssetId != null)
                {
                    AssetId = template.AssetId.Clone() as string;
                }
                if (template.ComponentName != null)
                {
                    ComponentName = template.ComponentName.Clone() as LocalizedText;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string AssetId
        {
            get => m_AssetId;
            set => SetField(ref m_AssetId, value, nameof(AssetId));
        }
        private string m_AssetId;

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText ComponentName
        {
            get => m_ComponentName;
            set => SetField(ref m_ComponentName, value, nameof(ComponentName));
        }
        private LocalizedText m_ComponentName;


        #endregion
    }
    #endregion


    #region IVendorNameplateModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.5.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.IVendorNameplateType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class IVendorNameplateModel : BaseInterfaceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="IVendorNameplateModel" /> class.
        /// </summary>
        public IVendorNameplateModel() : this((IVendorNameplateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IVendorNameplateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public IVendorNameplateModel(IVendorNameplateModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.DeviceManual != null)
                {
                    DeviceManual = template.DeviceManual.Clone() as string;
                }
                if (template.DeviceRevision != null)
                {
                    DeviceRevision = template.DeviceRevision.Clone() as string;
                }
                if (template.HardwareRevision != null)
                {
                    HardwareRevision = template.HardwareRevision.Clone() as string;
                }
                if (template.Manufacturer != null)
                {
                    Manufacturer = template.Manufacturer.Clone() as LocalizedText;
                }
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                if (template.Model != null)
                {
                    Model = template.Model.Clone() as LocalizedText;
                }
                if (template.PatchIdentifiers != null)
                {
                    PatchIdentifiers = template.PatchIdentifiers.Clone() as string[];
                }
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                if (template.ProductInstanceUri != null)
                {
                    ProductInstanceUri = template.ProductInstanceUri.Clone() as string;
                }
                if (template.RevisionCounter != null)
                {
                    RevisionCounter = template.RevisionCounter;
                }
                if (template.SerialNumber != null)
                {
                    SerialNumber = template.SerialNumber.Clone() as string;
                }
                if (template.SoftwareReleaseDate != null)
                {
                    SoftwareReleaseDate = template.SoftwareReleaseDate;
                }
                if (template.SoftwareRevision != null)
                {
                    SoftwareRevision = template.SoftwareRevision.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceClass
        {
            get => m_DeviceClass;
            set => SetField(ref m_DeviceClass, value, nameof(DeviceClass));
        }
        private string m_DeviceClass;

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceManual
        {
            get => m_DeviceManual;
            set => SetField(ref m_DeviceManual, value, nameof(DeviceManual));
        }
        private string m_DeviceManual;

        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceRevision
        {
            get => m_DeviceRevision;
            set => SetField(ref m_DeviceRevision, value, nameof(DeviceRevision));
        }
        private string m_DeviceRevision;

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string HardwareRevision
        {
            get => m_HardwareRevision;
            set => SetField(ref m_HardwareRevision, value, nameof(HardwareRevision));
        }
        private string m_HardwareRevision;

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText Manufacturer
        {
            get => m_Manufacturer;
            set => SetField(ref m_Manufacturer, value, nameof(Manufacturer));
        }
        private LocalizedText m_Manufacturer;

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ManufacturerUri
        {
            get => m_ManufacturerUri;
            set => SetField(ref m_ManufacturerUri, value, nameof(ManufacturerUri));
        }
        private string m_ManufacturerUri;

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText Model
        {
            get => m_Model;
            set => SetField(ref m_Model, value, nameof(Model));
        }
        private LocalizedText m_Model;

        /// <summary>
        /// Gets or sets the PatchIdentifiers
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string[] PatchIdentifiers
        {
            get => m_PatchIdentifiers;
            set => SetField(ref m_PatchIdentifiers, value, nameof(PatchIdentifiers));
        }
        private string[] m_PatchIdentifiers;

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ProductCode
        {
            get => m_ProductCode;
            set => SetField(ref m_ProductCode, value, nameof(ProductCode));
        }
        private string m_ProductCode;

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ProductInstanceUri
        {
            get => m_ProductInstanceUri;
            set => SetField(ref m_ProductInstanceUri, value, nameof(ProductInstanceUri));
        }
        private string m_ProductInstanceUri;

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public int? RevisionCounter
        {
            get => m_RevisionCounter;
            set => SetField(ref m_RevisionCounter, value, nameof(RevisionCounter));
        }
        private int? m_RevisionCounter;

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string SerialNumber
        {
            get => m_SerialNumber;
            set => SetField(ref m_SerialNumber, value, nameof(SerialNumber));
        }
        private string m_SerialNumber;

        /// <summary>
        /// Gets or sets the SoftwareReleaseDate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public DateTime? SoftwareReleaseDate
        {
            get => m_SoftwareReleaseDate;
            set => SetField(ref m_SoftwareReleaseDate, value, nameof(SoftwareReleaseDate));
        }
        private DateTime? m_SoftwareReleaseDate;

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string SoftwareRevision
        {
            get => m_SoftwareRevision;
            set => SetField(ref m_SoftwareRevision, value, nameof(SoftwareRevision));
        }
        private string m_SoftwareRevision;


        #endregion
    }
    #endregion


    #region BaseLifetimeIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.3.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BaseLifetimeIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class BaseLifetimeIndicationModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseLifetimeIndicationModel" /> class.
        /// </summary>
        public BaseLifetimeIndicationModel() : this((BaseLifetimeIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseLifetimeIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public BaseLifetimeIndicationModel(BaseLifetimeIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region DiameterIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.8.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DiameterIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class DiameterIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DiameterIndicationModel" /> class.
        /// </summary>
        public DiameterIndicationModel() : this((DiameterIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiameterIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public DiameterIndicationModel(DiameterIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region LengthIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.7.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LengthIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class LengthIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LengthIndicationModel" /> class.
        /// </summary>
        public LengthIndicationModel() : this((LengthIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LengthIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public LengthIndicationModel(LengthIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region NumberOfPartsIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.5.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.NumberOfPartsIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class NumberOfPartsIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberOfPartsIndicationModel" /> class.
        /// </summary>
        public NumberOfPartsIndicationModel() : this((NumberOfPartsIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberOfPartsIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public NumberOfPartsIndicationModel(NumberOfPartsIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region NumberOfUsagesIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.6.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.NumberOfUsagesIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class NumberOfUsagesIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberOfUsagesIndicationModel" /> class.
        /// </summary>
        public NumberOfUsagesIndicationModel() : this((NumberOfUsagesIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberOfUsagesIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public NumberOfUsagesIndicationModel(NumberOfUsagesIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region SubstanceVolumeIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.9.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SubstanceVolumeIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class SubstanceVolumeIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SubstanceVolumeIndicationModel" /> class.
        /// </summary>
        public SubstanceVolumeIndicationModel() : this((SubstanceVolumeIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubstanceVolumeIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SubstanceVolumeIndicationModel(SubstanceVolumeIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region TimeIndicationModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.4.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TimeIndicationType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class TimeIndicationModel : BaseLifetimeIndicationModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeIndicationModel" /> class.
        /// </summary>
        public TimeIndicationModel() : this((TimeIndicationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeIndicationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public TimeIndicationModel(TimeIndicationModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region ConfigurableObjectModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/9.2.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ConfigurableObjectType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ConfigurableObjectModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurableObjectModel" /> class.
        /// </summary>
        public ConfigurableObjectModel() : this((ConfigurableObjectModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurableObjectModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ConfigurableObjectModel(ConfigurableObjectModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                SupportedTypes = new FolderModel();
            }
            else
            {
                SupportedTypes = new FolderModel(template.SupportedTypes);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the SupportedTypes
        /// </summary>
        /// <details>
        /// Folder maintaining the set of (sub-types of) BaseObjectTypes that can be instantiated in the ConfigurableComponent
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel SupportedTypes { get; set; }


        #endregion
    }
    #endregion


    #region FunctionalGroupModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.4.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FunctionalGroupType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class FunctionalGroupModel : FolderModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalGroupModel" /> class.
        /// </summary>
        public FunctionalGroupModel() : this((FunctionalGroupModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionalGroupModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public FunctionalGroupModel(FunctionalGroupModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.UIElement != null)
                {
                    UIElement = template.UIElement;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the UIElement
        /// </summary>
        /// <details>
        /// A user interface element assigned to this group.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public object UIElement
        {
            get => m_UIElement;
            set => SetField(ref m_UIElement, value, nameof(UIElement));
        }
        private object m_UIElement;


        #endregion
    }
    #endregion


    #region LockingServicesModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/7.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.LockingServicesType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class LockingServicesModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LockingServicesModel" /> class.
        /// </summary>
        public LockingServicesModel() : this((LockingServicesModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LockingServicesModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public LockingServicesModel(LockingServicesModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                Locked = template.Locked;
                LockingClient = template.LockingClient == null ? null : template.LockingClient.Clone() as string;
                LockingUser = template.LockingUser == null ? null : template.LockingUser.Clone() as string;
                RemainingLockTime = template.RemainingLockTime;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Locked
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public bool Locked
        {
            get => m_Locked;
            set => SetField(ref m_Locked, value, nameof(Locked));
        }
        private bool m_Locked;

        /// <summary>
        /// Gets or sets the LockingClient
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string LockingClient
        {
            get => m_LockingClient;
            set => SetField(ref m_LockingClient, value, nameof(LockingClient));
        }
        private string m_LockingClient;

        /// <summary>
        /// Gets or sets the LockingUser
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string LockingUser
        {
            get => m_LockingUser;
            set => SetField(ref m_LockingUser, value, nameof(LockingUser));
        }
        private string m_LockingUser;

        /// <summary>
        /// Gets or sets the RemainingLockTime
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double RemainingLockTime
        {
            get => m_RemainingLockTime;
            set => SetField(ref m_RemainingLockTime, value, nameof(RemainingLockTime));
        }
        private double m_RemainingLockTime;


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            ILockingServicesMethods implemention = LockingServicesMethods;

            if (implemention == null)
            {
                implemention = this as ILockingServicesMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.LockingServicesType_BreakLock)
            {
                int BreakLockStatus;
                StatusCode ret = implemention.BreakLock(context, this, out BreakLockStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(BreakLockStatus);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.LockingServicesType_ExitLock)
            {
                int ExitLockStatus;
                StatusCode ret = implemention.ExitLock(context, this, out ExitLockStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(ExitLockStatus);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.LockingServicesType_InitLock)
            {
                int InitLockStatus;
                StatusCode ret = implemention.InitLock(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), out InitLockStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(InitLockStatus);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.LockingServicesType_RenewLock)
            {
                int RenewLockStatus;
                StatusCode ret = implemention.RenewLock(context, this, out RenewLockStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(RenewLockStatus);
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the LockingServices methods.
        /// </summary>
        /// <value>
        /// The LockingServices methods.
        /// </value>
        public ILockingServicesMethods LockingServicesMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the LockingServicesModel object.
    /// </summary>
    public interface ILockingServicesMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/7.8
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="BreakLockStatus">out: </param>
        /// <returns></returns>
        StatusCode BreakLock(
            RequestContext context,
            LockingServicesModel model,
            out int BreakLockStatus
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/7.6
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="ExitLockStatus">out: </param>
        /// <returns></returns>
        StatusCode ExitLock(
            RequestContext context,
            LockingServicesModel model,
            out int ExitLockStatus
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/7.5
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Context"></param>
        /// <param name="InitLockStatus">out: </param>
        /// <returns></returns>
        StatusCode InitLock(
            RequestContext context,
            LockingServicesModel model,
            string Context,
            out int InitLockStatus
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/7.7
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="RenewLockStatus">out: </param>
        /// <returns></returns>
        StatusCode RenewLock(
            RequestContext context,
            LockingServicesModel model,
            out int RenewLockStatus
            );


    }
    #endregion


    #region NetworkModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/5.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.NetworkType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class NetworkModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkModel" /> class.
        /// </summary>
        public NetworkModel() : this((NetworkModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public NetworkModel(NetworkModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Lock != null)
                {
                    Lock = new LockingServicesModel(template.Lock);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Lock
        /// </summary>
        /// <details>
        /// Used to lock the Network.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LockingServicesModel Lock { get; set; }


        #endregion
    }
    #endregion


    #region ProtocolModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/5.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ProtocolType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ProtocolModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolModel" /> class.
        /// </summary>
        public ProtocolModel() : this((ProtocolModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ProtocolModel(ProtocolModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region SoftwareLoadingModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.2/#8.4.2.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SoftwareLoadingType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class SoftwareLoadingModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareLoadingModel" /> class.
        /// </summary>
        public SoftwareLoadingModel() : this((SoftwareLoadingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareLoadingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SoftwareLoadingModel(SoftwareLoadingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.UpdateKey != null)
                {
                    UpdateKey = template.UpdateKey.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the UpdateKey
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string UpdateKey
        {
            get => m_UpdateKey;
            set => SetField(ref m_UpdateKey, value, nameof(UpdateKey));
        }
        private string m_UpdateKey;


        #endregion
    }
    #endregion


    #region FileSystemLoadingModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.6/#8.4.6.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FileSystemLoadingType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class FileSystemLoadingModel : SoftwareLoadingModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSystemLoadingModel" /> class.
        /// </summary>
        public FileSystemLoadingModel() : this((FileSystemLoadingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileSystemLoadingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public FileSystemLoadingModel(FileSystemLoadingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                FileSystem = new FileDirectoryModel();
            }
            else
            {
                FileSystem = new FileDirectoryModel(template.FileSystem);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the FileSystem
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OpcUa)]
        public FileDirectoryModel FileSystem { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IFileSystemLoadingMethods implemention = FileSystemLoadingMethods;

            if (implemention == null)
            {
                implemention = this as IFileSystemLoadingMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.FileSystemLoadingType_GetUpdateBehavior)
            {
                UpdateBehavior UpdateBehavior;
                StatusCode ret = implemention.GetUpdateBehavior(context, this, inputArguments[0].ToNodeIdArray(), out UpdateBehavior);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant((UInt32)UpdateBehavior);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.FileSystemLoadingType_ValidateFiles)
            {
                int ErrorCode;
                LocalizedText ErrorMessage;
                StatusCode ret = implemention.ValidateFiles(context, this, inputArguments[0].ToNodeIdArray(), out ErrorCode, out ErrorMessage);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(ErrorCode);
                    outputArguments[ 1 ] = new Variant(ErrorMessage);
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the FileSystemLoading methods.
        /// </summary>
        /// <value>
        /// The FileSystemLoading methods.
        /// </value>
        public IFileSystemLoadingMethods FileSystemLoadingMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the FileSystemLoadingModel object.
    /// </summary>
    public interface IFileSystemLoadingMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/8.4.6/#8.4.6.3
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="NodeIds"></param>
        /// <param name="UpdateBehavior">out: </param>
        /// <returns></returns>
        StatusCode GetUpdateBehavior(
            RequestContext context,
            FileSystemLoadingModel model,
            NodeId[] NodeIds,
            out UpdateBehavior UpdateBehavior
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/8.4.6/#8.4.6.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="NodeIds"></param>
        /// <param name="ErrorCode">out: </param>
        /// <param name="ErrorMessage">out: </param>
        /// <returns></returns>
        StatusCode ValidateFiles(
            RequestContext context,
            FileSystemLoadingModel model,
            NodeId[] NodeIds,
            out int ErrorCode,
            out LocalizedText ErrorMessage
            );


    }
    #endregion


    #region PackageLoadingModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.3/#8.4.3.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PackageLoadingType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class PackageLoadingModel : SoftwareLoadingModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageLoadingModel" /> class.
        /// </summary>
        public PackageLoadingModel() : this((PackageLoadingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageLoadingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public PackageLoadingModel(PackageLoadingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                CurrentVersion = new SoftwareVersionModel();
                FileTransfer = new TemporaryFileTransferModel();
            }
            else
            {
                CurrentVersion = new SoftwareVersionModel(template.CurrentVersion);
                ErrorMessage = template.ErrorMessage == null ? null : template.ErrorMessage.Clone() as LocalizedText;
                FileTransfer = new TemporaryFileTransferModel(template.FileTransfer);
                if (template.WriteBlockSize != null)
                {
                    WriteBlockSize = template.WriteBlockSize;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public SoftwareVersionModel CurrentVersion { get; set; }

        /// <summary>
        /// Gets or sets the ErrorMessage
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText ErrorMessage
        {
            get => m_ErrorMessage;
            set => SetField(ref m_ErrorMessage, value, nameof(ErrorMessage));
        }
        private LocalizedText m_ErrorMessage;

        /// <summary>
        /// Gets or sets the FileTransfer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public TemporaryFileTransferModel FileTransfer { get; set; }

        /// <summary>
        /// Gets or sets the WriteBlockSize
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public uint? WriteBlockSize
        {
            get => m_WriteBlockSize;
            set => SetField(ref m_WriteBlockSize, value, nameof(WriteBlockSize));
        }
        private uint? m_WriteBlockSize;


        #endregion
    }
    #endregion


    #region CachedLoadingModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.5/#8.4.5.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CachedLoadingType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class CachedLoadingModel : PackageLoadingModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CachedLoadingModel" /> class.
        /// </summary>
        public CachedLoadingModel() : this((CachedLoadingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CachedLoadingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public CachedLoadingModel(CachedLoadingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                PendingVersion = new SoftwareVersionModel();
            }
            else
            {
                if (template.FallbackVersion != null)
                {
                    FallbackVersion = new SoftwareVersionModel(template.FallbackVersion);
                }
                PendingVersion = new SoftwareVersionModel(template.PendingVersion);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the FallbackVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public SoftwareVersionModel FallbackVersion { get; set; }

        /// <summary>
        /// Gets or sets the PendingVersion
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public SoftwareVersionModel PendingVersion { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            ICachedLoadingMethods implemention = CachedLoadingMethods;

            if (implemention == null)
            {
                implemention = this as ICachedLoadingMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.CachedLoadingType_GetUpdateBehavior)
            {
                UpdateBehavior UpdateBehavior;
                StatusCode ret = implemention.GetUpdateBehavior(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), inputArguments[2].ToStringArray(), out UpdateBehavior);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant((UInt32)UpdateBehavior);
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the CachedLoading methods.
        /// </summary>
        /// <value>
        /// The CachedLoading methods.
        /// </value>
        public ICachedLoadingMethods CachedLoadingMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the CachedLoadingModel object.
    /// </summary>
    public interface ICachedLoadingMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/8.4.5/#8.4.5.5
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="ManufacturerUri"></param>
        /// <param name="SoftwareRevision"></param>
        /// <param name="PatchIdentifiers"></param>
        /// <param name="UpdateBehavior">out: </param>
        /// <returns></returns>
        StatusCode GetUpdateBehavior(
            RequestContext context,
            CachedLoadingModel model,
            string ManufacturerUri,
            string SoftwareRevision,
            string[] PatchIdentifiers,
            out UpdateBehavior UpdateBehavior
            );


    }
    #endregion


    #region DirectLoadingModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.4/#8.4.4.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DirectLoadingType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class DirectLoadingModel : PackageLoadingModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectLoadingModel" /> class.
        /// </summary>
        public DirectLoadingModel() : this((DirectLoadingModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectLoadingModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public DirectLoadingModel(DirectLoadingModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                UpdateBehavior = template.UpdateBehavior;
                if (template.WriteTimeout != null)
                {
                    WriteTimeout = template.WriteTimeout;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the UpdateBehavior
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public UpdateBehavior UpdateBehavior
        {
            get => m_UpdateBehavior;
            set => SetField(ref m_UpdateBehavior, value, nameof(UpdateBehavior));
        }
        private UpdateBehavior m_UpdateBehavior;

        /// <summary>
        /// Gets or sets the WriteTimeout
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double? WriteTimeout
        {
            get => m_WriteTimeout;
            set => SetField(ref m_WriteTimeout, value, nameof(WriteTimeout));
        }
        private double? m_WriteTimeout;


        #endregion
    }
    #endregion


    #region SoftwareUpdateModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.1/#8.4.1.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SoftwareUpdateType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class SoftwareUpdateModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareUpdateModel" /> class.
        /// </summary>
        public SoftwareUpdateModel() : this((SoftwareUpdateModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareUpdateModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SoftwareUpdateModel(SoftwareUpdateModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Confirmation != null)
                {
                    Confirmation = new ConfirmationStateMachineModel(template.Confirmation);
                }
                if (template.Installation != null)
                {
                    Installation = new InstallationStateMachineModel(template.Installation);
                }
                if (template.Loading != null)
                {
                    Loading = new SoftwareLoadingModel(template.Loading);
                }
                if (template.Parameters != null)
                {
                    Parameters = new TemporaryFileTransferModel(template.Parameters);
                }
                if (template.PowerCycle != null)
                {
                    PowerCycle = new PowerCycleStateMachineModel(template.PowerCycle);
                }
                if (template.PrepareForUpdate != null)
                {
                    PrepareForUpdate = new PrepareForUpdateStateMachineModel(template.PrepareForUpdate);
                }
                if (template.UpdateStatus != null)
                {
                    UpdateStatus = template.UpdateStatus.Clone() as LocalizedText;
                }
                if (template.VendorErrorCode != null)
                {
                    VendorErrorCode = template.VendorErrorCode;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Confirmation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public ConfirmationStateMachineModel Confirmation { get; set; }

        /// <summary>
        /// Gets or sets the Installation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public InstallationStateMachineModel Installation { get; set; }

        /// <summary>
        /// Gets or sets the Loading
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public SoftwareLoadingModel Loading { get; set; }

        /// <summary>
        /// Gets or sets the Parameters
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public TemporaryFileTransferModel Parameters { get; set; }

        /// <summary>
        /// Gets or sets the PowerCycle
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public PowerCycleStateMachineModel PowerCycle { get; set; }

        /// <summary>
        /// Gets or sets the PrepareForUpdate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public PrepareForUpdateStateMachineModel PrepareForUpdate { get; set; }

        /// <summary>
        /// Gets or sets the UpdateStatus
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText UpdateStatus
        {
            get => m_UpdateStatus;
            set => SetField(ref m_UpdateStatus, value, nameof(UpdateStatus));
        }
        private LocalizedText m_UpdateStatus;

        /// <summary>
        /// Gets or sets the VendorErrorCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public int? VendorErrorCode
        {
            get => m_VendorErrorCode;
            set => SetField(ref m_VendorErrorCode, value, nameof(VendorErrorCode));
        }
        private int? m_VendorErrorCode;


        #endregion
    }
    #endregion


    #region SoftwareVersionModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.7/#8.4.7.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SoftwareVersionType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class SoftwareVersionModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareVersionModel" /> class.
        /// </summary>
        public SoftwareVersionModel() : this((SoftwareVersionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareVersionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SoftwareVersionModel(SoftwareVersionModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.ChangeLogReference != null)
                {
                    ChangeLogReference = template.ChangeLogReference.Clone() as string;
                }
                if (template.Hash != null)
                {
                    Hash = template.Hash.Clone() as byte[];
                }
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                ManufacturerUri = template.ManufacturerUri == null ? null : template.ManufacturerUri.Clone() as string;
                if (template.PatchIdentifiers != null)
                {
                    PatchIdentifiers = template.PatchIdentifiers.Clone() as string[];
                }
                if (template.ReleaseDate != null)
                {
                    ReleaseDate = template.ReleaseDate;
                }
                SoftwareRevision = template.SoftwareRevision == null ? null : template.SoftwareRevision.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ChangeLogReference
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ChangeLogReference
        {
            get => m_ChangeLogReference;
            set => SetField(ref m_ChangeLogReference, value, nameof(ChangeLogReference));
        }
        private string m_ChangeLogReference;

        /// <summary>
        /// Gets or sets the Hash
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public byte[] Hash
        {
            get => m_Hash;
            set => SetField(ref m_Hash, value, nameof(Hash));
        }
        private byte[] m_Hash;

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText Manufacturer
        {
            get => m_Manufacturer;
            set => SetField(ref m_Manufacturer, value, nameof(Manufacturer));
        }
        private LocalizedText m_Manufacturer;

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ManufacturerUri
        {
            get => m_ManufacturerUri;
            set => SetField(ref m_ManufacturerUri, value, nameof(ManufacturerUri));
        }
        private string m_ManufacturerUri;

        /// <summary>
        /// Gets or sets the PatchIdentifiers
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string[] PatchIdentifiers
        {
            get => m_PatchIdentifiers;
            set => SetField(ref m_PatchIdentifiers, value, nameof(PatchIdentifiers));
        }
        private string[] m_PatchIdentifiers;

        /// <summary>
        /// Gets or sets the ReleaseDate
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public DateTime? ReleaseDate
        {
            get => m_ReleaseDate;
            set => SetField(ref m_ReleaseDate, value, nameof(ReleaseDate));
        }
        private DateTime? m_ReleaseDate;

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string SoftwareRevision
        {
            get => m_SoftwareRevision;
            set => SetField(ref m_SoftwareRevision, value, nameof(SoftwareRevision));
        }
        private string m_SoftwareRevision;


        #endregion
    }
    #endregion


    #region ConfirmationStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.11/#8.4.11.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ConfirmationStateMachineType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ConfirmationStateMachineModel : FiniteStateMachineModel, IMethodDispatcher, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmationStateMachineModel" /> class.
        /// </summary>
        public ConfirmationStateMachineModel() : this((ConfirmationStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmationStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ConfirmationStateMachineModel(ConfirmationStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                ConfirmationTimeout = template.ConfirmationTimeout;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ConfirmationTimeout
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double ConfirmationTimeout
        {
            get => m_ConfirmationTimeout;
            set => SetField(ref m_ConfirmationTimeout, value, nameof(ConfirmationTimeout));
        }
        private double m_ConfirmationTimeout;


        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The NotWaitingForConfirm state.
            /// </summary>
            NotWaitingForConfirm = 1,
            /// <summary>
            /// The WaitingForConfirm state.
            /// </summary>
            WaitingForConfirm = 2,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.NotWaitingForConfirm"/> to <see cref="State.WaitingForConfirm"/>.
            /// </summary>
            NotWaitingForConfirmToWaitingForConfirm = 12,
            /// <summary>
            /// Transition from <see cref="State.WaitingForConfirm"/> to <see cref="State.NotWaitingForConfirm"/>.
            /// </summary>
            WaitingForConfirmToNotWaitingForConfirm = 21,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.NotWaitingForConfirm:
                    if (newState is State.WaitingForConfirm)
                    {
                        yield return Transition.NotWaitingForConfirmToWaitingForConfirm;
                    }
                    break;
                case State.WaitingForConfirm:
                    if (newState is State.NotWaitingForConfirm)
                    {
                        yield return Transition.WaitingForConfirmToNotWaitingForConfirm;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.NotWaitingForConfirm, new AbsoluteName(BrowseNames.NotWaitingForConfirm, Namespaces.DI) },
            { State.WaitingForConfirm, new AbsoluteName(BrowseNames.WaitingForConfirm, Namespaces.DI) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.NotWaitingForConfirm, ObjectIds.ConfirmationStateMachineType_NotWaitingForConfirm },
            { State.WaitingForConfirm, ObjectIds.ConfirmationStateMachineType_WaitingForConfirm },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.NotWaitingForConfirmToWaitingForConfirm, new AbsoluteName(BrowseNames.NotWaitingForConfirmToWaitingForConfirm, Namespaces.DI) },
            { Transition.WaitingForConfirmToNotWaitingForConfirm, new AbsoluteName(BrowseNames.WaitingForConfirmToNotWaitingForConfirm, Namespaces.DI) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.NotWaitingForConfirmToWaitingForConfirm, ObjectIds.ConfirmationStateMachineType_NotWaitingForConfirmToWaitingForConfirm },
            { Transition.WaitingForConfirmToNotWaitingForConfirm, ObjectIds.ConfirmationStateMachineType_WaitingForConfirmToNotWaitingForConfirm },
        };
        #endregion

        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IConfirmationStateMachineMethods implemention = ConfirmationStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IConfirmationStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.ConfirmationStateMachineType_Confirm)
            {
                StatusCode ret = implemention.Confirm(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the ConfirmationStateMachine methods.
        /// </summary>
        /// <value>
        /// The ConfirmationStateMachine methods.
        /// </value>
        public IConfirmationStateMachineMethods ConfirmationStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the ConfirmationStateMachineModel object.
    /// </summary>
    public interface IConfirmationStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Confirm(
            RequestContext context,
            ConfirmationStateMachineModel model
            );


    }
    #endregion


    #region InstallationStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.9/#8.4.9.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.InstallationStateMachineType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class InstallationStateMachineModel : FiniteStateMachineModel, IMethodDispatcher, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationStateMachineModel" /> class.
        /// </summary>
        public InstallationStateMachineModel() : this((InstallationStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public InstallationStateMachineModel(InstallationStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.InstallationDelay != null)
                {
                    InstallationDelay = template.InstallationDelay;
                }
                if (template.PercentComplete != null)
                {
                    PercentComplete = template.PercentComplete;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the InstallationDelay
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public double? InstallationDelay
        {
            get => m_InstallationDelay;
            set => SetField(ref m_InstallationDelay, value, nameof(InstallationDelay));
        }
        private double? m_InstallationDelay;

        /// <summary>
        /// Gets or sets the PercentComplete
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public byte? PercentComplete
        {
            get => m_PercentComplete;
            set => SetField(ref m_PercentComplete, value, nameof(PercentComplete));
        }
        private byte? m_PercentComplete;


        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The Idle state.
            /// </summary>
            Idle = 1,
            /// <summary>
            /// The Installing state.
            /// </summary>
            Installing = 2,
            /// <summary>
            /// The Error state.
            /// </summary>
            Error = 3,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.Error"/> to <see cref="State.Idle"/>.
            /// </summary>
            ErrorToIdle = 31,
            /// <summary>
            /// Transition from <see cref="State.Idle"/> to <see cref="State.Installing"/>.
            /// </summary>
            IdleToInstalling = 12,
            /// <summary>
            /// Transition from <see cref="State.Installing"/> to <see cref="State.Error"/>.
            /// </summary>
            InstallingToError = 23,
            /// <summary>
            /// Transition from <see cref="State.Installing"/> to <see cref="State.Idle"/>.
            /// </summary>
            InstallingToIdle = 21,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.Idle:
                    if (newState is State.Installing)
                    {
                        yield return Transition.IdleToInstalling;
                    }
                    break;
                case State.Installing:
                    if (newState is State.Error)
                    {
                        yield return Transition.InstallingToError;
                    }
                    if (newState is State.Idle)
                    {
                        yield return Transition.InstallingToIdle;
                    }
                    break;
                case State.Error:
                    if (newState is State.Idle)
                    {
                        yield return Transition.ErrorToIdle;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.Idle, new AbsoluteName(BrowseNames.Idle, Namespaces.DI) },
            { State.Installing, new AbsoluteName(BrowseNames.Installing, Namespaces.DI) },
            { State.Error, new AbsoluteName(BrowseNames.Error, Namespaces.DI) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.Idle, ObjectIds.InstallationStateMachineType_Idle },
            { State.Installing, ObjectIds.InstallationStateMachineType_Installing },
            { State.Error, ObjectIds.InstallationStateMachineType_Error },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.ErrorToIdle, new AbsoluteName(BrowseNames.ErrorToIdle, Namespaces.DI) },
            { Transition.IdleToInstalling, new AbsoluteName(BrowseNames.IdleToInstalling, Namespaces.DI) },
            { Transition.InstallingToError, new AbsoluteName(BrowseNames.InstallingToError, Namespaces.DI) },
            { Transition.InstallingToIdle, new AbsoluteName(BrowseNames.InstallingToIdle, Namespaces.DI) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.ErrorToIdle, ObjectIds.InstallationStateMachineType_ErrorToIdle },
            { Transition.IdleToInstalling, ObjectIds.InstallationStateMachineType_IdleToInstalling },
            { Transition.InstallingToError, ObjectIds.InstallationStateMachineType_InstallingToError },
            { Transition.InstallingToIdle, ObjectIds.InstallationStateMachineType_InstallingToIdle },
        };
        #endregion

        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IInstallationStateMachineMethods implemention = InstallationStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IInstallationStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.InstallationStateMachineType_InstallFiles)
            {
                StatusCode ret = implemention.InstallFiles(context, this, inputArguments[0].ToNodeIdArray());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.InstallationStateMachineType_InstallSoftwarePackage)
            {
                StatusCode ret = implemention.InstallSoftwarePackage(context, this, (inputArguments[0].IsNull) ? null : inputArguments[0].ToString(), (inputArguments[1].IsNull) ? null : inputArguments[1].ToString(), inputArguments[2].ToStringArray(), inputArguments[3].ToByteString());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.InstallationStateMachineType_Resume)
            {
                StatusCode ret = implemention.Resume(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the InstallationStateMachine methods.
        /// </summary>
        /// <value>
        /// The InstallationStateMachine methods.
        /// </value>
        public IInstallationStateMachineMethods InstallationStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the InstallationStateMachineModel object.
    /// </summary>
    public interface IInstallationStateMachineMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/8.4.9/#8.4.9.5
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="NodeIds"></param>
        /// <returns></returns>
        StatusCode InstallFiles(
            RequestContext context,
            InstallationStateMachineModel model,
            NodeId[] NodeIds
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/8.4.9/#8.4.9.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="ManufacturerUri"></param>
        /// <param name="SoftwareRevision"></param>
        /// <param name="PatchIdentifiers"></param>
        /// <param name="Hash"></param>
        /// <returns></returns>
        StatusCode InstallSoftwarePackage(
            RequestContext context,
            InstallationStateMachineModel model,
            string ManufacturerUri,
            string SoftwareRevision,
            string[] PatchIdentifiers,
            byte[] Hash
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Resume(
            RequestContext context,
            InstallationStateMachineModel model
            );


    }
    #endregion


    #region PowerCycleStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.10
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PowerCycleStateMachineType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class PowerCycleStateMachineModel : FiniteStateMachineModel, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PowerCycleStateMachineModel" /> class.
        /// </summary>
        public PowerCycleStateMachineModel() : this((PowerCycleStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PowerCycleStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public PowerCycleStateMachineModel(PowerCycleStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The NotWaitingForPowerCycle state.
            /// </summary>
            NotWaitingForPowerCycle = 1,
            /// <summary>
            /// The WaitingForPowerCycle state.
            /// </summary>
            WaitingForPowerCycle = 2,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.NotWaitingForPowerCycle"/> to <see cref="State.WaitingForPowerCycle"/>.
            /// </summary>
            NotWaitingForPowerCycleToWaitingForPowerCycle = 12,
            /// <summary>
            /// Transition from <see cref="State.WaitingForPowerCycle"/> to <see cref="State.NotWaitingForPowerCycle"/>.
            /// </summary>
            WaitingForPowerCycleToNotWaitingForPowerCycle = 21,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.NotWaitingForPowerCycle:
                    if (newState is State.WaitingForPowerCycle)
                    {
                        yield return Transition.NotWaitingForPowerCycleToWaitingForPowerCycle;
                    }
                    break;
                case State.WaitingForPowerCycle:
                    if (newState is State.NotWaitingForPowerCycle)
                    {
                        yield return Transition.WaitingForPowerCycleToNotWaitingForPowerCycle;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.NotWaitingForPowerCycle, new AbsoluteName(BrowseNames.NotWaitingForPowerCycle, Namespaces.DI) },
            { State.WaitingForPowerCycle, new AbsoluteName(BrowseNames.WaitingForPowerCycle, Namespaces.DI) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.NotWaitingForPowerCycle, ObjectIds.PowerCycleStateMachineType_NotWaitingForPowerCycle },
            { State.WaitingForPowerCycle, ObjectIds.PowerCycleStateMachineType_WaitingForPowerCycle },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.NotWaitingForPowerCycleToWaitingForPowerCycle, new AbsoluteName(BrowseNames.NotWaitingForPowerCycleToWaitingForPowerCycle, Namespaces.DI) },
            { Transition.WaitingForPowerCycleToNotWaitingForPowerCycle, new AbsoluteName(BrowseNames.WaitingForPowerCycleToNotWaitingForPowerCycle, Namespaces.DI) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.NotWaitingForPowerCycleToWaitingForPowerCycle, ObjectIds.PowerCycleStateMachineType_NotWaitingForPowerCycleToWaitingForPowerCycle },
            { Transition.WaitingForPowerCycleToNotWaitingForPowerCycle, ObjectIds.PowerCycleStateMachineType_WaitingForPowerCycleToNotWaitingForPowerCycle },
        };
        #endregion

    }
    #endregion


    #region PrepareForUpdateStateMachineModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/8.4.8/#8.4.8.1
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PrepareForUpdateStateMachineType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class PrepareForUpdateStateMachineModel : FiniteStateMachineModel, IMethodDispatcher, IActivatableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareForUpdateStateMachineModel" /> class.
        /// </summary>
        public PrepareForUpdateStateMachineModel() : this((PrepareForUpdateStateMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareForUpdateStateMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public PrepareForUpdateStateMachineModel(PrepareForUpdateStateMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.PercentComplete != null)
                {
                    PercentComplete = template.PercentComplete;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the PercentComplete
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public byte? PercentComplete
        {
            get => m_PercentComplete;
            set => SetField(ref m_PercentComplete, value, nameof(PercentComplete));
        }
        private byte? m_PercentComplete;


        #endregion

        #region FiniteStateMachine
        /// <summary>
        /// The current state of the state machine.
        /// </summary>
        protected State? m_state;

        /// <summary>
        /// The last transition of the state machine.
        /// </summary>
        protected Transition? m_transition;

        /// <summary>
        /// The enumeration representing the possible states of the state machine.
        /// </summary>
        public enum State : uint
        {
            /// <summary>
            /// The Idle state.
            /// </summary>
            Idle = 1,
            /// <summary>
            /// The Preparing state.
            /// </summary>
            Preparing = 2,
            /// <summary>
            /// The PreparedForUpdate state.
            /// </summary>
            PreparedForUpdate = 3,
            /// <summary>
            /// The Resuming state.
            /// </summary>
            Resuming = 4,
        }

        /// <summary>
        /// The enumeration representing the possible transitions of the state machine.
        /// </summary>
        public enum Transition : uint
        {
            /// <summary>
            /// Transition from <see cref="State.Idle"/> to <see cref="State.Preparing"/>.
            /// </summary>
            IdleToPreparing = 12,
            /// <summary>
            /// Transition from <see cref="State.PreparedForUpdate"/> to <see cref="State.Resuming"/>.
            /// </summary>
            PreparedForUpdateToResuming = 34,
            /// <summary>
            /// Transition from <see cref="State.Preparing"/> to <see cref="State.Idle"/>.
            /// </summary>
            PreparingToIdle = 21,
            /// <summary>
            /// Transition from <see cref="State.Preparing"/> to <see cref="State.PreparedForUpdate"/>.
            /// </summary>
            PreparingToPreparedForUpdate = 23,
            /// <summary>
            /// Transition from <see cref="State.Resuming"/> to <see cref="State.Idle"/>.
            /// </summary>
            ResumingToIdle = 41,
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.CurrentState"/> as the enumeration value.
        /// </summary>
        public State? InternalState
        {
            get => m_state;
            protected set
            {
                m_state = value;
                if (CurrentState != null)
                {
                    if (m_state.HasValue)
                    {
                        State s = m_state.Value;

                        CurrentState.Value = GetLocalizedText(s);
                        CurrentState.Number = (uint)s;
                        if (NamespaceTable != null)
                        {
                            CurrentState.Name = GetName(s).ToQualifiedName(NamespaceTable);
                            CurrentState.Id = GetExpandedNodeId(s).ToNodeId(NamespaceTable);
                        }
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.Good);
                    }
                    else
                    {
                        CurrentState.Value = default;
                        CurrentState.Name = default;
                        CurrentState.Number = default;
                        CurrentState.Id = default;
                        CurrentState.SetStatusCode(nameof(CurrentState.Value), StatusCodes.BadStateNotActive);
                    }
                }
            }
        }

        /// <summary>
        /// The <see cref="FiniteStateMachineModel.LastTransition"/> as the enumeration value.
        /// </summary>
        public Transition? InternalTransition
        {
            get => m_transition;
            protected set
            {
                m_transition = value;
                if (LastTransition != null)
                {
                    if (m_transition.HasValue)
                    {
                        Transition t = m_transition.Value;

                        LastTransition.Value = GetLocalizedText(t);
                        LastTransition.Number = (uint)t;
                        LastTransition.TransitionTime = DateTime.UtcNow;
                        if (NamespaceTable != null)
                        {
                            LastTransition.Name = GetName(t).ToQualifiedName(NamespaceTable);
                            LastTransition.Id = GetExpandedNodeId(t).ToNodeId(NamespaceTable);
                        }
                    }
                    else
                    {
                        LastTransition.Value = default;
                        LastTransition.Name = default;
                        LastTransition.Number = default;
                        LastTransition.Id = default;
                        LastTransition.TransitionTime = default;
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when the <see cref="SwitchToState" /> method was called.
        /// </summary>
        /// <remarks>
        /// Note, the event is also emitted when the state stays the same.
        /// </remarks>
        public event EventHandler<StateMachineEventArgs<State?, Transition?>> Switched;

        /// <summary>
        /// Raises the <see cref="Switched" /> event.
        /// </summary>
        public void RaiseSwitchedEvent(State? oldState, State? state, Transition? transition)
        {
            var handle = Switched;
            if (handle != null)
            {
                var args = new StateMachineEventArgs<State?, Transition?>(oldState, state, transition);
                Switched?.Invoke(this, args);
            }
        }

        /// <remarks />
        public NamespaceTable NamespaceTable { get; set; }

        /// <remarks />
        public virtual void ActivateModel(RequestContext context)
        {
            NamespaceTable = context.NamespaceUris;

            // reset state and transition with the now available Ids
            InternalState = m_state;
            InternalTransition = m_transition;
        }

        /// <remarks />
        public virtual void DeactivateModel()
        {
        }

        /// <summary>
        /// Switch to the given state.
        /// </summary>
        /// <param name="state">The state.</param>
        /// <param name="transition">The transition.</param>
        /// <remarks>
        /// If the transition value is <c>null</c> the method will take the first
        /// transition that is possible. If there is no possible transition or
        /// if a transition was passed that is not possible for the old and new
        /// state combination, <c>null</c> will be assigned to the
        /// <see cref="InternalTransition"/> and <see cref="FiniteStateMachineModel.LastTransition"/> properties.
        /// It is up to the caller to avoid such situations.
        ///
        /// A <c>null</c> value for the state will be translated to the specification
        /// conform status code <see cref="StatusCodes.BadStateNotActive"/>.
        /// </remarks>
        public virtual void SwitchToState(State? state, Transition? transition = null)
        {
            State? oldState = InternalState;

            if (oldState.HasValue && state.HasValue)
            {
                var transitions = GetTransitions(oldState.Value, state.Value);
                if (transition.HasValue)
                {
                    var tvalue = transition.Value;
                    transitions = transitions.Where(t => t == tvalue);
                }

                transition = transitions
                    .Cast<Transition?>()
                    .FirstOrDefault();
            }

            InternalState = state;
            InternalTransition = transition;

            RaiseSwitchedEvent(oldState, state, transition);
        }

        /// <summary>
        /// A sequence of all possible transition for the given states.
        /// </summary>
        /// <param name="oldState">The <em>From</em> state.</param>
        /// <param name="newState">The <em>To</em> state.</param>
        /// <returns>
        /// A sequence of all possible transition for the given states. The sequence
        /// can be empty, but it will never be null.
        /// </returns>
        public static IEnumerable<Transition> GetTransitions(State oldState, State newState)
        {
            switch (oldState)
            {
                case State.Idle:
                    if (newState is State.Preparing)
                    {
                        yield return Transition.IdleToPreparing;
                    }
                    break;
                case State.Preparing:
                    if (newState is State.Idle)
                    {
                        yield return Transition.PreparingToIdle;
                    }
                    if (newState is State.PreparedForUpdate)
                    {
                        yield return Transition.PreparingToPreparedForUpdate;
                    }
                    break;
                case State.PreparedForUpdate:
                    if (newState is State.Resuming)
                    {
                        yield return Transition.PreparedForUpdateToResuming;
                    }
                    break;
                case State.Resuming:
                    if (newState is State.Idle)
                    {
                        yield return Transition.ResumingToIdle;
                    }
                    break;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the text.</param>
        /// <returns>The text.</returns>
        public static LocalizedText GetLocalizedText(State state)
        {
            string text = state.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(State state)
        {
            if (s_stateNames.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given state
        /// value.
        /// </summary>
        /// <param name="state">The state to get the ExpandedNodeId.</param>
        /// <returns>The ExpandedNodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(State state)
        {
            if (s_stateNodeIds.TryGetValue(state, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<State, AbsoluteName> s_stateNames = new Dictionary<State, AbsoluteName>()
        {
            { State.Idle, new AbsoluteName(BrowseNames.Idle, Namespaces.DI) },
            { State.Preparing, new AbsoluteName(BrowseNames.Preparing, Namespaces.DI) },
            { State.PreparedForUpdate, new AbsoluteName(BrowseNames.PreparedForUpdate, Namespaces.DI) },
            { State.Resuming, new AbsoluteName(BrowseNames.Resuming, Namespaces.DI) },
        };

        private static readonly IDictionary<State, ExpandedNodeId> s_stateNodeIds = new Dictionary<State, ExpandedNodeId>()
        {
            { State.Idle, ObjectIds.PrepareForUpdateStateMachineType_Idle },
            { State.Preparing, ObjectIds.PrepareForUpdateStateMachineType_Preparing },
            { State.PreparedForUpdate, ObjectIds.PrepareForUpdateStateMachineType_PreparedForUpdate },
            { State.Resuming, ObjectIds.PrepareForUpdateStateMachineType_Resuming },
        };

        /// <summary>
        /// Retrieves a <see cref="LocalizedText"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the text.</param>
        /// <returns>The transition.</returns>
        public static LocalizedText GetLocalizedText(Transition transition)
        {
            string text = transition.ToString();
            return new LocalizedText(text, "", text);
        }

        /// <summary>
        /// Retrieves a <see cref="AbsoluteName"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the name.</param>
        /// <returns>The name.</returns>
        public static AbsoluteName GetName(Transition transition)
        {
            if (s_transitionNames.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        /// <summary>
        /// Retrieves the <see cref="ExpandedNodeId"/> for the given transition
        /// value.
        /// </summary>
        /// <param name="transition">The transition to get the ExpandedNodeId.</param>
        /// <returns>The NodeId.</returns>
        public static ExpandedNodeId GetExpandedNodeId(Transition transition)
        {
            if (s_transitionNodeIds.TryGetValue(transition, out var value))
            {
                return value;
            }

            return null;
        }

        private static readonly IDictionary<Transition, AbsoluteName> s_transitionNames = new Dictionary<Transition, AbsoluteName>()
        {
            { Transition.IdleToPreparing, new AbsoluteName(BrowseNames.IdleToPreparing, Namespaces.DI) },
            { Transition.PreparedForUpdateToResuming, new AbsoluteName(BrowseNames.PreparedForUpdateToResuming, Namespaces.DI) },
            { Transition.PreparingToIdle, new AbsoluteName(BrowseNames.PreparingToIdle, Namespaces.DI) },
            { Transition.PreparingToPreparedForUpdate, new AbsoluteName(BrowseNames.PreparingToPreparedForUpdate, Namespaces.DI) },
            { Transition.ResumingToIdle, new AbsoluteName(BrowseNames.ResumingToIdle, Namespaces.DI) },
        };

        private static readonly IDictionary<Transition, ExpandedNodeId> s_transitionNodeIds = new Dictionary<Transition, ExpandedNodeId>()
        {
            { Transition.IdleToPreparing, ObjectIds.PrepareForUpdateStateMachineType_IdleToPreparing },
            { Transition.PreparedForUpdateToResuming, ObjectIds.PrepareForUpdateStateMachineType_PreparedForUpdateToResuming },
            { Transition.PreparingToIdle, ObjectIds.PrepareForUpdateStateMachineType_PreparingToIdle },
            { Transition.PreparingToPreparedForUpdate, ObjectIds.PrepareForUpdateStateMachineType_PreparingToPreparedForUpdate },
            { Transition.ResumingToIdle, ObjectIds.PrepareForUpdateStateMachineType_ResumingToIdle },
        };
        #endregion

        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IPrepareForUpdateStateMachineMethods implemention = PrepareForUpdateStateMachineMethods;

            if (implemention == null)
            {
                implemention = this as IPrepareForUpdateStateMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.PrepareForUpdateStateMachineType_Abort)
            {
                StatusCode ret = implemention.Abort(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.PrepareForUpdateStateMachineType_Prepare)
            {
                StatusCode ret = implemention.Prepare(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.PrepareForUpdateStateMachineType_Resume)
            {
                StatusCode ret = implemention.Resume(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the PrepareForUpdateStateMachine methods.
        /// </summary>
        /// <value>
        /// The PrepareForUpdateStateMachine methods.
        /// </value>
        public IPrepareForUpdateStateMachineMethods PrepareForUpdateStateMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the PrepareForUpdateStateMachineModel object.
    /// </summary>
    public interface IPrepareForUpdateStateMachineMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Abort(
            RequestContext context,
            PrepareForUpdateStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Prepare(
            RequestContext context,
            PrepareForUpdateStateMachineModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Resume(
            RequestContext context,
            PrepareForUpdateStateMachineModel model
            );


    }
    #endregion


    #region TopologyElementModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TopologyElementType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class TopologyElementModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TopologyElementModel" /> class.
        /// </summary>
        public TopologyElementModel() : this((TopologyElementModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopologyElementModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public TopologyElementModel(TopologyElementModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Identification != null)
                {
                    Identification = new FunctionalGroupModel(template.Identification);
                }
                if (template.Lock != null)
                {
                    Lock = new LockingServicesModel(template.Lock);
                }
                if (template.MethodSet != null)
                {
                    MethodSet = new BaseObjectModel(template.MethodSet);
                }
                if (template.ParameterSet != null)
                {
                    ParameterSet = new BaseObjectModel(template.ParameterSet);
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        /// <details>
        /// Used to organize parameters for identification of this TopologyElement
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FunctionalGroupModel Identification { get; set; }

        /// <summary>
        /// Gets or sets the Lock
        /// </summary>
        /// <details>
        /// Used to lock the topology element.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LockingServicesModel Lock { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.3
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public BaseObjectModel MethodSet { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.3
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public BaseObjectModel ParameterSet { get; set; }


        #endregion
    }
    #endregion


    #region BlockModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.11
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BlockType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class BlockModel : TopologyElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockModel" /> class.
        /// </summary>
        public BlockModel() : this((BlockModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public BlockModel(BlockModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.ActualMode != null)
                {
                    ActualMode = template.ActualMode.Clone() as LocalizedText;
                }
                if (template.NormalMode != null)
                {
                    NormalMode = template.NormalMode.Clone() as LocalizedText[];
                }
                if (template.PermittedMode != null)
                {
                    PermittedMode = template.PermittedMode.Clone() as LocalizedText[];
                }
                if (template.RevisionCounter != null)
                {
                    RevisionCounter = template.RevisionCounter;
                }
                if (template.TargetMode != null)
                {
                    TargetMode = template.TargetMode.Clone() as LocalizedText[];
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the ActualMode
        /// </summary>
        /// <details>
        /// Current mode of operation the Block is able to achieve
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText ActualMode
        {
            get => m_ActualMode;
            set => SetField(ref m_ActualMode, value, nameof(ActualMode));
        }
        private LocalizedText m_ActualMode;

        /// <summary>
        /// Gets or sets the NormalMode
        /// </summary>
        /// <details>
        /// Mode the Block should be set to during normal operating conditions
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText[] NormalMode
        {
            get => m_NormalMode;
            set => SetField(ref m_NormalMode, value, nameof(NormalMode));
        }
        private LocalizedText[] m_NormalMode;

        /// <summary>
        /// Gets or sets the PermittedMode
        /// </summary>
        /// <details>
        /// Modes of operation that are allowed for the Block based on application requirements
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText[] PermittedMode
        {
            get => m_PermittedMode;
            set => SetField(ref m_PermittedMode, value, nameof(PermittedMode));
        }
        private LocalizedText[] m_PermittedMode;

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        /// <details>
        /// Incremental counter indicating the number of times the static data within the Block has been modified
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public int? RevisionCounter
        {
            get => m_RevisionCounter;
            set => SetField(ref m_RevisionCounter, value, nameof(RevisionCounter));
        }
        private int? m_RevisionCounter;

        /// <summary>
        /// Gets or sets the TargetMode
        /// </summary>
        /// <details>
        /// Mode of operation that is desired for the Block
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText[] TargetMode
        {
            get => m_TargetMode;
            set => SetField(ref m_TargetMode, value, nameof(TargetMode));
        }
        private LocalizedText[] m_TargetMode;


        #endregion
    }
    #endregion


    #region ComponentModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ComponentType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ComponentModel : TopologyElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentModel" /> class.
        /// </summary>
        public ComponentModel() : this((ComponentModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ComponentModel(ComponentModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.AssetId != null)
                {
                    AssetId = template.AssetId.Clone() as string;
                }
                if (template.ComponentName != null)
                {
                    ComponentName = template.ComponentName.Clone() as LocalizedText;
                }
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.DeviceManual != null)
                {
                    DeviceManual = template.DeviceManual.Clone() as string;
                }
                if (template.DeviceRevision != null)
                {
                    DeviceRevision = template.DeviceRevision.Clone() as string;
                }
                if (template.HardwareRevision != null)
                {
                    HardwareRevision = template.HardwareRevision.Clone() as string;
                }
                if (template.Manufacturer != null)
                {
                    Manufacturer = template.Manufacturer.Clone() as LocalizedText;
                }
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                if (template.Model != null)
                {
                    Model = template.Model.Clone() as LocalizedText;
                }
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                if (template.ProductInstanceUri != null)
                {
                    ProductInstanceUri = template.ProductInstanceUri.Clone() as string;
                }
                if (template.RevisionCounter != null)
                {
                    RevisionCounter = template.RevisionCounter;
                }
                if (template.SerialNumber != null)
                {
                    SerialNumber = template.SerialNumber.Clone() as string;
                }
                if (template.SoftwareRevision != null)
                {
                    SoftwareRevision = template.SoftwareRevision.Clone() as string;
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the AssetId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string AssetId
        {
            get => m_AssetId;
            set => SetField(ref m_AssetId, value, nameof(AssetId));
        }
        private string m_AssetId;

        /// <summary>
        /// Gets or sets the ComponentName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText ComponentName
        {
            get => m_ComponentName;
            set => SetField(ref m_ComponentName, value, nameof(ComponentName));
        }
        private LocalizedText m_ComponentName;

        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceClass
        {
            get => m_DeviceClass;
            set => SetField(ref m_DeviceClass, value, nameof(DeviceClass));
        }
        private string m_DeviceClass;

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceManual
        {
            get => m_DeviceManual;
            set => SetField(ref m_DeviceManual, value, nameof(DeviceManual));
        }
        private string m_DeviceManual;

        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string DeviceRevision
        {
            get => m_DeviceRevision;
            set => SetField(ref m_DeviceRevision, value, nameof(DeviceRevision));
        }
        private string m_DeviceRevision;

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string HardwareRevision
        {
            get => m_HardwareRevision;
            set => SetField(ref m_HardwareRevision, value, nameof(HardwareRevision));
        }
        private string m_HardwareRevision;

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText Manufacturer
        {
            get => m_Manufacturer;
            set => SetField(ref m_Manufacturer, value, nameof(Manufacturer));
        }
        private LocalizedText m_Manufacturer;

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ManufacturerUri
        {
            get => m_ManufacturerUri;
            set => SetField(ref m_ManufacturerUri, value, nameof(ManufacturerUri));
        }
        private string m_ManufacturerUri;

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public LocalizedText Model
        {
            get => m_Model;
            set => SetField(ref m_Model, value, nameof(Model));
        }
        private LocalizedText m_Model;

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ProductCode
        {
            get => m_ProductCode;
            set => SetField(ref m_ProductCode, value, nameof(ProductCode));
        }
        private string m_ProductCode;

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string ProductInstanceUri
        {
            get => m_ProductInstanceUri;
            set => SetField(ref m_ProductInstanceUri, value, nameof(ProductInstanceUri));
        }
        private string m_ProductInstanceUri;

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public int? RevisionCounter
        {
            get => m_RevisionCounter;
            set => SetField(ref m_RevisionCounter, value, nameof(RevisionCounter));
        }
        private int? m_RevisionCounter;

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string SerialNumber
        {
            get => m_SerialNumber;
            set => SetField(ref m_SerialNumber, value, nameof(SerialNumber));
        }
        private string m_SerialNumber;

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public string SoftwareRevision
        {
            get => m_SoftwareRevision;
            set => SetField(ref m_SoftwareRevision, value, nameof(SoftwareRevision));
        }
        private string m_SoftwareRevision;


        #endregion
    }
    #endregion


    #region DeviceModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.7
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DeviceType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class DeviceModel : ComponentModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceModel" /> class.
        /// </summary>
        public DeviceModel() : this((DeviceModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public DeviceModel(DeviceModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.DeviceClass != null)
                {
                    DeviceClass = template.DeviceClass.Clone() as string;
                }
                if (template.DeviceHealth != null)
                {
                    DeviceHealth = template.DeviceHealth;
                }
                if (template.DeviceHealthAlarms != null)
                {
                    DeviceHealthAlarms = new FolderModel(template.DeviceHealthAlarms);
                }
                DeviceManual = template.DeviceManual == null ? null : template.DeviceManual.Clone() as string;
                DeviceRevision = template.DeviceRevision == null ? null : template.DeviceRevision.Clone() as string;
                if (template.DeviceTypeImage != null)
                {
                    DeviceTypeImage = new FolderModel(template.DeviceTypeImage);
                }
                if (template.Documentation != null)
                {
                    Documentation = new FolderModel(template.Documentation);
                }
                HardwareRevision = template.HardwareRevision == null ? null : template.HardwareRevision.Clone() as string;
                if (template.ImageSet != null)
                {
                    ImageSet = new FolderModel(template.ImageSet);
                }
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                if (template.ManufacturerUri != null)
                {
                    ManufacturerUri = template.ManufacturerUri.Clone() as string;
                }
                Model = template.Model == null ? null : template.Model.Clone() as LocalizedText;
                if (template.ProductCode != null)
                {
                    ProductCode = template.ProductCode.Clone() as string;
                }
                if (template.ProductInstanceUri != null)
                {
                    ProductInstanceUri = template.ProductInstanceUri.Clone() as string;
                }
                if (template.ProtocolSupport != null)
                {
                    ProtocolSupport = new FolderModel(template.ProtocolSupport);
                }
                RevisionCounter = template.RevisionCounter;
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
                SoftwareRevision = template.SoftwareRevision == null ? null : template.SoftwareRevision.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the DeviceClass
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string DeviceClass
        {
            get {return (string)base.DeviceClass;}
            set {base.DeviceClass = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceHealth
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public DeviceHealthEnumeration? DeviceHealth
        {
            get => m_DeviceHealth;
            set => SetField(ref m_DeviceHealth, value, nameof(DeviceHealth));
        }
        private DeviceHealthEnumeration? m_DeviceHealth;

        /// <summary>
        /// Gets or sets the DeviceHealthAlarms
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel DeviceHealthAlarms { get; set; }

        /// <summary>
        /// Gets or sets the DeviceManual
        /// </summary>
        /// <details>
        /// Address (pathname in the file system or a URL | Web address) of user manual for the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string DeviceManual
        {
            get {return (string)base.DeviceManual;}
            set {base.DeviceManual = value;}
        }

        /// <summary>
        /// Gets or sets the DeviceRevision
        /// </summary>
        /// <details>
        /// Overall revision level of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string DeviceRevision
        {
            get {return (string)base.DeviceRevision;}
            set {base.DeviceRevision = value;}
        }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.2
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel DeviceTypeImage { get; set; }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.3
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel Documentation { get; set; }

        /// <summary>
        /// Gets or sets the HardwareRevision
        /// </summary>
        /// <details>
        /// Revision level of the hardware of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string HardwareRevision
        {
            get {return (string)base.HardwareRevision;}
            set {base.HardwareRevision = value;}
        }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.5
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel ImageSet { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        /// <details>
        /// Name of the company that manufactured the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the ManufacturerUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string ManufacturerUri
        {
            get {return (string)base.ManufacturerUri;}
            set {base.ManufacturerUri = value;}
        }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        /// <details>
        /// Model name of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new LocalizedText Model
        {
            get {return (LocalizedText)base.Model;}
            set {base.Model = value;}
        }

        /// <summary>
        /// Gets or sets the ProductCode
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string ProductCode
        {
            get {return (string)base.ProductCode;}
            set {base.ProductCode = value;}
        }

        /// <summary>
        /// Gets or sets the ProductInstanceUri
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string ProductInstanceUri
        {
            get {return (string)base.ProductInstanceUri;}
            set {base.ProductInstanceUri = value;}
        }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/DI/v102/docs/5.5.5/#5.5.5.4
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FolderModel ProtocolSupport { get; set; }

        /// <summary>
        /// Gets or sets the RevisionCounter
        /// </summary>
        /// <details>
        /// An incremental counter indicating the number of times the static data within the Device has been modified
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new int RevisionCounter
        {
            get {return (int)(base.RevisionCounter.HasValue ? base.RevisionCounter : (int)0);}
            set {base.RevisionCounter = value;}
        }

        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        /// <details>
        /// Identifier that uniquely identifies, within a manufacturer, a device instance
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string SerialNumber
        {
            get {return (string)base.SerialNumber;}
            set {base.SerialNumber = value;}
        }

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        /// <details>
        /// Revision level of the software/firmware of the device
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string SoftwareRevision
        {
            get {return (string)base.SoftwareRevision;}
            set {base.SoftwareRevision = value;}
        }


        #endregion
    }
    #endregion


    #region SoftwareModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.8
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.SoftwareType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class SoftwareModel : ComponentModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareModel" /> class.
        /// </summary>
        public SoftwareModel() : this((SoftwareModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SoftwareModel(SoftwareModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                Manufacturer = template.Manufacturer == null ? null : template.Manufacturer.Clone() as LocalizedText;
                Model = template.Model == null ? null : template.Model.Clone() as LocalizedText;
                SoftwareRevision = template.SoftwareRevision == null ? null : template.SoftwareRevision.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Manufacturer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new LocalizedText Manufacturer
        {
            get {return (LocalizedText)base.Manufacturer;}
            set {base.Manufacturer = value;}
        }

        /// <summary>
        /// Gets or sets the Model
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new LocalizedText Model
        {
            get {return (LocalizedText)base.Model;}
            set {base.Model = value;}
        }

        /// <summary>
        /// Gets or sets the SoftwareRevision
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public new string SoftwareRevision
        {
            get {return (string)base.SoftwareRevision;}
            set {base.SoftwareRevision = value;}
        }


        #endregion
    }
    #endregion


    #region ConnectionPointModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/5.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.ConnectionPointType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class ConnectionPointModel : TopologyElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionPointModel" /> class.
        /// </summary>
        public ConnectionPointModel() : this((ConnectionPointModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionPointModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public ConnectionPointModel(ConnectionPointModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                NetworkAddress = new FunctionalGroupModel();
            }
            else
            {
                NetworkAddress = new FunctionalGroupModel(template.NetworkAddress);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the NetworkAddress
        /// </summary>
        /// <details>
        /// The address of the device on this network.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public FunctionalGroupModel NetworkAddress { get; set; }


        #endregion
    }
    #endregion


    #region TransferServicesModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/6.4.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TransferServicesType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class TransferServicesModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferServicesModel" /> class.
        /// </summary>
        public TransferServicesModel() : this((TransferServicesModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferServicesModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public TransferServicesModel(TransferServicesModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            ITransferServicesMethods implemention = TransferServicesMethods;

            if (implemention == null)
            {
                implemention = this as ITransferServicesMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == OpcUa.DI.MethodIds.TransferServicesType_FetchTransferResultData)
            {
                ExtensionObject FetchResultData;
                StatusCode ret = implemention.FetchTransferResultData(context, this, inputArguments[0].ToInt32(), inputArguments[1].ToInt32(), inputArguments[2].ToInt32(), inputArguments[3].ToBoolean(), out FetchResultData);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(FetchResultData);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.TransferServicesType_TransferFromDevice)
            {
                int TransferID;
                int InitTransferStatus;
                StatusCode ret = implemention.TransferFromDevice(context, this, out TransferID, out InitTransferStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(TransferID);
                    outputArguments[ 1 ] = new Variant(InitTransferStatus);
                }
                return ret;

            }
            if (methodDeclarationId == OpcUa.DI.MethodIds.TransferServicesType_TransferToDevice)
            {
                int TransferID;
                int InitTransferStatus;
                StatusCode ret = implemention.TransferToDevice(context, this, out TransferID, out InitTransferStatus);
                if (ret.IsGood())
                {
                    outputArguments[ 0 ] = new Variant(TransferID);
                    outputArguments[ 1 ] = new Variant(InitTransferStatus);
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the TransferServices methods.
        /// </summary>
        /// <value>
        /// The TransferServices methods.
        /// </value>
        public ITransferServicesMethods TransferServicesMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the TransferServicesModel object.
    /// </summary>
    public interface ITransferServicesMethods
    {
        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/6.4.6
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="TransferID"></param>
        /// <param name="SequenceNumber"></param>
        /// <param name="MaxParameterResultsToReturn"></param>
        /// <param name="OmitGoodResults"></param>
        /// <param name="FetchResultData">out: </param>
        /// <returns></returns>
        StatusCode FetchTransferResultData(
            RequestContext context,
            TransferServicesModel model,
            int TransferID,
            int SequenceNumber,
            int MaxParameterResultsToReturn,
            bool OmitGoodResults,
            out ExtensionObject FetchResultData
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/6.4.5
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="TransferID">out: </param>
        /// <param name="InitTransferStatus">out: </param>
        /// <returns></returns>
        StatusCode TransferFromDevice(
            RequestContext context,
            TransferServicesModel model,
            out int TransferID,
            out int InitTransferStatus
            );

        /// <summary>
        /// https://reference.opcfoundation.org/DI/v104/docs/6.4.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="TransferID">out: </param>
        /// <param name="InitTransferStatus">out: </param>
        /// <returns></returns>
        StatusCode TransferToDevice(
            RequestContext context,
            TransferServicesModel model,
            out int TransferID,
            out int InitTransferStatus
            );


    }
    #endregion


    #region DeviceHealthDiagnosticAlarmModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.12.2
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.DeviceHealthDiagnosticAlarmType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class DeviceHealthDiagnosticAlarmModel : InstrumentDiagnosticAlarmModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceHealthDiagnosticAlarmModel" /> class.
        /// </summary>
        public DeviceHealthDiagnosticAlarmModel() : this((DeviceHealthDiagnosticAlarmModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceHealthDiagnosticAlarmModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public DeviceHealthDiagnosticAlarmModel(DeviceHealthDiagnosticAlarmModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region CheckFunctionAlarmModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.12.4
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.CheckFunctionAlarmType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class CheckFunctionAlarmModel : DeviceHealthDiagnosticAlarmModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckFunctionAlarmModel" /> class.
        /// </summary>
        public CheckFunctionAlarmModel() : this((CheckFunctionAlarmModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckFunctionAlarmModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public CheckFunctionAlarmModel(CheckFunctionAlarmModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region FailureAlarmModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.12.3
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.FailureAlarmType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class FailureAlarmModel : DeviceHealthDiagnosticAlarmModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="FailureAlarmModel" /> class.
        /// </summary>
        public FailureAlarmModel() : this((FailureAlarmModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FailureAlarmModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public FailureAlarmModel(FailureAlarmModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region MaintenanceRequiredAlarmModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.12.6
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MaintenanceRequiredAlarmType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class MaintenanceRequiredAlarmModel : DeviceHealthDiagnosticAlarmModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MaintenanceRequiredAlarmModel" /> class.
        /// </summary>
        public MaintenanceRequiredAlarmModel() : this((MaintenanceRequiredAlarmModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaintenanceRequiredAlarmModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MaintenanceRequiredAlarmModel(MaintenanceRequiredAlarmModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region OffSpecAlarmModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.12.5
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.OffSpecAlarmType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class OffSpecAlarmModel : DeviceHealthDiagnosticAlarmModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="OffSpecAlarmModel" /> class.
        /// </summary>
        public OffSpecAlarmModel() : this((OffSpecAlarmModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OffSpecAlarmModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public OffSpecAlarmModel(OffSpecAlarmModel template) : base(template)
        {
            m_FieldHandles = (template != null) ? template.m_FieldHandles : null;

        }
        #endregion

        #region Public Properties

        #endregion

        #region Event Handling Methods
        /// <summary>
        /// Updates the event.
        /// </summary>
        /// <param name="e">The event to update.</param>
        public override void UpdateEvent(GenericEvent e)
        {
            base.UpdateEvent(e);

            if (m_FieldHandles == null)
            {
                m_FieldHandles = new FieldHandle();
            }
        }
        #region FieldHandle Class
        /// <summary>
        /// A class of handle values used by the class.
        /// </summary>
        private class FieldHandle
        {
        }

        private FieldHandle m_FieldHandles;
        #endregion
        #endregion
    }
    #endregion


    #region LifetimeVariableModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/10.2.2
    /// </summary>
    [UaTypeDefinition(NodeId=VariableTypes.LifetimeVariableType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class LifetimeVariableModel : AnalogUnitModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeVariableModel" /> class.
        /// </summary>
        public LifetimeVariableModel() : this((LifetimeVariableModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeVariableModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public LifetimeVariableModel(LifetimeVariableModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.Indication != null)
                {
                    Indication = template.Indication.Clone() as NodeId;
                }
                LimitValue = template.LimitValue;
                StartValue = template.StartValue;
                if (template.WarningValues != null)
                {
                    WarningValues = template.WarningValues.Clone() as Variant[];
                }
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Indication
        /// </summary>
        /// <details>
        /// Indication gives an indication of what is actually measured / represented by the Value of the Variable and the StartValue and LimitValue.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public NodeId Indication
        {
            get => m_Indication;
            set => SetField(ref m_Indication, value, nameof(Indication));
        }
        private NodeId m_Indication;

        /// <summary>
        /// Gets or sets the LimitValue
        /// </summary>
        /// <details>
        /// LimitValue indicates when the end of lifetime has been reached.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public object LimitValue
        {
            get => m_LimitValue;
            set => SetField(ref m_LimitValue, value, nameof(LimitValue));
        }
        private object m_LimitValue;

        /// <summary>
        /// Gets or sets the StartValue
        /// </summary>
        /// <details>
        /// StartValue indicates the initial value, when there is still the full lifetime left.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public object StartValue
        {
            get => m_StartValue;
            set => SetField(ref m_StartValue, value, nameof(StartValue));
        }
        private object m_StartValue;

        /// <summary>
        /// Gets or sets the WarningValues
        /// </summary>
        /// <details>
        /// WarningValues indicates one or more levels when the end of lifetime is reached soon and may be used to inform the user when reached.
        /// </details>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public Variant[] WarningValues
        {
            get => m_WarningValues;
            set => SetField(ref m_WarningValues, value, nameof(WarningValues));
        }
        private Variant[] m_WarningValues;


        #endregion
    }
    /// <summary>
    /// A typed object which represents a LifetimeVariableType.
    /// </summary>
    public partial class LifetimeVariableModel<T> : LifetimeVariableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeVariableModel" /> class.
        /// </summary>
        public LifetimeVariableModel() : this((LifetimeVariableModel<T>)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeVariableModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public LifetimeVariableModel(LifetimeVariableModel<T> template) : base(template)
        {
            if (template != null)
            {
                Value = (T) template.Value;
            }
        }
        #endregion

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>
        /// The value.
        /// </value>
        [UaInstanceDeclaration(IsValue = true, NamespaceUri = OpcUa.DI.Namespaces.DI)]
        public new T Value
        {
            get { return (T)((base.Value)??default(T)); }
            set { base.Value = value; }
        }
    }
    #endregion


    #region UIElementModel
    /// <summary>
    /// https://reference.opcfoundation.org/DI/v104/docs/4.4.3
    /// </summary>
    [UaTypeDefinition(NodeId=VariableTypes.UIElementType, NamespaceUri=OpcUa.DI.Namespaces.DI)]
    public partial class UIElementModel : BaseDataVariableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="UIElementModel" /> class.
        /// </summary>
        public UIElementModel() : this((UIElementModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UIElementModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public UIElementModel(UIElementModel template, DummyArgument dummy = null) : base(template)
        {
        }
        #endregion

        #region Public Properties



        #endregion
    }
    /// <summary>
    /// A typed object which represents a UIElementType.
    /// </summary>
    public partial class UIElementModel<T> : UIElementModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="UIElementModel" /> class.
        /// </summary>
        public UIElementModel() : this((UIElementModel<T>)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UIElementModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public UIElementModel(UIElementModel<T> template) : base(template)
        {
            if (template != null)
            {
                Value = (T) template.Value;
            }
        }
        #endregion

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>
        /// The value.
        /// </value>
        [UaInstanceDeclaration(IsValue = true, NamespaceUri = OpcUa.DI.Namespaces.DI)]
        public new T Value
        {
            get { return (T)((base.Value)??default(T)); }
            set { base.Value = value; }
        }
    }
    #endregion



}
