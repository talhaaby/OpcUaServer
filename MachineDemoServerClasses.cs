/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.9, using .NET Server 3.3.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://unified-automation.com/MachineDemoServer/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using OpcUa.Glass;
using OpcUa.IA;
using OpcUa.Machinery;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace UnifiedAutomation.MachineDemoServer
{
    #region GlassTemperingMachineModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.GlassTemperingMachineType, NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
    public partial class GlassTemperingMachineModel : GlassMachineModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="GlassTemperingMachineModel" /> class.
        /// </summary>
        public GlassTemperingMachineModel() : this((GlassTemperingMachineModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlassTemperingMachineModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public GlassTemperingMachineModel(GlassTemperingMachineModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Components = new Components_MachineComponentsModel();
                MachineryBuildingBlocks = new MachineryBuildingBlocks_FolderModel();
                Production = new ProductionModel();
            }
            else
            {
                Components = new Components_MachineComponentsModel(template.Components);
                MachineryBuildingBlocks = new MachineryBuildingBlocks_FolderModel(template.MachineryBuildingBlocks);
                Production = new ProductionModel(template.Production);
            }
        }
        #endregion

        #region Nested Classes
        /// <summary>
        /// Helper class for GlassTemperingMachineModel.Components
        /// </summary>
        public partial class Components_MachineComponentsModel : MachineComponentsModel
        {
            /// <remarks/>
            public Components_MachineComponentsModel(Components_MachineComponentsModel template = null, DummyArgument dummy = null): base(template)
            {
                if (template == null)
                {
                    Heater = new HeaterModel();
                    Stacklight = new BasicStacklightModel();
                }
                else
                {
                    Heater = new HeaterModel(template.Heater);
                    Stacklight = new BasicStacklightModel(template.Stacklight);
                }
            }
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
            public HeaterModel Heater { get; set;}
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
            public BasicStacklightModel Stacklight { get; set;}
        }
        /// <summary>
        /// Helper class for GlassTemperingMachineModel.MachineryBuildingBlocks
        /// </summary>
        public partial class MachineryBuildingBlocks_FolderModel : FolderModel
        {
            /// <remarks/>
            public MachineryBuildingBlocks_FolderModel(MachineryBuildingBlocks_FolderModel template = null, DummyArgument dummy = null): base(template)
            {
                if (template == null)
                {
                    MachineryItemState = new MachineryItemState_StateMachineModel();
                    MachineryOperationMode = new MachineryOperationModeStateMachineModel();
                }
                else
                {
                    MachineryItemState = new MachineryItemState_StateMachineModel(template.MachineryItemState);
                    MachineryOperationMode = new MachineryOperationModeStateMachineModel(template.MachineryOperationMode);
                }
            }
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.Machinery)]
            public MachineryItemState_StateMachineModel MachineryItemState { get; set;}
            /// <remarks/>
            [UaInstanceDeclaration(NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.Machinery)]
            public MachineryOperationModeStateMachineModel MachineryOperationMode { get; set;}
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Components
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Machinery)]
        public new Components_MachineComponentsModel Components
        {
            get {return (Components_MachineComponentsModel) base.Components;}
            set {base.Components = value;}
        }

        /// <summary>
        /// Gets or sets the MachineryBuildingBlocks
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Machinery)]
        public MachineryBuildingBlocks_FolderModel MachineryBuildingBlocks { get; set; }

        /// <summary>
        /// Gets or sets the Production
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new ProductionModel Production
        {
            get {return (ProductionModel) base.Production;}
            set {base.Production = value;}
        }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IGlassTemperingMachineMethods implemention = GlassTemperingMachineMethods;

            if (implemention == null)
            {
                implemention = this as IGlassTemperingMachineMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }

            ExpandedNodeId methodDeclarationId = NodeId.ToAbsoluteNodeId(methodHandle.MethodDeclarationId, context.NamespaceUris);

            if (methodDeclarationId == UnifiedAutomation.MachineDemoServer.MethodIds.GlassTemperingMachineType_Process)
            {
                StatusCode ret = implemention.Process(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            if (methodDeclarationId == UnifiedAutomation.MachineDemoServer.MethodIds.GlassTemperingMachineType_Setup)
            {
                StatusCode ret = implemention.Setup(context, this);
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the GlassTemperingMachine methods.
        /// </summary>
        /// <value>
        /// The GlassTemperingMachine methods.
        /// </value>
        public IGlassTemperingMachineMethods GlassTemperingMachineMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the GlassTemperingMachineModel object.
    /// </summary>
    public interface IGlassTemperingMachineMethods
    {
        /// <summary>
        /// Sets the MachineryItemState to Processing
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Process(
            RequestContext context,
            GlassTemperingMachineModel model
            );

        /// <summary>
        /// Sets the MachineryItemState to Setup
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode Setup(
            RequestContext context,
            GlassTemperingMachineModel model
            );


    }
    #endregion


    #region TemperingInstructionModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TemperingInstructionType, NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
    public partial class TemperingInstructionModel : InstructionModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperingInstructionModel" /> class.
        /// </summary>
        public TemperingInstructionModel() : this((TemperingInstructionModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperingInstructionModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public TemperingInstructionModel(TemperingInstructionModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                LoadedPlan = template.LoadedPlan == null ? null : template.LoadedPlan.Clone() as GlassTemperingPlan;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the LoadedPlan
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.MachineDemoServer)]
        public GlassTemperingPlan LoadedPlan
        {
            get => m_LoadedPlan;
            set => SetField(ref m_LoadedPlan, value, nameof(LoadedPlan));
        }
        private GlassTemperingPlan m_LoadedPlan;


        #endregion
    }
    #endregion


    #region MachineDeviceModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MachineDeviceType, NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
    public partial class MachineDeviceModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDeviceModel" /> class.
        /// </summary>
        public MachineDeviceModel() : this((MachineDeviceModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDeviceModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public MachineDeviceModel(MachineDeviceModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Identification = new MachineryComponentIdentificationModel();
            }
            else
            {
                Identification = new MachineryComponentIdentificationModel(template.Identification);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Identification
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DI)]
        public MachineryComponentIdentificationModel Identification { get; set; }


        #endregion
    }
    #endregion


    #region HeaterModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.HeaterType, NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
    public partial class HeaterModel : MachineDeviceModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="HeaterModel" /> class.
        /// </summary>
        public HeaterModel() : this((HeaterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public HeaterModel(HeaterModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Temperature = new AnalogUnitRangeModel<double>();
                TemperatureCondition = new ExclusiveLevelAlarmModel();
                TemperatureSetpoint = new AnalogUnitModel<double>();
            }
            else
            {
                Temperature = new AnalogUnitRangeModel<double>(template.Temperature);
                TemperatureCondition = new ExclusiveLevelAlarmModel(template.TemperatureCondition);
                TemperatureSetpoint = new AnalogUnitModel<double>(template.TemperatureSetpoint);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Temperature
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.MachineDemoServer)]
        public AnalogUnitRangeModel<double> Temperature { get; set; }

        /// <summary>
        /// Gets or sets the TemperatureCondition
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.MachineDemoServer)]
        public ExclusiveLevelAlarmModel TemperatureCondition { get; set; }

        /// <summary>
        /// Gets or sets the TemperatureSetpoint
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.MachineDemoServer)]
        public AnalogUnitModel<double> TemperatureSetpoint { get; set; }


        #endregion
    }
    #endregion


    #region TemperingJobModel
    /// <summary>
    /// Job type used for tempering
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TemperingJobType, NamespaceUri=UnifiedAutomation.MachineDemoServer.Namespaces.MachineDemoServer)]
    public partial class TemperingJobModel : ProcessingJobModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperingJobModel" /> class.
        /// </summary>
        public TemperingJobModel() : this((TemperingJobModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperingJobModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public TemperingJobModel(TemperingJobModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
                Instruction = new TemperingInstructionModel();
            }
            else
            {
                Instruction = new TemperingInstructionModel(template.Instruction);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Instruction
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.Glass)]
        public new TemperingInstructionModel Instruction
        {
            get {return (TemperingInstructionModel) base.Instruction;}
            set {base.Instruction = value;}
        }


        #endregion
    }
    #endregion



}
