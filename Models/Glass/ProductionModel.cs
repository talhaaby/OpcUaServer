/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.7, using .NET Server 3.1.0 template (version 0)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
** </auto-generated>
**
** Copyright (c) 2006-2023 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/Glass/Flat/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 01.08.2022
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using OpcUa.DI;
using OpcUa.Machinery;
using UnifiedAutomation.MachineDemoServer;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace OpcUa.Glass
{
    //! [ProductionMethods class]
    public partial class ProductionModel : IProductionMethods
    //! [ProductionMethods class]
    {
        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.2
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Target"></param>
        /// <param name="Source"></param>
        /// <param name="Before"></param>
        /// <returns></returns>
        public StatusCode ChangePositionInList(
            RequestContext context,
            ProductionModel model,
            string Target,
            string Source,
            bool Before
            )
        {
            Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] ChangePositionInList");
            var targetJob = ProductionPlan.FirstOrDefault(j => j.Identifier == Target);
            var sourceJob = ProductionPlan.FirstOrDefault(j => j.Identifier == Source);

            if (targetJob == null || sourceJob == null)
            {
                return StatusCodes.BadNotFound;
            }

            ProductionPlan.Move(targetJob, sourceJob, Before);

            return StatusCodes.Good;
        }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.3
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Identifier"></param>
        /// <returns></returns>
        public StatusCode DeleteJob(
            RequestContext context,
            ProductionModel model,
            string Identifier
            )
        {
            Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] DeleteJob");
            var job = ProductionPlan.FirstOrDefault(j => j.Identifier == Identifier);
            if (job != null)
            {
                ProductionPlan.Remove(job);
                CurrentCountOfJobs = (uint)ProductionPlan.Count;

                return StatusCodes.Good;
            }

            return StatusCodes.BadNotFound;
        }

        /// <summary>
        /// https://reference.opcfoundation.org/v104/Glass/Flat/v100/docs/7.2.1/#7.2.1.4
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="Identifier"></param>
        /// <param name="Name"></param>
        /// <param name="InputMaterial"></param>
        /// <param name="OutputMaterial"></param>
        /// <param name="JobNodeId">out: </param>
        /// <returns></returns>
        //! [ProductionMethods InsertJob]
        public StatusCode InsertJob(
            RequestContext context,
            ProductionModel model,
            string Identifier,
            string Name,
            NodeId[] InputMaterial,
            NodeId[] OutputMaterial,
            out NodeId JobNodeId
            )
        {
            Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] InsertJob");
            if (ProductionPlan.Any(j => j.Identifier == Identifier))
            {
                JobNodeId = null;
                return StatusCodes.BadAlreadyExists;
            }

            var job = new TemperingJobModel()
            {
                Identifier = Identifier,
                Name = Name,
            };

            ProductionPlan.Add(job);
            job.Initialize();

            CurrentCountOfJobs = (uint)ProductionPlan.Count;

            JobNodeId = job.JobNodeId;
            
            return StatusCodes.Good;
        }
        //! [ProductionMethods InsertJob]
    }
}

